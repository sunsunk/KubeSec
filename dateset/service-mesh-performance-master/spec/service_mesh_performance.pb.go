// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.2
// source: protos/service_mesh_performance.proto

package smp

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PerformanceTestConfig_Client_Protocol int32

const (
	PerformanceTestConfig_Client_PROTOCOL_INVALID PerformanceTestConfig_Client_Protocol = 0
	PerformanceTestConfig_Client_PROTOCOL_HTTP    PerformanceTestConfig_Client_Protocol = 1
	PerformanceTestConfig_Client_PROTOCOL_TCP     PerformanceTestConfig_Client_Protocol = 2
	PerformanceTestConfig_Client_PROTOCOL_UDP     PerformanceTestConfig_Client_Protocol = 3
	PerformanceTestConfig_Client_PROTOCOL_GRPC    PerformanceTestConfig_Client_Protocol = 4
)

// Enum value maps for PerformanceTestConfig_Client_Protocol.
var (
	PerformanceTestConfig_Client_Protocol_name = map[int32]string{
		0: "PROTOCOL_INVALID",
		1: "PROTOCOL_HTTP",
		2: "PROTOCOL_TCP",
		3: "PROTOCOL_UDP",
		4: "PROTOCOL_GRPC",
	}
	PerformanceTestConfig_Client_Protocol_value = map[string]int32{
		"PROTOCOL_INVALID": 0,
		"PROTOCOL_HTTP":    1,
		"PROTOCOL_TCP":     2,
		"PROTOCOL_UDP":     3,
		"PROTOCOL_GRPC":    4,
	}
)

func (x PerformanceTestConfig_Client_Protocol) Enum() *PerformanceTestConfig_Client_Protocol {
	p := new(PerformanceTestConfig_Client_Protocol)
	*p = x
	return p
}

func (x PerformanceTestConfig_Client_Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PerformanceTestConfig_Client_Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_service_mesh_performance_proto_enumTypes[0].Descriptor()
}

func (PerformanceTestConfig_Client_Protocol) Type() protoreflect.EnumType {
	return &file_protos_service_mesh_performance_proto_enumTypes[0]
}

func (x PerformanceTestConfig_Client_Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PerformanceTestConfig_Client_Protocol.Descriptor instead.
func (PerformanceTestConfig_Client_Protocol) EnumDescriptor() ([]byte, []int) {
	return file_protos_service_mesh_performance_proto_rawDescGZIP(), []int{0, 0, 0}
}

type PerformanceTestConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Spec version
	SmpVersion string            `protobuf:"bytes,1,opt,name=smp_version,json=smpVersion,proto3" json:"smp_version,omitempty"`
	Id         string            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name       string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Labels     map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Single or distributed load generators
	Clients []*PerformanceTestConfig_Client `protobuf:"bytes,5,rep,name=clients,proto3" json:"clients,omitempty"`
	// Length of time the endpoint will be under load
	Duration string `protobuf:"bytes,6,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *PerformanceTestConfig) Reset() {
	*x = PerformanceTestConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_service_mesh_performance_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformanceTestConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceTestConfig) ProtoMessage() {}

func (x *PerformanceTestConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_service_mesh_performance_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceTestConfig.ProtoReflect.Descriptor instead.
func (*PerformanceTestConfig) Descriptor() ([]byte, []int) {
	return file_protos_service_mesh_performance_proto_rawDescGZIP(), []int{0}
}

func (x *PerformanceTestConfig) GetSmpVersion() string {
	if x != nil {
		return x.SmpVersion
	}
	return ""
}

func (x *PerformanceTestConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PerformanceTestConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PerformanceTestConfig) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *PerformanceTestConfig) GetClients() []*PerformanceTestConfig_Client {
	if x != nil {
		return x.Clients
	}
	return nil
}

func (x *PerformanceTestConfig) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

type PerformanceTestResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Spec version
	SmpVersion string            `protobuf:"bytes,1,opt,name=smp_version,json=smpVersion,proto3" json:"smp_version,omitempty"`
	Id         string            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Labels     map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// All times in UTC
	StartTime    *timestamppb.Timestamp         `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime      *timestamppb.Timestamp         `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	LatenciesMs  *PerformanceTestResult_Latency `protobuf:"bytes,6,opt,name=latencies_ms,json=latenciesMs,proto3" json:"latencies_ms,omitempty"`
	ActualQps    float64                        `protobuf:"fixed64,7,opt,name=actual_qps,json=actualQps,proto3" json:"actual_qps,omitempty"`
	DetailsUri   string                         `protobuf:"bytes,8,opt,name=details_uri,json=detailsUri,proto3" json:"details_uri,omitempty"`
	TestId       string                         `protobuf:"bytes,9,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	MeshConfigId string                         `protobuf:"bytes,10,opt,name=mesh_config_id,json=meshConfigId,proto3" json:"mesh_config_id,omitempty"`
	EnvId        string                         `protobuf:"bytes,11,opt,name=env_id,json=envId,proto3" json:"env_id,omitempty"`
}

func (x *PerformanceTestResult) Reset() {
	*x = PerformanceTestResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_service_mesh_performance_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformanceTestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceTestResult) ProtoMessage() {}

func (x *PerformanceTestResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_service_mesh_performance_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceTestResult.ProtoReflect.Descriptor instead.
func (*PerformanceTestResult) Descriptor() ([]byte, []int) {
	return file_protos_service_mesh_performance_proto_rawDescGZIP(), []int{1}
}

func (x *PerformanceTestResult) GetSmpVersion() string {
	if x != nil {
		return x.SmpVersion
	}
	return ""
}

func (x *PerformanceTestResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PerformanceTestResult) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *PerformanceTestResult) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *PerformanceTestResult) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *PerformanceTestResult) GetLatenciesMs() *PerformanceTestResult_Latency {
	if x != nil {
		return x.LatenciesMs
	}
	return nil
}

func (x *PerformanceTestResult) GetActualQps() float64 {
	if x != nil {
		return x.ActualQps
	}
	return 0
}

func (x *PerformanceTestResult) GetDetailsUri() string {
	if x != nil {
		return x.DetailsUri
	}
	return ""
}

func (x *PerformanceTestResult) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *PerformanceTestResult) GetMeshConfigId() string {
	if x != nil {
		return x.MeshConfigId
	}
	return ""
}

func (x *PerformanceTestResult) GetEnvId() string {
	if x != nil {
		return x.EnvId
	}
	return ""
}

type ServiceMeshConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SmpVersion           string                              `protobuf:"bytes,1,opt,name=smp_version,json=smpVersion,proto3" json:"smp_version,omitempty"`
	Id                   string                              `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Labels               map[string]string                   `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IngressGateway       *ServiceMeshConfig_IngressGateway   `protobuf:"bytes,4,opt,name=ingress_gateway,json=ingressGateway,proto3" json:"ingress_gateway,omitempty"`
	Sidecar              *ServiceMeshConfig_Sidecar          `protobuf:"bytes,5,opt,name=sidecar,proto3" json:"sidecar,omitempty"`
	MeshTelemetry        *ServiceMeshConfig_MeshTelemetry    `protobuf:"bytes,6,opt,name=mesh_telemetry,json=meshTelemetry,proto3" json:"mesh_telemetry,omitempty"`
	MeshPolicy           *ServiceMeshConfig_MeshPolicy       `protobuf:"bytes,7,opt,name=mesh_policy,json=meshPolicy,proto3" json:"mesh_policy,omitempty"`
	MeshControlPlane     *ServiceMeshConfig_MeshControlPlane `protobuf:"bytes,8,opt,name=mesh_control_plane,json=meshControlPlane,proto3" json:"mesh_control_plane,omitempty"`
	MeshPolicyEnabled    bool                                `protobuf:"varint,9,opt,name=mesh_policy_enabled,json=meshPolicyEnabled,proto3" json:"mesh_policy_enabled,omitempty"`
	MeshTelemetryEnabled bool                                `protobuf:"varint,10,opt,name=mesh_telemetry_enabled,json=meshTelemetryEnabled,proto3" json:"mesh_telemetry_enabled,omitempty"`
	MtlsEnabled          bool                                `protobuf:"varint,11,opt,name=mtls_enabled,json=mtlsEnabled,proto3" json:"mtls_enabled,omitempty"`
	ProxyConcurrency     int32                               `protobuf:"varint,12,opt,name=proxy_concurrency,json=proxyConcurrency,proto3" json:"proxy_concurrency,omitempty"`
	MeshBuild            string                              `protobuf:"bytes,13,opt,name=mesh_build,json=meshBuild,proto3" json:"mesh_build,omitempty"`
	ProxyBuild           string                              `protobuf:"bytes,14,opt,name=proxy_build,json=proxyBuild,proto3" json:"proxy_build,omitempty"`
	ExpGroupUuid         string                              `protobuf:"bytes,15,opt,name=exp_group_uuid,json=expGroupUuid,proto3" json:"exp_group_uuid,omitempty"`
	ExpUuid              string                              `protobuf:"bytes,16,opt,name=exp_uuid,json=expUuid,proto3" json:"exp_uuid,omitempty"`
	Profile              string                              `protobuf:"bytes,17,opt,name=profile,proto3" json:"profile,omitempty"`
	MeshType             *ServiceMesh                        `protobuf:"bytes,18,opt,name=mesh_type,json=meshType,proto3" json:"mesh_type,omitempty"`
	ApplicationMetadata  *ApplicationMetadata                `protobuf:"bytes,19,opt,name=application_metadata,json=applicationMetadata,proto3" json:"application_metadata,omitempty"`
}

func (x *ServiceMeshConfig) Reset() {
	*x = ServiceMeshConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_service_mesh_performance_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceMeshConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceMeshConfig) ProtoMessage() {}

func (x *ServiceMeshConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_service_mesh_performance_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceMeshConfig.ProtoReflect.Descriptor instead.
func (*ServiceMeshConfig) Descriptor() ([]byte, []int) {
	return file_protos_service_mesh_performance_proto_rawDescGZIP(), []int{2}
}

func (x *ServiceMeshConfig) GetSmpVersion() string {
	if x != nil {
		return x.SmpVersion
	}
	return ""
}

func (x *ServiceMeshConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServiceMeshConfig) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ServiceMeshConfig) GetIngressGateway() *ServiceMeshConfig_IngressGateway {
	if x != nil {
		return x.IngressGateway
	}
	return nil
}

func (x *ServiceMeshConfig) GetSidecar() *ServiceMeshConfig_Sidecar {
	if x != nil {
		return x.Sidecar
	}
	return nil
}

func (x *ServiceMeshConfig) GetMeshTelemetry() *ServiceMeshConfig_MeshTelemetry {
	if x != nil {
		return x.MeshTelemetry
	}
	return nil
}

func (x *ServiceMeshConfig) GetMeshPolicy() *ServiceMeshConfig_MeshPolicy {
	if x != nil {
		return x.MeshPolicy
	}
	return nil
}

func (x *ServiceMeshConfig) GetMeshControlPlane() *ServiceMeshConfig_MeshControlPlane {
	if x != nil {
		return x.MeshControlPlane
	}
	return nil
}

func (x *ServiceMeshConfig) GetMeshPolicyEnabled() bool {
	if x != nil {
		return x.MeshPolicyEnabled
	}
	return false
}

func (x *ServiceMeshConfig) GetMeshTelemetryEnabled() bool {
	if x != nil {
		return x.MeshTelemetryEnabled
	}
	return false
}

func (x *ServiceMeshConfig) GetMtlsEnabled() bool {
	if x != nil {
		return x.MtlsEnabled
	}
	return false
}

func (x *ServiceMeshConfig) GetProxyConcurrency() int32 {
	if x != nil {
		return x.ProxyConcurrency
	}
	return 0
}

func (x *ServiceMeshConfig) GetMeshBuild() string {
	if x != nil {
		return x.MeshBuild
	}
	return ""
}

func (x *ServiceMeshConfig) GetProxyBuild() string {
	if x != nil {
		return x.ProxyBuild
	}
	return ""
}

func (x *ServiceMeshConfig) GetExpGroupUuid() string {
	if x != nil {
		return x.ExpGroupUuid
	}
	return ""
}

func (x *ServiceMeshConfig) GetExpUuid() string {
	if x != nil {
		return x.ExpUuid
	}
	return ""
}

func (x *ServiceMeshConfig) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

func (x *ServiceMeshConfig) GetMeshType() *ServiceMesh {
	if x != nil {
		return x.MeshType
	}
	return nil
}

func (x *ServiceMeshConfig) GetApplicationMetadata() *ApplicationMetadata {
	if x != nil {
		return x.ApplicationMetadata
	}
	return nil
}

type EnvironmentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SmpVersion          string                                  `protobuf:"bytes,1,opt,name=smp_version,json=smpVersion,proto3" json:"smp_version,omitempty"`
	Id                  string                                  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Labels              map[string]string                       `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	KubernetesVersion   string                                  `protobuf:"bytes,4,opt,name=kubernetes_version,json=kubernetesVersion,proto3" json:"kubernetes_version,omitempty"`
	Nodes               []*EnvironmentConfig_Node               `protobuf:"bytes,5,rep,name=nodes,proto3" json:"nodes,omitempty"`
	IndividualWorkloads []*EnvironmentConfig_IndividualWorkload `protobuf:"bytes,6,rep,name=individual_workloads,json=individualWorkloads,proto3" json:"individual_workloads,omitempty"`
	TrafficMetadata     *TrafficMetadata                        `protobuf:"bytes,7,opt,name=traffic_metadata,json=trafficMetadata,proto3" json:"traffic_metadata,omitempty"`
}

func (x *EnvironmentConfig) Reset() {
	*x = EnvironmentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_service_mesh_performance_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvironmentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentConfig) ProtoMessage() {}

func (x *EnvironmentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protos_service_mesh_performance_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentConfig.ProtoReflect.Descriptor instead.
func (*EnvironmentConfig) Descriptor() ([]byte, []int) {
	return file_protos_service_mesh_performance_proto_rawDescGZIP(), []int{3}
}

func (x *EnvironmentConfig) GetSmpVersion() string {
	if x != nil {
		return x.SmpVersion
	}
	return ""
}

func (x *EnvironmentConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EnvironmentConfig) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *EnvironmentConfig) GetKubernetesVersion() string {
	if x != nil {
		return x.KubernetesVersion
	}
	return ""
}

func (x *EnvironmentConfig) GetNodes() []*EnvironmentConfig_Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *EnvironmentConfig) GetIndividualWorkloads() []*EnvironmentConfig_IndividualWorkload {
	if x != nil {
		return x.IndividualWorkloads
	}
	return nil
}

func (x *EnvironmentConfig) GetTrafficMetadata() *TrafficMetadata {
	if x != nil {
		return x.TrafficMetadata
	}
	return nil
}

type PerformanceTestConfig_Client struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Internal          bool                                  `protobuf:"varint,1,opt,name=internal,proto3" json:"internal,omitempty"`
	LoadGenerator     string                                `protobuf:"bytes,2,opt,name=load_generator,json=loadGenerator,proto3" json:"load_generator,omitempty"`
	Protocol          PerformanceTestConfig_Client_Protocol `protobuf:"varint,3,opt,name=protocol,proto3,enum=smp.PerformanceTestConfig_Client_Protocol" json:"protocol,omitempty"`
	Connections       int32                                 `protobuf:"varint,4,opt,name=connections,proto3" json:"connections,omitempty"`
	Rps               int64                                 `protobuf:"varint,5,opt,name=rps,proto3" json:"rps,omitempty"`
	Headers           map[string]string                     `protobuf:"bytes,6,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Cookies           map[string]string                     `protobuf:"bytes,7,rep,name=cookies,proto3" json:"cookies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Body              string                                `protobuf:"bytes,8,opt,name=body,proto3" json:"body,omitempty"`
	ContentType       string                                `protobuf:"bytes,9,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	EndpointUrls      []string                              `protobuf:"bytes,10,rep,name=endpoint_urls,json=endpointUrls,proto3" json:"endpoint_urls,omitempty"`
	SslCertificate    string                                `protobuf:"bytes,11,opt,name=ssl_certificate,json=sslCertificate,proto3" json:"ssl_certificate,omitempty"`
	AdditionalOptions string                                `protobuf:"bytes,12,opt,name=additional_options,json=additionalOptions,proto3" json:"additional_options,omitempty"`
}

func (x *PerformanceTestConfig_Client) Reset() {
	*x = PerformanceTestConfig_Client{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_service_mesh_performance_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformanceTestConfig_Client) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceTestConfig_Client) ProtoMessage() {}

func (x *PerformanceTestConfig_Client) ProtoReflect() protoreflect.Message {
	mi := &file_protos_service_mesh_performance_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceTestConfig_Client.ProtoReflect.Descriptor instead.
func (*PerformanceTestConfig_Client) Descriptor() ([]byte, []int) {
	return file_protos_service_mesh_performance_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PerformanceTestConfig_Client) GetInternal() bool {
	if x != nil {
		return x.Internal
	}
	return false
}

func (x *PerformanceTestConfig_Client) GetLoadGenerator() string {
	if x != nil {
		return x.LoadGenerator
	}
	return ""
}

func (x *PerformanceTestConfig_Client) GetProtocol() PerformanceTestConfig_Client_Protocol {
	if x != nil {
		return x.Protocol
	}
	return PerformanceTestConfig_Client_PROTOCOL_INVALID
}

func (x *PerformanceTestConfig_Client) GetConnections() int32 {
	if x != nil {
		return x.Connections
	}
	return 0
}

func (x *PerformanceTestConfig_Client) GetRps() int64 {
	if x != nil {
		return x.Rps
	}
	return 0
}

func (x *PerformanceTestConfig_Client) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *PerformanceTestConfig_Client) GetCookies() map[string]string {
	if x != nil {
		return x.Cookies
	}
	return nil
}

func (x *PerformanceTestConfig_Client) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *PerformanceTestConfig_Client) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *PerformanceTestConfig_Client) GetEndpointUrls() []string {
	if x != nil {
		return x.EndpointUrls
	}
	return nil
}

func (x *PerformanceTestConfig_Client) GetSslCertificate() string {
	if x != nil {
		return x.SslCertificate
	}
	return ""
}

func (x *PerformanceTestConfig_Client) GetAdditionalOptions() string {
	if x != nil {
		return x.AdditionalOptions
	}
	return ""
}

// latency histogram in ms and average
type PerformanceTestResult_Latency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min     float64 `protobuf:"fixed64,1,opt,name=min,proto3" json:"min,omitempty"`
	Average float64 `protobuf:"fixed64,2,opt,name=average,proto3" json:"average,omitempty"`
	P50     float64 `protobuf:"fixed64,3,opt,name=p50,proto3" json:"p50,omitempty"`
	P90     float64 `protobuf:"fixed64,4,opt,name=p90,proto3" json:"p90,omitempty"`
	P99     float64 `protobuf:"fixed64,5,opt,name=p99,proto3" json:"p99,omitempty"`
	Max     float64 `protobuf:"fixed64,6,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *PerformanceTestResult_Latency) Reset() {
	*x = PerformanceTestResult_Latency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_service_mesh_performance_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformanceTestResult_Latency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceTestResult_Latency) ProtoMessage() {}

func (x *PerformanceTestResult_Latency) ProtoReflect() protoreflect.Message {
	mi := &file_protos_service_mesh_performance_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceTestResult_Latency.ProtoReflect.Descriptor instead.
func (*PerformanceTestResult_Latency) Descriptor() ([]byte, []int) {
	return file_protos_service_mesh_performance_proto_rawDescGZIP(), []int{1, 0}
}

func (x *PerformanceTestResult_Latency) GetMin() float64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *PerformanceTestResult_Latency) GetAverage() float64 {
	if x != nil {
		return x.Average
	}
	return 0
}

func (x *PerformanceTestResult_Latency) GetP50() float64 {
	if x != nil {
		return x.P50
	}
	return 0
}

func (x *PerformanceTestResult_Latency) GetP90() float64 {
	if x != nil {
		return x.P90
	}
	return 0
}

func (x *PerformanceTestResult_Latency) GetP99() float64 {
	if x != nil {
		return x.P99
	}
	return 0
}

func (x *PerformanceTestResult_Latency) GetMax() float64 {
	if x != nil {
		return x.Max
	}
	return 0
}

// CPU
type PerformanceTestResult_CPU struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cpu in mCores
	CpuMcores         int32   `protobuf:"varint,1,opt,name=cpu_mcores,json=cpuMcores,proto3" json:"cpu_mcores,omitempty"`
	User              float64 `protobuf:"fixed64,2,opt,name=user,proto3" json:"user,omitempty"`
	Nice              float64 `protobuf:"fixed64,3,opt,name=nice,proto3" json:"nice,omitempty"`
	System            float64 `protobuf:"fixed64,4,opt,name=system,proto3" json:"system,omitempty"`
	Idle              float64 `protobuf:"fixed64,5,opt,name=idle,proto3" json:"idle,omitempty"`
	Iowait            float64 `protobuf:"fixed64,6,opt,name=iowait,proto3" json:"iowait,omitempty"`
	HardwareInterrupt float64 `protobuf:"fixed64,7,opt,name=hardware_interrupt,json=hardwareInterrupt,proto3" json:"hardware_interrupt,omitempty"`
	SoftwareInterrupt float64 `protobuf:"fixed64,8,opt,name=software_interrupt,json=softwareInterrupt,proto3" json:"software_interrupt,omitempty"`
	Steal             float64 `protobuf:"fixed64,9,opt,name=steal,proto3" json:"steal,omitempty"`
}

func (x *PerformanceTestResult_CPU) Reset() {
	*x = PerformanceTestResult_CPU{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_service_mesh_performance_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformanceTestResult_CPU) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceTestResult_CPU) ProtoMessage() {}

func (x *PerformanceTestResult_CPU) ProtoReflect() protoreflect.Message {
	mi := &file_protos_service_mesh_performance_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceTestResult_CPU.ProtoReflect.Descriptor instead.
func (*PerformanceTestResult_CPU) Descriptor() ([]byte, []int) {
	return file_protos_service_mesh_performance_proto_rawDescGZIP(), []int{1, 2}
}

func (x *PerformanceTestResult_CPU) GetCpuMcores() int32 {
	if x != nil {
		return x.CpuMcores
	}
	return 0
}

func (x *PerformanceTestResult_CPU) GetUser() float64 {
	if x != nil {
		return x.User
	}
	return 0
}

func (x *PerformanceTestResult_CPU) GetNice() float64 {
	if x != nil {
		return x.Nice
	}
	return 0
}

func (x *PerformanceTestResult_CPU) GetSystem() float64 {
	if x != nil {
		return x.System
	}
	return 0
}

func (x *PerformanceTestResult_CPU) GetIdle() float64 {
	if x != nil {
		return x.Idle
	}
	return 0
}

func (x *PerformanceTestResult_CPU) GetIowait() float64 {
	if x != nil {
		return x.Iowait
	}
	return 0
}

func (x *PerformanceTestResult_CPU) GetHardwareInterrupt() float64 {
	if x != nil {
		return x.HardwareInterrupt
	}
	return 0
}

func (x *PerformanceTestResult_CPU) GetSoftwareInterrupt() float64 {
	if x != nil {
		return x.SoftwareInterrupt
	}
	return 0
}

func (x *PerformanceTestResult_CPU) GetSteal() float64 {
	if x != nil {
		return x.Steal
	}
	return 0
}

// Memory
type PerformanceTestResult_Memory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// memory in MB
	MemTotalMb float64 `protobuf:"fixed64,1,opt,name=mem_total_mb,json=memTotalMb,proto3" json:"mem_total_mb,omitempty"`
	MemFreeMb  float64 `protobuf:"fixed64,2,opt,name=mem_free_mb,json=memFreeMb,proto3" json:"mem_free_mb,omitempty"`
	MemUsedMb  float64 `protobuf:"fixed64,3,opt,name=mem_used_mb,json=memUsedMb,proto3" json:"mem_used_mb,omitempty"`
}

func (x *PerformanceTestResult_Memory) Reset() {
	*x = PerformanceTestResult_Memory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_service_mesh_performance_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformanceTestResult_Memory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceTestResult_Memory) ProtoMessage() {}

func (x *PerformanceTestResult_Memory) ProtoReflect() protoreflect.Message {
	mi := &file_protos_service_mesh_performance_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceTestResult_Memory.ProtoReflect.Descriptor instead.
func (*PerformanceTestResult_Memory) Descriptor() ([]byte, []int) {
	return file_protos_service_mesh_performance_proto_rawDescGZIP(), []int{1, 3}
}

func (x *PerformanceTestResult_Memory) GetMemTotalMb() float64 {
	if x != nil {
		return x.MemTotalMb
	}
	return 0
}

func (x *PerformanceTestResult_Memory) GetMemFreeMb() float64 {
	if x != nil {
		return x.MemFreeMb
	}
	return 0
}

func (x *PerformanceTestResult_Memory) GetMemUsedMb() float64 {
	if x != nil {
		return x.MemUsedMb
	}
	return 0
}

// Swap
type PerformanceTestResult_Swap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// swap in MB
	SwapTotalMb float64 `protobuf:"fixed64,1,opt,name=swap_total_mb,json=swapTotalMb,proto3" json:"swap_total_mb,omitempty"`
	SwapFreeMb  float64 `protobuf:"fixed64,2,opt,name=swap_free_mb,json=swapFreeMb,proto3" json:"swap_free_mb,omitempty"`
	SwapUsedMb  float64 `protobuf:"fixed64,3,opt,name=swap_used_mb,json=swapUsedMb,proto3" json:"swap_used_mb,omitempty"`
}

func (x *PerformanceTestResult_Swap) Reset() {
	*x = PerformanceTestResult_Swap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_service_mesh_performance_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformanceTestResult_Swap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceTestResult_Swap) ProtoMessage() {}

func (x *PerformanceTestResult_Swap) ProtoReflect() protoreflect.Message {
	mi := &file_protos_service_mesh_performance_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceTestResult_Swap.ProtoReflect.Descriptor instead.
func (*PerformanceTestResult_Swap) Descriptor() ([]byte, []int) {
	return file_protos_service_mesh_performance_proto_rawDescGZIP(), []int{1, 4}
}

func (x *PerformanceTestResult_Swap) GetSwapTotalMb() float64 {
	if x != nil {
		return x.SwapTotalMb
	}
	return 0
}

func (x *PerformanceTestResult_Swap) GetSwapFreeMb() float64 {
	if x != nil {
		return x.SwapFreeMb
	}
	return 0
}

func (x *PerformanceTestResult_Swap) GetSwapUsedMb() float64 {
	if x != nil {
		return x.SwapUsedMb
	}
	return 0
}

type ServiceMeshConfig_IngressGateway struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// cpu in mCores
	CpuMcores int32 `protobuf:"varint,2,opt,name=cpu_mcores,json=cpuMcores,proto3" json:"cpu_mcores,omitempty"`
	// memory in MB
	MemMb int32 `protobuf:"varint,3,opt,name=mem_mb,json=memMb,proto3" json:"mem_mb,omitempty"`
	// traffic sent thru ingress gateway
	Rps int32 `protobuf:"varint,4,opt,name=rps,proto3" json:"rps,omitempty"`
	// Total bytes sent thru ingress
	Bps int32 `protobuf:"varint,5,opt,name=bps,proto3" json:"bps,omitempty"`
}

func (x *ServiceMeshConfig_IngressGateway) Reset() {
	*x = ServiceMeshConfig_IngressGateway{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_service_mesh_performance_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceMeshConfig_IngressGateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceMeshConfig_IngressGateway) ProtoMessage() {}

func (x *ServiceMeshConfig_IngressGateway) ProtoReflect() protoreflect.Message {
	mi := &file_protos_service_mesh_performance_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceMeshConfig_IngressGateway.ProtoReflect.Descriptor instead.
func (*ServiceMeshConfig_IngressGateway) Descriptor() ([]byte, []int) {
	return file_protos_service_mesh_performance_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ServiceMeshConfig_IngressGateway) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ServiceMeshConfig_IngressGateway) GetCpuMcores() int32 {
	if x != nil {
		return x.CpuMcores
	}
	return 0
}

func (x *ServiceMeshConfig_IngressGateway) GetMemMb() int32 {
	if x != nil {
		return x.MemMb
	}
	return 0
}

func (x *ServiceMeshConfig_IngressGateway) GetRps() int32 {
	if x != nil {
		return x.Rps
	}
	return 0
}

func (x *ServiceMeshConfig_IngressGateway) GetBps() int32 {
	if x != nil {
		return x.Bps
	}
	return 0
}

type ServiceMeshConfig_EgressGateway struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// cpu in mCores
	CpuMcores int32 `protobuf:"varint,2,opt,name=cpu_mcores,json=cpuMcores,proto3" json:"cpu_mcores,omitempty"`
	// memory in MB
	MemMb int32 `protobuf:"varint,3,opt,name=mem_mb,json=memMb,proto3" json:"mem_mb,omitempty"`
	// traffic sent thru egress gateway
	Rps int32 `protobuf:"varint,4,opt,name=rps,proto3" json:"rps,omitempty"`
	// Total bytes sent thru egress
	Bps int32 `protobuf:"varint,5,opt,name=bps,proto3" json:"bps,omitempty"`
}

func (x *ServiceMeshConfig_EgressGateway) Reset() {
	*x = ServiceMeshConfig_EgressGateway{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_service_mesh_performance_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceMeshConfig_EgressGateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceMeshConfig_EgressGateway) ProtoMessage() {}

func (x *ServiceMeshConfig_EgressGateway) ProtoReflect() protoreflect.Message {
	mi := &file_protos_service_mesh_performance_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceMeshConfig_EgressGateway.ProtoReflect.Descriptor instead.
func (*ServiceMeshConfig_EgressGateway) Descriptor() ([]byte, []int) {
	return file_protos_service_mesh_performance_proto_rawDescGZIP(), []int{2, 1}
}

func (x *ServiceMeshConfig_EgressGateway) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ServiceMeshConfig_EgressGateway) GetCpuMcores() int32 {
	if x != nil {
		return x.CpuMcores
	}
	return 0
}

func (x *ServiceMeshConfig_EgressGateway) GetMemMb() int32 {
	if x != nil {
		return x.MemMb
	}
	return 0
}

func (x *ServiceMeshConfig_EgressGateway) GetRps() int32 {
	if x != nil {
		return x.Rps
	}
	return 0
}

func (x *ServiceMeshConfig_EgressGateway) GetBps() int32 {
	if x != nil {
		return x.Bps
	}
	return 0
}

type ServiceMeshConfig_Sidecar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// cpu used by all sidecars except ingress / egress
	CpuMcores int32 `protobuf:"varint,2,opt,name=cpu_mcores,json=cpuMcores,proto3" json:"cpu_mcores,omitempty"`
	MemMb     int32 `protobuf:"varint,3,opt,name=mem_mb,json=memMb,proto3" json:"mem_mb,omitempty"`
	// Total rps traversing all sidecars
	Rps int32 `protobuf:"varint,4,opt,name=rps,proto3" json:"rps,omitempty"`
	// Total bytes sent thru sidecars
	Bps int32 `protobuf:"varint,5,opt,name=bps,proto3" json:"bps,omitempty"`
}

func (x *ServiceMeshConfig_Sidecar) Reset() {
	*x = ServiceMeshConfig_Sidecar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_service_mesh_performance_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceMeshConfig_Sidecar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceMeshConfig_Sidecar) ProtoMessage() {}

func (x *ServiceMeshConfig_Sidecar) ProtoReflect() protoreflect.Message {
	mi := &file_protos_service_mesh_performance_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceMeshConfig_Sidecar.ProtoReflect.Descriptor instead.
func (*ServiceMeshConfig_Sidecar) Descriptor() ([]byte, []int) {
	return file_protos_service_mesh_performance_proto_rawDescGZIP(), []int{2, 2}
}

func (x *ServiceMeshConfig_Sidecar) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ServiceMeshConfig_Sidecar) GetCpuMcores() int32 {
	if x != nil {
		return x.CpuMcores
	}
	return 0
}

func (x *ServiceMeshConfig_Sidecar) GetMemMb() int32 {
	if x != nil {
		return x.MemMb
	}
	return 0
}

func (x *ServiceMeshConfig_Sidecar) GetRps() int32 {
	if x != nil {
		return x.Rps
	}
	return 0
}

func (x *ServiceMeshConfig_Sidecar) GetBps() int32 {
	if x != nil {
		return x.Bps
	}
	return 0
}

type ServiceMeshConfig_MeshTelemetry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// cpu used by all mesh_telemetry pods
	CpuMcores int32 `protobuf:"varint,2,opt,name=cpu_mcores,json=cpuMcores,proto3" json:"cpu_mcores,omitempty"`
	MemMb     int32 `protobuf:"varint,3,opt,name=mem_mb,json=memMb,proto3" json:"mem_mb,omitempty"`
	// Total rps traversing all proxies (sidecars+ingress+egress)
	Rps int32 `protobuf:"varint,4,opt,name=rps,proto3" json:"rps,omitempty"`
}

func (x *ServiceMeshConfig_MeshTelemetry) Reset() {
	*x = ServiceMeshConfig_MeshTelemetry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_service_mesh_performance_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceMeshConfig_MeshTelemetry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceMeshConfig_MeshTelemetry) ProtoMessage() {}

func (x *ServiceMeshConfig_MeshTelemetry) ProtoReflect() protoreflect.Message {
	mi := &file_protos_service_mesh_performance_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceMeshConfig_MeshTelemetry.ProtoReflect.Descriptor instead.
func (*ServiceMeshConfig_MeshTelemetry) Descriptor() ([]byte, []int) {
	return file_protos_service_mesh_performance_proto_rawDescGZIP(), []int{2, 3}
}

func (x *ServiceMeshConfig_MeshTelemetry) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ServiceMeshConfig_MeshTelemetry) GetCpuMcores() int32 {
	if x != nil {
		return x.CpuMcores
	}
	return 0
}

func (x *ServiceMeshConfig_MeshTelemetry) GetMemMb() int32 {
	if x != nil {
		return x.MemMb
	}
	return 0
}

func (x *ServiceMeshConfig_MeshTelemetry) GetRps() int32 {
	if x != nil {
		return x.Rps
	}
	return 0
}

type ServiceMeshConfig_MeshPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// cpu used by all mesh_policy pods
	CpuMcores int32 `protobuf:"varint,2,opt,name=cpu_mcores,json=cpuMcores,proto3" json:"cpu_mcores,omitempty"`
	MemMb     int32 `protobuf:"varint,3,opt,name=mem_mb,json=memMb,proto3" json:"mem_mb,omitempty"`
	// Total rps traversing all proxies (sidecars+ingress+egress)
	Rps          int32 `protobuf:"varint,4,opt,name=rps,proto3" json:"rps,omitempty"`
	CacheHitRate int32 `protobuf:"varint,5,opt,name=cache_hit_rate,json=cacheHitRate,proto3" json:"cache_hit_rate,omitempty"`
}

func (x *ServiceMeshConfig_MeshPolicy) Reset() {
	*x = ServiceMeshConfig_MeshPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_service_mesh_performance_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceMeshConfig_MeshPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceMeshConfig_MeshPolicy) ProtoMessage() {}

func (x *ServiceMeshConfig_MeshPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_protos_service_mesh_performance_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceMeshConfig_MeshPolicy.ProtoReflect.Descriptor instead.
func (*ServiceMeshConfig_MeshPolicy) Descriptor() ([]byte, []int) {
	return file_protos_service_mesh_performance_proto_rawDescGZIP(), []int{2, 4}
}

func (x *ServiceMeshConfig_MeshPolicy) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ServiceMeshConfig_MeshPolicy) GetCpuMcores() int32 {
	if x != nil {
		return x.CpuMcores
	}
	return 0
}

func (x *ServiceMeshConfig_MeshPolicy) GetMemMb() int32 {
	if x != nil {
		return x.MemMb
	}
	return 0
}

func (x *ServiceMeshConfig_MeshPolicy) GetRps() int32 {
	if x != nil {
		return x.Rps
	}
	return 0
}

func (x *ServiceMeshConfig_MeshPolicy) GetCacheHitRate() int32 {
	if x != nil {
		return x.CacheHitRate
	}
	return 0
}

type ServiceMeshConfig_MeshControlPlane struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// cpu used by mesh_pilot pods
	CpuMcores int32 `protobuf:"varint,2,opt,name=cpu_mcores,json=cpuMcores,proto3" json:"cpu_mcores,omitempty"`
	MemMb     int32 `protobuf:"varint,3,opt,name=mem_mb,json=memMb,proto3" json:"mem_mb,omitempty"`
	Endpoints int32 `protobuf:"varint,4,opt,name=endpoints,proto3" json:"endpoints,omitempty"`
	// services + service entries
	Services         int32 `protobuf:"varint,5,opt,name=services,proto3" json:"services,omitempty"`
	Sidecars         int32 `protobuf:"varint,6,opt,name=sidecars,proto3" json:"sidecars,omitempty"`
	VirtualServices  int32 `protobuf:"varint,7,opt,name=virtual_services,json=virtualServices,proto3" json:"virtual_services,omitempty"`
	DestinationRules int32 `protobuf:"varint,8,opt,name=destination_rules,json=destinationRules,proto3" json:"destination_rules,omitempty"`
	// how long does it take a listener change to propagate to 90% proxies
	LdsLatencyMs int32 `protobuf:"varint,9,opt,name=lds_latency_ms,json=ldsLatencyMs,proto3" json:"lds_latency_ms,omitempty"`
	// how long does it take for cluster change to propagate to 90% proxies
	CdsLatencyMs int32 `protobuf:"varint,10,opt,name=cds_latency_ms,json=cdsLatencyMs,proto3" json:"cds_latency_ms,omitempty"`
}

func (x *ServiceMeshConfig_MeshControlPlane) Reset() {
	*x = ServiceMeshConfig_MeshControlPlane{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_service_mesh_performance_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceMeshConfig_MeshControlPlane) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceMeshConfig_MeshControlPlane) ProtoMessage() {}

func (x *ServiceMeshConfig_MeshControlPlane) ProtoReflect() protoreflect.Message {
	mi := &file_protos_service_mesh_performance_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceMeshConfig_MeshControlPlane.ProtoReflect.Descriptor instead.
func (*ServiceMeshConfig_MeshControlPlane) Descriptor() ([]byte, []int) {
	return file_protos_service_mesh_performance_proto_rawDescGZIP(), []int{2, 5}
}

func (x *ServiceMeshConfig_MeshControlPlane) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ServiceMeshConfig_MeshControlPlane) GetCpuMcores() int32 {
	if x != nil {
		return x.CpuMcores
	}
	return 0
}

func (x *ServiceMeshConfig_MeshControlPlane) GetMemMb() int32 {
	if x != nil {
		return x.MemMb
	}
	return 0
}

func (x *ServiceMeshConfig_MeshControlPlane) GetEndpoints() int32 {
	if x != nil {
		return x.Endpoints
	}
	return 0
}

func (x *ServiceMeshConfig_MeshControlPlane) GetServices() int32 {
	if x != nil {
		return x.Services
	}
	return 0
}

func (x *ServiceMeshConfig_MeshControlPlane) GetSidecars() int32 {
	if x != nil {
		return x.Sidecars
	}
	return 0
}

func (x *ServiceMeshConfig_MeshControlPlane) GetVirtualServices() int32 {
	if x != nil {
		return x.VirtualServices
	}
	return 0
}

func (x *ServiceMeshConfig_MeshControlPlane) GetDestinationRules() int32 {
	if x != nil {
		return x.DestinationRules
	}
	return 0
}

func (x *ServiceMeshConfig_MeshControlPlane) GetLdsLatencyMs() int32 {
	if x != nil {
		return x.LdsLatencyMs
	}
	return 0
}

func (x *ServiceMeshConfig_MeshControlPlane) GetCdsLatencyMs() int32 {
	if x != nil {
		return x.CdsLatencyMs
	}
	return 0
}

type EnvironmentConfig_Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Cores int32  `protobuf:"varint,2,opt,name=cores,proto3" json:"cores,omitempty"`
	MemMb int64  `protobuf:"varint,3,opt,name=mem_mb,json=memMb,proto3" json:"mem_mb,omitempty"`
}

func (x *EnvironmentConfig_Node) Reset() {
	*x = EnvironmentConfig_Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_service_mesh_performance_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvironmentConfig_Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentConfig_Node) ProtoMessage() {}

func (x *EnvironmentConfig_Node) ProtoReflect() protoreflect.Message {
	mi := &file_protos_service_mesh_performance_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentConfig_Node.ProtoReflect.Descriptor instead.
func (*EnvironmentConfig_Node) Descriptor() ([]byte, []int) {
	return file_protos_service_mesh_performance_proto_rawDescGZIP(), []int{3, 0}
}

func (x *EnvironmentConfig_Node) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EnvironmentConfig_Node) GetCores() int32 {
	if x != nil {
		return x.Cores
	}
	return 0
}

func (x *EnvironmentConfig_Node) GetMemMb() int64 {
	if x != nil {
		return x.MemMb
	}
	return 0
}

type EnvironmentConfig_IndividualWorkload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Count     int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	CpuMcores int32  `protobuf:"varint,3,opt,name=cpu_mcores,json=cpuMcores,proto3" json:"cpu_mcores,omitempty"`
	MemMb     int32  `protobuf:"varint,4,opt,name=mem_mb,json=memMb,proto3" json:"mem_mb,omitempty"`
}

func (x *EnvironmentConfig_IndividualWorkload) Reset() {
	*x = EnvironmentConfig_IndividualWorkload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_service_mesh_performance_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvironmentConfig_IndividualWorkload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentConfig_IndividualWorkload) ProtoMessage() {}

func (x *EnvironmentConfig_IndividualWorkload) ProtoReflect() protoreflect.Message {
	mi := &file_protos_service_mesh_performance_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentConfig_IndividualWorkload.ProtoReflect.Descriptor instead.
func (*EnvironmentConfig_IndividualWorkload) Descriptor() ([]byte, []int) {
	return file_protos_service_mesh_performance_proto_rawDescGZIP(), []int{3, 1}
}

func (x *EnvironmentConfig_IndividualWorkload) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnvironmentConfig_IndividualWorkload) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *EnvironmentConfig_IndividualWorkload) GetCpuMcores() int32 {
	if x != nil {
		return x.CpuMcores
	}
	return 0
}

func (x *EnvironmentConfig_IndividualWorkload) GetMemMb() int32 {
	if x != nil {
		return x.MemMb
	}
	return 0
}

var File_protos_service_mesh_performance_proto protoreflect.FileDescriptor

var file_protos_service_mesh_performance_proto_rawDesc = []byte{
	0x0a, 0x25, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x73, 0x6d, 0x70, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xa6, 0x08, 0x0a, 0x15, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6d, 0x70,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x6d, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x73, 0x6d, 0x70, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x3b,
	0x0a, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x73, 0x6d, 0x70, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xf3, 0x05, 0x0a, 0x06, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x25,
	0x0a, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x73, 0x6d, 0x70, 0x2e, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x72, 0x70,
	0x73, 0x12, 0x48, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x6d, 0x70, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x48, 0x0a, 0x07, 0x63,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73,
	0x6d, 0x70, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x72, 0x6c,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x73, 0x6c, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x73, 0x6c, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x6a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x14, 0x0a,
	0x10, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f,
	0x48, 0x54, 0x54, 0x50, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x5f, 0x54, 0x43, 0x50, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x44, 0x50, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x47, 0x52, 0x50, 0x43, 0x10, 0x04, 0x1a, 0x39, 0x0a,
	0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf4, 0x08, 0x0a, 0x15, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6d, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6d, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x6d, 0x70, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6d,
	0x70, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x0b, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x4d, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x71, 0x70, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x51, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x55, 0x72, 0x69, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d,
	0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x65,
	0x6e, 0x76, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x76,
	0x49, 0x64, 0x1a, 0x7d, 0x0a, 0x07, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x35, 0x30,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x70, 0x35, 0x30, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x39, 0x30, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x70, 0x39, 0x30, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x39, 0x39, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x70, 0x39, 0x39, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x61,
	0x78, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x84, 0x02, 0x0a,
	0x03, 0x43, 0x50, 0x55, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x70, 0x75, 0x5f, 0x6d, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x70, 0x75, 0x4d, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x64, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x69, 0x64, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6f, 0x77, 0x61, 0x69,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x69, 0x6f, 0x77, 0x61, 0x69, 0x74, 0x12,
	0x2d, 0x0a, 0x12, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x72, 0x75, 0x70, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x68, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x12, 0x2d,
	0x0a, 0x12, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x72, 0x75, 0x70, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x72, 0x75, 0x70, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x74,
	0x65, 0x61, 0x6c, 0x1a, 0x6a, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a,
	0x0c, 0x6d, 0x65, 0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x62, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x62, 0x12,
	0x1e, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x6d, 0x62, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x46, 0x72, 0x65, 0x65, 0x4d, 0x62, 0x12,
	0x1e, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6d, 0x62, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x55, 0x73, 0x65, 0x64, 0x4d, 0x62, 0x1a,
	0x6e, 0x0a, 0x04, 0x53, 0x77, 0x61, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x77, 0x61, 0x70, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x73, 0x77, 0x61, 0x70, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x62, 0x12, 0x20, 0x0a, 0x0c, 0x73,
	0x77, 0x61, 0x70, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x6d, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x73, 0x77, 0x61, 0x70, 0x46, 0x72, 0x65, 0x65, 0x4d, 0x62, 0x12, 0x20, 0x0a,
	0x0c, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6d, 0x62, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x77, 0x61, 0x70, 0x55, 0x73, 0x65, 0x64, 0x4d, 0x62, 0x22,
	0xd6, 0x0f, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x68, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6d, 0x70, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6d, 0x70, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6d, 0x70, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x12, 0x4e, 0x0a, 0x0f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x6d,
	0x70, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x52, 0x0e, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x12, 0x38, 0x0a, 0x07, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6d, 0x70, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x69, 0x64, 0x65,
	0x63, 0x61, 0x72, 0x52, 0x07, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x12, 0x4b, 0x0a, 0x0e,
	0x6d, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6d, 0x70, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x65, 0x73,
	0x68, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d, 0x65, 0x73, 0x68,
	0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x42, 0x0a, 0x0b, 0x6d, 0x65, 0x73,
	0x68, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x73, 0x6d, 0x70, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x68,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x55, 0x0a,
	0x12, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6d, 0x70, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x65, 0x52, 0x10, 0x6d, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x6d, 0x65, 0x73, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6d, 0x65, 0x73, 0x68, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x74,
	0x6c, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x6d, 0x74, 0x6c, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2b, 0x0a,
	0x11, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x43,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x73, 0x68, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x65, 0x73, 0x68, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x78,
	0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x70, 0x55, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x6d, 0x70, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x68, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6d, 0x70, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x13, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0x80, 0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x70,
	0x75, 0x5f, 0x6d, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x63, 0x70, 0x75, 0x4d, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x65, 0x6d,
	0x5f, 0x6d, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x65, 0x6d, 0x4d, 0x62,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72,
	0x70, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x62, 0x70, 0x73, 0x1a, 0x7f, 0x0a, 0x0d, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x70, 0x75, 0x5f, 0x6d, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x63, 0x70, 0x75, 0x4d, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x65,
	0x6d, 0x5f, 0x6d, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x65, 0x6d, 0x4d,
	0x62, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x72, 0x70, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x62, 0x70, 0x73, 0x1a, 0x79, 0x0a, 0x07, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x70, 0x75, 0x5f, 0x6d, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x70, 0x75, 0x4d,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x5f, 0x6d, 0x62, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x65, 0x6d, 0x4d, 0x62, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x70, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x62, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x62, 0x70, 0x73,
	0x1a, 0x6d, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x68, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x70, 0x75, 0x5f, 0x6d,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x70, 0x75,
	0x4d, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x5f, 0x6d, 0x62,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x65, 0x6d, 0x4d, 0x62, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x70, 0x73, 0x1a,
	0x90, 0x01, 0x0a, 0x0a, 0x4d, 0x65, 0x73, 0x68, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x70, 0x75, 0x5f, 0x6d, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x70, 0x75, 0x4d, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x5f, 0x6d, 0x62, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x65, 0x6d, 0x4d, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x70,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x70, 0x73, 0x12, 0x24, 0x0a, 0x0e,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x48, 0x69, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x1a, 0xd8, 0x02, 0x0a, 0x10, 0x4d, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x70, 0x75, 0x5f, 0x6d, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x63, 0x70, 0x75, 0x4d, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06,
	0x6d, 0x65, 0x6d, 0x5f, 0x6d, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x65,
	0x6d, 0x4d, 0x62, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x73, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x64, 0x73, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6c, 0x64, 0x73, 0x4c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x64, 0x73, 0x5f, 0x6c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x63, 0x64, 0x73, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x73, 0x1a, 0x39, 0x0a,
	0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfb, 0x04, 0x0a, 0x11, 0x45, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x6d, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6d, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3a, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x73, 0x6d, 0x70, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6d, 0x70, 0x2e,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x5c, 0x0a,
	0x14, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x6d,
	0x70, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x57, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x13, 0x69, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75,
	0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x3f, 0x0a, 0x10, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6d, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x47, 0x0a, 0x04,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x15,
	0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x5f, 0x6d, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6d, 0x65, 0x6d, 0x4d, 0x62, 0x1a, 0x74, 0x0a, 0x12, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64,
	0x75, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x70, 0x75, 0x5f, 0x6d, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x70, 0x75, 0x4d, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x5f, 0x6d, 0x62, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x65, 0x6d, 0x4d, 0x62, 0x1a, 0x39, 0x0a, 0x0b, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x4c, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x6d,
	0x70, 0x42, 0x1b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x68, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x0a, 0x2e, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x3b, 0x73, 0x6d, 0x70, 0xa2, 0x02, 0x03, 0x73,
	0x6d, 0x70, 0xaa, 0x02, 0x03, 0x53, 0x6d, 0x70, 0xca, 0x02, 0x03, 0x53, 0x6d, 0x70, 0xea, 0x02,
	0x03, 0x53, 0x6d, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_service_mesh_performance_proto_rawDescOnce sync.Once
	file_protos_service_mesh_performance_proto_rawDescData = file_protos_service_mesh_performance_proto_rawDesc
)

func file_protos_service_mesh_performance_proto_rawDescGZIP() []byte {
	file_protos_service_mesh_performance_proto_rawDescOnce.Do(func() {
		file_protos_service_mesh_performance_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_service_mesh_performance_proto_rawDescData)
	})
	return file_protos_service_mesh_performance_proto_rawDescData
}

var file_protos_service_mesh_performance_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_protos_service_mesh_performance_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_protos_service_mesh_performance_proto_goTypes = []interface{}{
	(PerformanceTestConfig_Client_Protocol)(0), // 0: smp.PerformanceTestConfig.Client.Protocol
	(*PerformanceTestConfig)(nil),              // 1: smp.PerformanceTestConfig
	(*PerformanceTestResult)(nil),              // 2: smp.PerformanceTestResult
	(*ServiceMeshConfig)(nil),                  // 3: smp.ServiceMeshConfig
	(*EnvironmentConfig)(nil),                  // 4: smp.EnvironmentConfig
	(*PerformanceTestConfig_Client)(nil),       // 5: smp.PerformanceTestConfig.Client
	nil,                                        // 6: smp.PerformanceTestConfig.LabelsEntry
	nil,                                        // 7: smp.PerformanceTestConfig.Client.HeadersEntry
	nil,                                        // 8: smp.PerformanceTestConfig.Client.CookiesEntry
	(*PerformanceTestResult_Latency)(nil),      // 9: smp.PerformanceTestResult.Latency
	nil,                                        // 10: smp.PerformanceTestResult.LabelsEntry
	(*PerformanceTestResult_CPU)(nil),          // 11: smp.PerformanceTestResult.CPU
	(*PerformanceTestResult_Memory)(nil),       // 12: smp.PerformanceTestResult.Memory
	(*PerformanceTestResult_Swap)(nil),         // 13: smp.PerformanceTestResult.Swap
	(*ServiceMeshConfig_IngressGateway)(nil),   // 14: smp.ServiceMeshConfig.IngressGateway
	(*ServiceMeshConfig_EgressGateway)(nil),    // 15: smp.ServiceMeshConfig.EgressGateway
	(*ServiceMeshConfig_Sidecar)(nil),          // 16: smp.ServiceMeshConfig.Sidecar
	(*ServiceMeshConfig_MeshTelemetry)(nil),    // 17: smp.ServiceMeshConfig.MeshTelemetry
	(*ServiceMeshConfig_MeshPolicy)(nil),       // 18: smp.ServiceMeshConfig.MeshPolicy
	(*ServiceMeshConfig_MeshControlPlane)(nil), // 19: smp.ServiceMeshConfig.MeshControlPlane
	nil,                            // 20: smp.ServiceMeshConfig.LabelsEntry
	(*EnvironmentConfig_Node)(nil), // 21: smp.EnvironmentConfig.Node
	(*EnvironmentConfig_IndividualWorkload)(nil), // 22: smp.EnvironmentConfig.IndividualWorkload
	nil,                           // 23: smp.EnvironmentConfig.LabelsEntry
	(*timestamppb.Timestamp)(nil), // 24: google.protobuf.Timestamp
	(*ServiceMesh)(nil),           // 25: smp.ServiceMesh
	(*ApplicationMetadata)(nil),   // 26: smp.ApplicationMetadata
	(*TrafficMetadata)(nil),       // 27: smp.TrafficMetadata
}
var file_protos_service_mesh_performance_proto_depIdxs = []int32{
	6,  // 0: smp.PerformanceTestConfig.labels:type_name -> smp.PerformanceTestConfig.LabelsEntry
	5,  // 1: smp.PerformanceTestConfig.clients:type_name -> smp.PerformanceTestConfig.Client
	10, // 2: smp.PerformanceTestResult.labels:type_name -> smp.PerformanceTestResult.LabelsEntry
	24, // 3: smp.PerformanceTestResult.start_time:type_name -> google.protobuf.Timestamp
	24, // 4: smp.PerformanceTestResult.end_time:type_name -> google.protobuf.Timestamp
	9,  // 5: smp.PerformanceTestResult.latencies_ms:type_name -> smp.PerformanceTestResult.Latency
	20, // 6: smp.ServiceMeshConfig.labels:type_name -> smp.ServiceMeshConfig.LabelsEntry
	14, // 7: smp.ServiceMeshConfig.ingress_gateway:type_name -> smp.ServiceMeshConfig.IngressGateway
	16, // 8: smp.ServiceMeshConfig.sidecar:type_name -> smp.ServiceMeshConfig.Sidecar
	17, // 9: smp.ServiceMeshConfig.mesh_telemetry:type_name -> smp.ServiceMeshConfig.MeshTelemetry
	18, // 10: smp.ServiceMeshConfig.mesh_policy:type_name -> smp.ServiceMeshConfig.MeshPolicy
	19, // 11: smp.ServiceMeshConfig.mesh_control_plane:type_name -> smp.ServiceMeshConfig.MeshControlPlane
	25, // 12: smp.ServiceMeshConfig.mesh_type:type_name -> smp.ServiceMesh
	26, // 13: smp.ServiceMeshConfig.application_metadata:type_name -> smp.ApplicationMetadata
	23, // 14: smp.EnvironmentConfig.labels:type_name -> smp.EnvironmentConfig.LabelsEntry
	21, // 15: smp.EnvironmentConfig.nodes:type_name -> smp.EnvironmentConfig.Node
	22, // 16: smp.EnvironmentConfig.individual_workloads:type_name -> smp.EnvironmentConfig.IndividualWorkload
	27, // 17: smp.EnvironmentConfig.traffic_metadata:type_name -> smp.TrafficMetadata
	0,  // 18: smp.PerformanceTestConfig.Client.protocol:type_name -> smp.PerformanceTestConfig.Client.Protocol
	7,  // 19: smp.PerformanceTestConfig.Client.headers:type_name -> smp.PerformanceTestConfig.Client.HeadersEntry
	8,  // 20: smp.PerformanceTestConfig.Client.cookies:type_name -> smp.PerformanceTestConfig.Client.CookiesEntry
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_protos_service_mesh_performance_proto_init() }
func file_protos_service_mesh_performance_proto_init() {
	if File_protos_service_mesh_performance_proto != nil {
		return
	}
	file_protos_metadata_proto_init()
	file_protos_service_mesh_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_protos_service_mesh_performance_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformanceTestConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_service_mesh_performance_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformanceTestResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_service_mesh_performance_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceMeshConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_service_mesh_performance_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvironmentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_service_mesh_performance_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformanceTestConfig_Client); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_service_mesh_performance_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformanceTestResult_Latency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_service_mesh_performance_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformanceTestResult_CPU); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_service_mesh_performance_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformanceTestResult_Memory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_service_mesh_performance_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformanceTestResult_Swap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_service_mesh_performance_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceMeshConfig_IngressGateway); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_service_mesh_performance_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceMeshConfig_EgressGateway); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_service_mesh_performance_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceMeshConfig_Sidecar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_service_mesh_performance_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceMeshConfig_MeshTelemetry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_service_mesh_performance_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceMeshConfig_MeshPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_service_mesh_performance_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceMeshConfig_MeshControlPlane); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_service_mesh_performance_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvironmentConfig_Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_service_mesh_performance_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvironmentConfig_IndividualWorkload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_service_mesh_performance_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_service_mesh_performance_proto_goTypes,
		DependencyIndexes: file_protos_service_mesh_performance_proto_depIdxs,
		EnumInfos:         file_protos_service_mesh_performance_proto_enumTypes,
		MessageInfos:      file_protos_service_mesh_performance_proto_msgTypes,
	}.Build()
	File_protos_service_mesh_performance_proto = out.File
	file_protos_service_mesh_performance_proto_rawDesc = nil
	file_protos_service_mesh_performance_proto_goTypes = nil
	file_protos_service_mesh_performance_proto_depIdxs = nil
}
