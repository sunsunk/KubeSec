// Code generated by MockGen. DO NOT EDIT.
// Source: subscriber/pkg/events (interfaces: SubscriberEvents)

// Package mock_events is a generated GoMock package.
package mock_events

import (
	reflect "reflect"
	types "subscriber/pkg/types"

	v1alpha1 "github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1"
	gomock "github.com/golang/mock/gomock"
	v1alpha10 "github.com/litmuschaos/chaos-operator/pkg/client/clientset/versioned/typed/litmuschaos/v1alpha1"
)

// MockSubscriberEvents is a mock of SubscriberEvents interface.
type MockSubscriberEvents struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriberEventsMockRecorder
}

// MockSubscriberEventsMockRecorder is the mock recorder for MockSubscriberEvents.
type MockSubscriberEventsMockRecorder struct {
	mock *MockSubscriberEvents
}

// NewMockSubscriberEvents creates a new mock instance.
func NewMockSubscriberEvents(ctrl *gomock.Controller) *MockSubscriberEvents {
	mock := &MockSubscriberEvents{ctrl: ctrl}
	mock.recorder = &MockSubscriberEventsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriberEvents) EXPECT() *MockSubscriberEventsMockRecorder {
	return m.recorder
}

// ChaosEventWatcher mocks base method.
func (m *MockSubscriberEvents) ChaosEventWatcher(arg0 chan struct{}, arg1 chan types.WorkflowEvent, arg2 map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ChaosEventWatcher", arg0, arg1, arg2)
}

// ChaosEventWatcher indicates an expected call of ChaosEventWatcher.
func (mr *MockSubscriberEventsMockRecorder) ChaosEventWatcher(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChaosEventWatcher", reflect.TypeOf((*MockSubscriberEvents)(nil).ChaosEventWatcher), arg0, arg1, arg2)
}

// CheckChaosData mocks base method.
func (m *MockSubscriberEvents) CheckChaosData(arg0 v1alpha1.NodeStatus, arg1 string, arg2 *v1alpha10.LitmuschaosV1alpha1Client) (string, *types.ChaosData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckChaosData", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*types.ChaosData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckChaosData indicates an expected call of CheckChaosData.
func (mr *MockSubscriberEventsMockRecorder) CheckChaosData(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckChaosData", reflect.TypeOf((*MockSubscriberEvents)(nil).CheckChaosData), arg0, arg1, arg2)
}

// GenerateWorkflowPayload mocks base method.
func (m *MockSubscriberEvents) GenerateWorkflowPayload(arg0, arg1, arg2, arg3 string, arg4 types.WorkflowEvent) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateWorkflowPayload", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateWorkflowPayload indicates an expected call of GenerateWorkflowPayload.
func (mr *MockSubscriberEventsMockRecorder) GenerateWorkflowPayload(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateWorkflowPayload", reflect.TypeOf((*MockSubscriberEvents)(nil).GenerateWorkflowPayload), arg0, arg1, arg2, arg3, arg4)
}

// GetWorkflowObj mocks base method.
func (m *MockSubscriberEvents) GetWorkflowObj(arg0 string) (*v1alpha1.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflowObj", arg0)
	ret0, _ := ret[0].(*v1alpha1.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflowObj indicates an expected call of GetWorkflowObj.
func (mr *MockSubscriberEventsMockRecorder) GetWorkflowObj(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflowObj", reflect.TypeOf((*MockSubscriberEvents)(nil).GetWorkflowObj), arg0)
}

// ListWorkflowObject mocks base method.
func (m *MockSubscriberEvents) ListWorkflowObject(arg0 string) (*v1alpha1.WorkflowList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWorkflowObject", arg0)
	ret0, _ := ret[0].(*v1alpha1.WorkflowList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWorkflowObject indicates an expected call of ListWorkflowObject.
func (mr *MockSubscriberEventsMockRecorder) ListWorkflowObject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWorkflowObject", reflect.TypeOf((*MockSubscriberEvents)(nil).ListWorkflowObject), arg0)
}

// SendWorkflowUpdates mocks base method.
func (m *MockSubscriberEvents) SendWorkflowUpdates(arg0 map[string]string, arg1 types.WorkflowEvent) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendWorkflowUpdates", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendWorkflowUpdates indicates an expected call of SendWorkflowUpdates.
func (mr *MockSubscriberEventsMockRecorder) SendWorkflowUpdates(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWorkflowUpdates", reflect.TypeOf((*MockSubscriberEvents)(nil).SendWorkflowUpdates), arg0, arg1)
}

// StopChaosEngineState mocks base method.
func (m *MockSubscriberEvents) StopChaosEngineState(arg0 string, arg1 *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopChaosEngineState", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopChaosEngineState indicates an expected call of StopChaosEngineState.
func (mr *MockSubscriberEventsMockRecorder) StopChaosEngineState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopChaosEngineState", reflect.TypeOf((*MockSubscriberEvents)(nil).StopChaosEngineState), arg0, arg1)
}

// StopWorkflow mocks base method.
func (m *MockSubscriberEvents) StopWorkflow(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopWorkflow", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopWorkflow indicates an expected call of StopWorkflow.
func (mr *MockSubscriberEventsMockRecorder) StopWorkflow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopWorkflow", reflect.TypeOf((*MockSubscriberEvents)(nil).StopWorkflow), arg0, arg1)
}

// WorkflowEventHandler mocks base method.
func (m *MockSubscriberEvents) WorkflowEventHandler(arg0 *v1alpha1.Workflow, arg1 string, arg2 int64) (types.WorkflowEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WorkflowEventHandler", arg0, arg1, arg2)
	ret0, _ := ret[0].(types.WorkflowEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WorkflowEventHandler indicates an expected call of WorkflowEventHandler.
func (mr *MockSubscriberEventsMockRecorder) WorkflowEventHandler(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowEventHandler", reflect.TypeOf((*MockSubscriberEvents)(nil).WorkflowEventHandler), arg0, arg1, arg2)
}

// WorkflowEventWatcher mocks base method.
func (m *MockSubscriberEvents) WorkflowEventWatcher(arg0 chan struct{}, arg1 chan types.WorkflowEvent, arg2 map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WorkflowEventWatcher", arg0, arg1, arg2)
}

// WorkflowEventWatcher indicates an expected call of WorkflowEventWatcher.
func (mr *MockSubscriberEventsMockRecorder) WorkflowEventWatcher(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowEventWatcher", reflect.TypeOf((*MockSubscriberEvents)(nil).WorkflowEventWatcher), arg0, arg1, arg2)
}

// WorkflowUpdates mocks base method.
func (m *MockSubscriberEvents) WorkflowUpdates(arg0 map[string]string, arg1 chan types.WorkflowEvent) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WorkflowUpdates", arg0, arg1)
}

// WorkflowUpdates indicates an expected call of WorkflowUpdates.
func (mr *MockSubscriberEventsMockRecorder) WorkflowUpdates(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WorkflowUpdates", reflect.TypeOf((*MockSubscriberEvents)(nil).WorkflowUpdates), arg0, arg1)
}
