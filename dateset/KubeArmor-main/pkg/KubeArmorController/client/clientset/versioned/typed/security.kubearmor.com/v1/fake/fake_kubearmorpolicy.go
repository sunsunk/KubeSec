// SPDX-License-Identifier: Apache-2.0
// Copyright 2022 Authors of KubeArmor

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	securitykubearmorcomv1 "github.com/kubearmor/KubeArmor/pkg/KubeArmorController/api/security.kubearmor.com/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeKubeArmorPolicies implements KubeArmorPolicyInterface
type FakeKubeArmorPolicies struct {
	Fake *FakeSecurityV1
	ns   string
}

var kubearmorpoliciesResource = schema.GroupVersionResource{Group: "security.kubearmor.com", Version: "v1", Resource: "kubearmorpolicies"}

var kubearmorpoliciesKind = schema.GroupVersionKind{Group: "security.kubearmor.com", Version: "v1", Kind: "KubeArmorPolicy"}

// Get takes name of the kubeArmorPolicy, and returns the corresponding kubeArmorPolicy object, and an error if there is any.
func (c *FakeKubeArmorPolicies) Get(ctx context.Context, name string, options v1.GetOptions) (result *securitykubearmorcomv1.KubeArmorPolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(kubearmorpoliciesResource, c.ns, name), &securitykubearmorcomv1.KubeArmorPolicy{})

	if obj == nil {
		return nil, err
	}
	return obj.(*securitykubearmorcomv1.KubeArmorPolicy), err
}

// List takes label and field selectors, and returns the list of KubeArmorPolicies that match those selectors.
func (c *FakeKubeArmorPolicies) List(ctx context.Context, opts v1.ListOptions) (result *securitykubearmorcomv1.KubeArmorPolicyList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(kubearmorpoliciesResource, kubearmorpoliciesKind, c.ns, opts), &securitykubearmorcomv1.KubeArmorPolicyList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &securitykubearmorcomv1.KubeArmorPolicyList{ListMeta: obj.(*securitykubearmorcomv1.KubeArmorPolicyList).ListMeta}
	for _, item := range obj.(*securitykubearmorcomv1.KubeArmorPolicyList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested kubeArmorPolicies.
func (c *FakeKubeArmorPolicies) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(kubearmorpoliciesResource, c.ns, opts))

}

// Create takes the representation of a kubeArmorPolicy and creates it.  Returns the server's representation of the kubeArmorPolicy, and an error, if there is any.
func (c *FakeKubeArmorPolicies) Create(ctx context.Context, kubeArmorPolicy *securitykubearmorcomv1.KubeArmorPolicy, opts v1.CreateOptions) (result *securitykubearmorcomv1.KubeArmorPolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(kubearmorpoliciesResource, c.ns, kubeArmorPolicy), &securitykubearmorcomv1.KubeArmorPolicy{})

	if obj == nil {
		return nil, err
	}
	return obj.(*securitykubearmorcomv1.KubeArmorPolicy), err
}

// Update takes the representation of a kubeArmorPolicy and updates it. Returns the server's representation of the kubeArmorPolicy, and an error, if there is any.
func (c *FakeKubeArmorPolicies) Update(ctx context.Context, kubeArmorPolicy *securitykubearmorcomv1.KubeArmorPolicy, opts v1.UpdateOptions) (result *securitykubearmorcomv1.KubeArmorPolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(kubearmorpoliciesResource, c.ns, kubeArmorPolicy), &securitykubearmorcomv1.KubeArmorPolicy{})

	if obj == nil {
		return nil, err
	}
	return obj.(*securitykubearmorcomv1.KubeArmorPolicy), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeKubeArmorPolicies) UpdateStatus(ctx context.Context, kubeArmorPolicy *securitykubearmorcomv1.KubeArmorPolicy, opts v1.UpdateOptions) (*securitykubearmorcomv1.KubeArmorPolicy, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(kubearmorpoliciesResource, "status", c.ns, kubeArmorPolicy), &securitykubearmorcomv1.KubeArmorPolicy{})

	if obj == nil {
		return nil, err
	}
	return obj.(*securitykubearmorcomv1.KubeArmorPolicy), err
}

// Delete takes name of the kubeArmorPolicy and deletes it. Returns an error if one occurs.
func (c *FakeKubeArmorPolicies) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(kubearmorpoliciesResource, c.ns, name), &securitykubearmorcomv1.KubeArmorPolicy{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeKubeArmorPolicies) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(kubearmorpoliciesResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &securitykubearmorcomv1.KubeArmorPolicyList{})
	return err
}

// Patch applies the patch and returns the patched kubeArmorPolicy.
func (c *FakeKubeArmorPolicies) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *securitykubearmorcomv1.KubeArmorPolicy, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(kubearmorpoliciesResource, c.ns, name, pt, data, subresources...), &securitykubearmorcomv1.KubeArmorPolicy{})

	if obj == nil {
		return nil, err
	}
	return obj.(*securitykubearmorcomv1.KubeArmorPolicy), err
}
