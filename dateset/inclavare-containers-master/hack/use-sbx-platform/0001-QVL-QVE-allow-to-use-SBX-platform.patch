From cdda93a85d5cb2595284605a3162503d91fa7ee8 Mon Sep 17 00:00:00 2001
From: Jia Zhang <zhang.jia@linux.alibaba.com>
Date: Sat, 23 Jan 2021 21:59:10 +0800
Subject: [PATCH] QVL/QVE: allow to use SBX platform

Both untrusted QVL and trusted QvE uses the built-in Intel Root CA
certificate for product platforms to authenticate the root ca
certificate in PCK certificate chain of the quote.

This means the user cannot use QVL and QvE to verify the quote with
the PCK certificate provided by Intel provisioning service for SBX
platforms.

The modified QVL/QVE applied to this patch at least allows the user to
verify the quote rooting to Intel Root CA certificate for SBX platforms.

For the details about the usage of this patch, please refer to
https://github.com/alibaba/inclavare-containers/blob/master/hack/use-sbx-platform/README.md

Signed-off-by: Jia Zhang <zhang.jia@linux.alibaba.com>
---
 QuoteVerification/QvE/Include/sgx_qve_def.h | 4 ++++
 QuoteVerification/buildenv.mk               | 4 ++++
 QuoteVerification/dcap_tvl/Makefile         | 5 +++++
 QuoteVerification/dcap_tvl/sgx_dcap_tvl.cpp | 4 ++++
 SampleCode/QuoteGenerationSample/Makefile   | 2 +-
 SampleCode/QuoteVerificationSample/Makefile | 2 +-
 6 files changed, 19 insertions(+), 2 deletions(-)

diff --git a/QuoteVerification/QvE/Include/sgx_qve_def.h b/QuoteVerification/QvE/Include/sgx_qve_def.h
index a77eb8e..8fef95a 100644
--- a/QuoteVerification/QvE/Include/sgx_qve_def.h
+++ b/QuoteVerification/QvE/Include/sgx_qve_def.h
@@ -56,7 +56,11 @@
 #define PLATFORM_ISSUER_ID "platform"
 #define TRUSTED_ROOT_CA_CERT "-----BEGIN CERTIFICATE-----\nMIICjjCCAjSgAwIBAgIUImUM1lqdNInzg7SVUr9QGzknBqwwCgYIKoZIzj0EAwIw\naDEaMBgGA1UEAwwRSW50ZWwgU0dYIFJvb3QgQ0ExGjAYBgNVBAoMEUludGVsIENv\ncnBvcmF0aW9uMRQwEgYDVQQHDAtTYW50YSBDbGFyYTELMAkGA1UECAwCQ0ExCzAJ\nBgNVBAYTAlVTMB4XDTE4MDUyMTEwNDExMVoXDTMzMDUyMTEwNDExMFowaDEaMBgG\nA1UEAwwRSW50ZWwgU0dYIFJvb3QgQ0ExGjAYBgNVBAoMEUludGVsIENvcnBvcmF0\naW9uMRQwEgYDVQQHDAtTYW50YSBDbGFyYTELMAkGA1UECAwCQ0ExCzAJBgNVBAYT\nAlVTMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEC6nEwMDIYZOj/iPWsCzaEKi7\n1OiOSLRFhWGjbnBVJfVnkY4u3IjkDYYL0MxO4mqsyYjlBalTVYxFP2sJBK5zlKOB\nuzCBuDAfBgNVHSMEGDAWgBQiZQzWWp00ifODtJVSv1AbOScGrDBSBgNVHR8ESzBJ\nMEegRaBDhkFodHRwczovL2NlcnRpZmljYXRlcy50cnVzdGVkc2VydmljZXMuaW50\nZWwuY29tL0ludGVsU0dYUm9vdENBLmNybDAdBgNVHQ4EFgQUImUM1lqdNInzg7SV\nUr9QGzknBqwwDgYDVR0PAQH/BAQDAgEGMBIGA1UdEwEB/wQIMAYBAf8CAQEwCgYI\nKoZIzj0EAwIDSAAwRQIgQQs/08rycdPauCFk8UPQXCMAlsloBe7NwaQGTcdpa0EC\nIQCUt8SGvxKmjpcM/z0WP9Dvo8h2k5du1iWDdBkAn+0iiA==\n-----END CERTIFICATE-----"
 
+#ifndef USE_SBX_PLATFORM // For product platfrom
 #define TRUSTED_ROOT_CA_CERT_V3 "-----BEGIN CERTIFICATE-----\nMIICjzCCAjSgAwIBAgIUImUM1lqdNInzg7SVUr9QGzknBqwwCgYIKoZIzj0EAwIw\naDEaMBgGA1UEAwwRSW50ZWwgU0dYIFJvb3QgQ0ExGjAYBgNVBAoMEUludGVsIENv\ncnBvcmF0aW9uMRQwEgYDVQQHDAtTYW50YSBDbGFyYTELMAkGA1UECAwCQ0ExCzAJ\nBgNVBAYTAlVTMB4XDTE4MDUyMTEwNDUxMFoXDTQ5MTIzMTIzNTk1OVowaDEaMBgG\nA1UEAwwRSW50ZWwgU0dYIFJvb3QgQ0ExGjAYBgNVBAoMEUludGVsIENvcnBvcmF0\naW9uMRQwEgYDVQQHDAtTYW50YSBDbGFyYTELMAkGA1UECAwCQ0ExCzAJBgNVBAYT\nAlVTMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEC6nEwMDIYZOj/iPWsCzaEKi7\n1OiOSLRFhWGjbnBVJfVnkY4u3IjkDYYL0MxO4mqsyYjlBalTVYxFP2sJBK5zlKOB\nuzCBuDAfBgNVHSMEGDAWgBQiZQzWWp00ifODtJVSv1AbOScGrDBSBgNVHR8ESzBJ\nMEegRaBDhkFodHRwczovL2NlcnRpZmljYXRlcy50cnVzdGVkc2VydmljZXMuaW50\nZWwuY29tL0ludGVsU0dYUm9vdENBLmRlcjAdBgNVHQ4EFgQUImUM1lqdNInzg7SV\nUr9QGzknBqwwDgYDVR0PAQH/BAQDAgEGMBIGA1UdEwEB/wQIMAYBAf8CAQEwCgYI\nKoZIzj0EAwIDSQAwRgIhAOW/5QkR+S9CiSDcNoowLuPRLsWGf/Yi7GSX94BgwTwg\nAiEA4J0lrHoMs+Xo5o/sX6O9QWxHRAvZUGOdRQ7cvqRXaqI=\n-----END CERTIFICATE-----"
+#else // For pre-product (SBX) platform
+#define TRUSTED_ROOT_CA_CERT_V3 "-----BEGIN CERTIFICATE-----\nMIIClDCCAjmgAwIBAgIVAOnoRFJTNlxLGJoR/EMYLKXcIIBIMAoGCCqGSM49BAMC\nMGgxGjAYBgNVBAMMEUludGVsIFNHWCBSb290IENBMRowGAYDVQQKDBFJbnRlbCBD\nb3Jwb3JhdGlvbjEUMBIGA1UEBwwLU2FudGEgQ2xhcmExCzAJBgNVBAgMAkNBMQsw\nCQYDVQQGEwJVUzAeFw0xOTEwMzEwOTQ5MjFaFw00OTEyMzEyMzU5NTlaMGgxGjAY\nBgNVBAMMEUludGVsIFNHWCBSb290IENBMRowGAYDVQQKDBFJbnRlbCBDb3Jwb3Jh\ndGlvbjEUMBIGA1UEBwwLU2FudGEgQ2xhcmExCzAJBgNVBAgMAkNBMQswCQYDVQQG\nEwJVUzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABE/6D/1WHNrWwPmNMIyBKMW5\nJ6JzMsjo6xP2vkK1cdZGb1PGRP/C/8ECgiDkmklmzwLzLi+000m7LLrtKJA3oC2j\ngb8wgbwwHwYDVR0jBBgwFoAU6ehEUlM2XEsYmhH8QxgspdwggEgwVgYDVR0fBE8w\nTTBLoEmgR4ZFaHR0cHM6Ly9zYngtY2VydGlmaWNhdGVzLnRydXN0ZWRzZXJ2aWNl\ncy5pbnRlbC5jb20vSW50ZWxTR1hSb290Q0EuZGVyMB0GA1UdDgQWBBTp6ERSUzZc\nSxiaEfxDGCyl3CCASDAOBgNVHQ8BAf8EBAMCAQYwEgYDVR0TAQH/BAgwBgEB/wIB\nATAKBggqhkjOPQQDAgNJADBGAiEAzw9zdUiUHPMUd0C4mx41jlFZkrM3y5f1lgnV\nO7FbjOoCIQCoGtUmT4cXt7V+ySHbJ8Hob9AanpvXNH1ER+/gZF+opQ==\n-----END CERTIFICATE-----"
+#endif
 
 #define UNUSED_PARAM(x) (void)(x)
 #define CHECK_MANDATORY_PARAMS(param, param_size) (param == NULL || param_size == 0)
diff --git a/QuoteVerification/buildenv.mk b/QuoteVerification/buildenv.mk
index 2be0f90..8493a98 100644
--- a/QuoteVerification/buildenv.mk
+++ b/QuoteVerification/buildenv.mk
@@ -51,6 +51,7 @@ include $(CUR_DIR)/../QuoteGeneration/buildenv.mk
 
 MODE					?= HW
 DEBUG					?= 0
+USE_SBX_PLATFORM			?=
 DCAP_QG_DIR				:= $(ROOT_DIR)
 DCAP_QV_DIR				:= $(DCAP_QG_DIR)/../QuoteVerification
 QVL_SRC_PATH 			?= $(DCAP_QV_DIR)/QVL/Src
@@ -60,6 +61,9 @@ PREBUILD_OPENSSL_PATH	?= $(DCAP_QV_DIR)/../prebuilt/openssl
 SGX_COMMON_CFLAGS := $(COMMON_FLAGS) -m64 -Wjump-misses-init -Wstrict-prototypes -Wunsuffixed-float-constants
 SGX_COMMON_CXXFLAGS := $(COMMON_FLAGS) -m64 -Wnon-virtual-dtor -std=c++14
 
+ifneq ($(USE_SBX_PLATFORM),)
+	SGX_COMMON_CXXFLAGS += -DUSE_SBX_PLATFORM=1
+endif
 
 QVL_LIB_PATH := $(QVL_SRC_PATH)/AttestationLibrary
 QVL_PARSER_PATH := $(QVL_SRC_PATH)/AttestationParsers
diff --git a/QuoteVerification/dcap_tvl/Makefile b/QuoteVerification/dcap_tvl/Makefile
index 74462e8..dc15a05 100644
--- a/QuoteVerification/dcap_tvl/Makefile
+++ b/QuoteVerification/dcap_tvl/Makefile
@@ -33,6 +33,8 @@
 # include buildenv in linux trunk
 include ../../../../buildenv.mk
 
+USE_SBX_PLATFORM ?=
+
 TVL_CPP_SRCS := $(wildcard *.cpp)
 TVL_OBJS := $(TVL_CPP_SRCS:.cpp=.o)
 
@@ -52,6 +54,9 @@ else
 	BUILD_DIR := $(DCAP_DIR)/QuoteGeneration/build/linux
 endif
 
+ifneq ($(USE_SBX_PLATFORM),)
+	SGX_COMMON_CXXFLAGS += -DUSE_SBX_PLATFORM=1
+endif
 
 ifneq ($(DEBUG), 1)
     COMMON_FLAGS += -ffunction-sections -fdata-sections
diff --git a/QuoteVerification/dcap_tvl/sgx_dcap_tvl.cpp b/QuoteVerification/dcap_tvl/sgx_dcap_tvl.cpp
index 2a598cd..e6f5716 100644
--- a/QuoteVerification/dcap_tvl/sgx_dcap_tvl.cpp
+++ b/QuoteVerification/dcap_tvl/sgx_dcap_tvl.cpp
@@ -56,7 +56,11 @@ const std::string QVE_ATTRIBUTE = "01000000000000000000000000000000";
 const std::string QVE_ATTRIBUTE_MASK = "FBFFFFFFFFFFFFFF0000000000000000";
 
 //MRSIGNER of Intel signed QvE
+#ifndef USE_SBX_PLATFORM
 const std::string QVE_MRSIGNER = "8C4F5775D796503E96137F77C68A829A0056AC8DED70140B081B094490C57BFF";
+#else
+const std::string QVE_MRSIGNER = "C87C2F0142180E15F48270A6B4CCC5B1B4E1569528C1080511591998F0714994";
+#endif
 
 const sgx_prod_id_t QVE_PRODID = 2;
 
diff --git a/SampleCode/QuoteGenerationSample/Makefile b/SampleCode/QuoteGenerationSample/Makefile
index 1026fb5..3fda21a 100644
--- a/SampleCode/QuoteGenerationSample/Makefile
+++ b/SampleCode/QuoteGenerationSample/Makefile
@@ -69,7 +69,7 @@ endif
 
 
 App_Cpp_Flags := $(App_C_Flags) -std=c++11
-App_Link_Flags := $(SGX_COMMON_CFLAGS) -l$(DCAP_Library_Name) -l$(Urts_Library_Name) -l$(Uae_Library_Name) -ldl -lpthread
+App_Link_Flags := $(SGX_COMMON_CFLAGS) -L$(SGX_LIBRARY_PATH) -l$(DCAP_Library_Name) -l$(Urts_Library_Name) -l$(Uae_Library_Name) -ldl -lpthread
 
 
 App_Cpp_Objects := $(App_Cpp_Files:.cpp=.o)
diff --git a/SampleCode/QuoteVerificationSample/Makefile b/SampleCode/QuoteVerificationSample/Makefile
index 752b28a..d54fd92 100644
--- a/SampleCode/QuoteVerificationSample/Makefile
+++ b/SampleCode/QuoteVerificationSample/Makefile
@@ -173,7 +173,7 @@ all: .config_$(Build_Mode)_$(SGX_ARCH)
 	@$(MAKE) target
 
 ifeq ($(Build_Mode), HW_RELEASE)
-target:  $(App_Name) $(Enclave_Name)
+target:  $(App_Name) $(Enclave_Name) $(Signed_Enclave_Name)
 	@echo "The project has been built in release hardware mode."
 	@echo "Please sign the $(Enclave_Name) first with your signing key before you run the $(App_Name) to launch and access the enclave."
 	@echo "To sign the enclave use the command:"
-- 
2.27.0

