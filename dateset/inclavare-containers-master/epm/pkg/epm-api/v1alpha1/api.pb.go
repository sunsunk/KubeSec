// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package v1alpha1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	anypb "google.golang.org/protobuf/types/known/anypb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Cache represents the metadata of a cache managed by enclave pool.
type Cache struct {
	// Type represents the type of enclave pool
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// SubType represents the subtype of enclave pool which represents a more find-grained pool
	SubType string `protobuf:"bytes,2,opt,name=subType,proto3" json:"subType,omitempty"`
	// ID represents the id of the cache and the id is unique in the same type of enclave pool
	ID string `protobuf:"bytes,3,opt,name=ID,proto3" json:"ID,omitempty"`
	// SavePath represents the absolute path to store the cache
	SavePath string `protobuf:"bytes,4,opt,name=savePath,proto3" json:"savePath,omitempty"`
	// Parent represents the parent cache of the current cache, if do not have a parent the value is nil
	Parent *Cache `protobuf:"bytes,5,opt,name=parent,proto3" json:"parent,omitempty"`
	// Size represents the size in bytes of the cache
	Size int64 `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	// Created represents the creation time of the cache which is the number of seconds elapsed since January 1, 1970 UTC
	Created int64 `protobuf:"varint,7,opt,name=created,proto3" json:"created,omitempty"`
	// Options is an optional field which can extend any type of data structure
	Options              *anypb.Any `protobuf:"bytes,8,opt,name=options,proto3" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Cache) Reset()         { *m = Cache{} }
func (m *Cache) String() string { return proto.CompactTextString(m) }
func (*Cache) ProtoMessage()    {}
func (*Cache) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *Cache) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cache.Unmarshal(m, b)
}
func (m *Cache) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cache.Marshal(b, m, deterministic)
}
func (m *Cache) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cache.Merge(m, src)
}
func (m *Cache) XXX_Size() int {
	return xxx_messageInfo_Cache.Size(m)
}
func (m *Cache) XXX_DiscardUnknown() {
	xxx_messageInfo_Cache.DiscardUnknown(m)
}

var xxx_messageInfo_Cache proto.InternalMessageInfo

func (m *Cache) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Cache) GetSubType() string {
	if m != nil {
		return m.SubType
	}
	return ""
}

func (m *Cache) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Cache) GetSavePath() string {
	if m != nil {
		return m.SavePath
	}
	return ""
}

func (m *Cache) GetParent() *Cache {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *Cache) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Cache) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Cache) GetOptions() *anypb.Any {
	if m != nil {
		return m.Options
	}
	return nil
}

// GetCacheRequest
type GetCacheRequest struct {
	// Type represents the type of enclave pool
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// SubType represents the subType of enclave pool
	SubType string `protobuf:"bytes,2,opt,name=subType,proto3" json:"subType,omitempty"`
	// ID represents the id of the cache
	ID                   string   `protobuf:"bytes,3,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCacheRequest) Reset()         { *m = GetCacheRequest{} }
func (m *GetCacheRequest) String() string { return proto.CompactTextString(m) }
func (*GetCacheRequest) ProtoMessage()    {}
func (*GetCacheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *GetCacheRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCacheRequest.Unmarshal(m, b)
}
func (m *GetCacheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCacheRequest.Marshal(b, m, deterministic)
}
func (m *GetCacheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCacheRequest.Merge(m, src)
}
func (m *GetCacheRequest) XXX_Size() int {
	return xxx_messageInfo_GetCacheRequest.Size(m)
}
func (m *GetCacheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCacheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCacheRequest proto.InternalMessageInfo

func (m *GetCacheRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *GetCacheRequest) GetSubType() string {
	if m != nil {
		return m.SubType
	}
	return ""
}

func (m *GetCacheRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type GetCacheResponse struct {
	// Cache represents the response cache metadata
	Cache                *Cache   `protobuf:"bytes,1,opt,name=cache,proto3" json:"cache,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCacheResponse) Reset()         { *m = GetCacheResponse{} }
func (m *GetCacheResponse) String() string { return proto.CompactTextString(m) }
func (*GetCacheResponse) ProtoMessage()    {}
func (*GetCacheResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

func (m *GetCacheResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCacheResponse.Unmarshal(m, b)
}
func (m *GetCacheResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCacheResponse.Marshal(b, m, deterministic)
}
func (m *GetCacheResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCacheResponse.Merge(m, src)
}
func (m *GetCacheResponse) XXX_Size() int {
	return xxx_messageInfo_GetCacheResponse.Size(m)
}
func (m *GetCacheResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCacheResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCacheResponse proto.InternalMessageInfo

func (m *GetCacheResponse) GetCache() *Cache {
	if m != nil {
		return m.Cache
	}
	return nil
}

// PickCacheRequest
type PickCacheRequest struct {
	// Type represents the type of enclave pool
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// SubType represents the subType of enclave pool
	SubType string `protobuf:"bytes,2,opt,name=subType,proto3" json:"subType,omitempty"`
	// Filters represents the filters that used to filter out the suitable result
	Filters              map[string]string `protobuf:"bytes,3,rep,name=filters,proto3" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PickCacheRequest) Reset()         { *m = PickCacheRequest{} }
func (m *PickCacheRequest) String() string { return proto.CompactTextString(m) }
func (*PickCacheRequest) ProtoMessage()    {}
func (*PickCacheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

func (m *PickCacheRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PickCacheRequest.Unmarshal(m, b)
}
func (m *PickCacheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PickCacheRequest.Marshal(b, m, deterministic)
}
func (m *PickCacheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PickCacheRequest.Merge(m, src)
}
func (m *PickCacheRequest) XXX_Size() int {
	return xxx_messageInfo_PickCacheRequest.Size(m)
}
func (m *PickCacheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PickCacheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PickCacheRequest proto.InternalMessageInfo

func (m *PickCacheRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *PickCacheRequest) GetSubType() string {
	if m != nil {
		return m.SubType
	}
	return ""
}

func (m *PickCacheRequest) GetFilters() map[string]string {
	if m != nil {
		return m.Filters
	}
	return nil
}

type PickCacheResponse struct {
	// Caches represents the caches which match the selection criteria
	Caches               []*Cache `protobuf:"bytes,1,rep,name=caches,proto3" json:"caches,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PickCacheResponse) Reset()         { *m = PickCacheResponse{} }
func (m *PickCacheResponse) String() string { return proto.CompactTextString(m) }
func (*PickCacheResponse) ProtoMessage()    {}
func (*PickCacheResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}

func (m *PickCacheResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PickCacheResponse.Unmarshal(m, b)
}
func (m *PickCacheResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PickCacheResponse.Marshal(b, m, deterministic)
}
func (m *PickCacheResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PickCacheResponse.Merge(m, src)
}
func (m *PickCacheResponse) XXX_Size() int {
	return xxx_messageInfo_PickCacheResponse.Size(m)
}
func (m *PickCacheResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PickCacheResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PickCacheResponse proto.InternalMessageInfo

func (m *PickCacheResponse) GetCaches() []*Cache {
	if m != nil {
		return m.Caches
	}
	return nil
}

type SaveCacheRequest struct {
	// Cache represents the cache metadata needs to be saved
	Cache *Cache `protobuf:"bytes,1,opt,name=cache,proto3" json:"cache,omitempty"`
	// SourcePath represents the absolute path of source cache data
	SourcePath           string   `protobuf:"bytes,2,opt,name=sourcePath,proto3" json:"sourcePath,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SaveCacheRequest) Reset()         { *m = SaveCacheRequest{} }
func (m *SaveCacheRequest) String() string { return proto.CompactTextString(m) }
func (*SaveCacheRequest) ProtoMessage()    {}
func (*SaveCacheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}

func (m *SaveCacheRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SaveCacheRequest.Unmarshal(m, b)
}
func (m *SaveCacheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SaveCacheRequest.Marshal(b, m, deterministic)
}
func (m *SaveCacheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveCacheRequest.Merge(m, src)
}
func (m *SaveCacheRequest) XXX_Size() int {
	return xxx_messageInfo_SaveCacheRequest.Size(m)
}
func (m *SaveCacheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveCacheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SaveCacheRequest proto.InternalMessageInfo

func (m *SaveCacheRequest) GetCache() *Cache {
	if m != nil {
		return m.Cache
	}
	return nil
}

func (m *SaveCacheRequest) GetSourcePath() string {
	if m != nil {
		return m.SourcePath
	}
	return ""
}

type SaveCacheResponse struct {
	// Ok represents whether the cache is saved successfully
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SaveCacheResponse) Reset()         { *m = SaveCacheResponse{} }
func (m *SaveCacheResponse) String() string { return proto.CompactTextString(m) }
func (*SaveCacheResponse) ProtoMessage()    {}
func (*SaveCacheResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}

func (m *SaveCacheResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SaveCacheResponse.Unmarshal(m, b)
}
func (m *SaveCacheResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SaveCacheResponse.Marshal(b, m, deterministic)
}
func (m *SaveCacheResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveCacheResponse.Merge(m, src)
}
func (m *SaveCacheResponse) XXX_Size() int {
	return xxx_messageInfo_SaveCacheResponse.Size(m)
}
func (m *SaveCacheResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveCacheResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SaveCacheResponse proto.InternalMessageInfo

func (m *SaveCacheResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type ListCacheRequest struct {
	// Type represents the type of enclave pool
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// SubType represents the subType of enclave pool
	SubType string `protobuf:"bytes,2,opt,name=subType,proto3" json:"subType,omitempty"`
	// LastCacheID represents the id of the last cache metadata in the most recent query list,
	// if the value is "", query the cache metadata from the starting point of DB,
	// otherwise query the cache metadata starting from the next id of `lastCacheID` in alphabetical order
	LastCacheID string `protobuf:"bytes,3,opt,name=lastCacheID,proto3" json:"lastCacheID,omitempty"`
	// Limit represents the maximum number of queried entries
	Limit                int32    `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListCacheRequest) Reset()         { *m = ListCacheRequest{} }
func (m *ListCacheRequest) String() string { return proto.CompactTextString(m) }
func (*ListCacheRequest) ProtoMessage()    {}
func (*ListCacheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}

func (m *ListCacheRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCacheRequest.Unmarshal(m, b)
}
func (m *ListCacheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCacheRequest.Marshal(b, m, deterministic)
}
func (m *ListCacheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCacheRequest.Merge(m, src)
}
func (m *ListCacheRequest) XXX_Size() int {
	return xxx_messageInfo_ListCacheRequest.Size(m)
}
func (m *ListCacheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCacheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCacheRequest proto.InternalMessageInfo

func (m *ListCacheRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ListCacheRequest) GetSubType() string {
	if m != nil {
		return m.SubType
	}
	return ""
}

func (m *ListCacheRequest) GetLastCacheID() string {
	if m != nil {
		return m.LastCacheID
	}
	return ""
}

func (m *ListCacheRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListCacheResponse struct {
	// Caches represents the list of response caches
	Caches               []*Cache `protobuf:"bytes,1,rep,name=caches,proto3" json:"caches,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListCacheResponse) Reset()         { *m = ListCacheResponse{} }
func (m *ListCacheResponse) String() string { return proto.CompactTextString(m) }
func (*ListCacheResponse) ProtoMessage()    {}
func (*ListCacheResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}

func (m *ListCacheResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCacheResponse.Unmarshal(m, b)
}
func (m *ListCacheResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCacheResponse.Marshal(b, m, deterministic)
}
func (m *ListCacheResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCacheResponse.Merge(m, src)
}
func (m *ListCacheResponse) XXX_Size() int {
	return xxx_messageInfo_ListCacheResponse.Size(m)
}
func (m *ListCacheResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCacheResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCacheResponse proto.InternalMessageInfo

func (m *ListCacheResponse) GetCaches() []*Cache {
	if m != nil {
		return m.Caches
	}
	return nil
}

type DeleteCacheRequest struct {
	// Type represents the type of enclave pool
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// SubType represents the subType of enclave pool
	SubType string `protobuf:"bytes,2,opt,name=subType,proto3" json:"subType,omitempty"`
	// ID represents the id of the cache
	ID                   string   `protobuf:"bytes,3,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteCacheRequest) Reset()         { *m = DeleteCacheRequest{} }
func (m *DeleteCacheRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteCacheRequest) ProtoMessage()    {}
func (*DeleteCacheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}

func (m *DeleteCacheRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteCacheRequest.Unmarshal(m, b)
}
func (m *DeleteCacheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteCacheRequest.Marshal(b, m, deterministic)
}
func (m *DeleteCacheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCacheRequest.Merge(m, src)
}
func (m *DeleteCacheRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteCacheRequest.Size(m)
}
func (m *DeleteCacheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCacheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCacheRequest proto.InternalMessageInfo

func (m *DeleteCacheRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *DeleteCacheRequest) GetSubType() string {
	if m != nil {
		return m.SubType
	}
	return ""
}

func (m *DeleteCacheRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type DeleteCacheResponse struct {
	// Ok represents whether the cache is deleted successfully
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteCacheResponse) Reset()         { *m = DeleteCacheResponse{} }
func (m *DeleteCacheResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteCacheResponse) ProtoMessage()    {}
func (*DeleteCacheResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}

func (m *DeleteCacheResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteCacheResponse.Unmarshal(m, b)
}
func (m *DeleteCacheResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteCacheResponse.Marshal(b, m, deterministic)
}
func (m *DeleteCacheResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCacheResponse.Merge(m, src)
}
func (m *DeleteCacheResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteCacheResponse.Size(m)
}
func (m *DeleteCacheResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCacheResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCacheResponse proto.InternalMessageInfo

func (m *DeleteCacheResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type LoadCacheRequest struct {
	// Type represents the type of enclave pool
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// SubType represents the subType of enclave pool
	SubType string `protobuf:"bytes,2,opt,name=subType,proto3" json:"subType,omitempty"`
	// ID represents the id of the cache
	ID string `protobuf:"bytes,3,opt,name=ID,proto3" json:"ID,omitempty"`
	// TargetPath represents the work directory for loading the cache data
	TargetPath           string   `protobuf:"bytes,4,opt,name=targetPath,proto3" json:"targetPath,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoadCacheRequest) Reset()         { *m = LoadCacheRequest{} }
func (m *LoadCacheRequest) String() string { return proto.CompactTextString(m) }
func (*LoadCacheRequest) ProtoMessage()    {}
func (*LoadCacheRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11}
}

func (m *LoadCacheRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadCacheRequest.Unmarshal(m, b)
}
func (m *LoadCacheRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadCacheRequest.Marshal(b, m, deterministic)
}
func (m *LoadCacheRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadCacheRequest.Merge(m, src)
}
func (m *LoadCacheRequest) XXX_Size() int {
	return xxx_messageInfo_LoadCacheRequest.Size(m)
}
func (m *LoadCacheRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadCacheRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoadCacheRequest proto.InternalMessageInfo

func (m *LoadCacheRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *LoadCacheRequest) GetSubType() string {
	if m != nil {
		return m.SubType
	}
	return ""
}

func (m *LoadCacheRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *LoadCacheRequest) GetTargetPath() string {
	if m != nil {
		return m.TargetPath
	}
	return ""
}

type LoadCacheResponse struct {
	// Ok represents whether the cache is loaded successfully
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoadCacheResponse) Reset()         { *m = LoadCacheResponse{} }
func (m *LoadCacheResponse) String() string { return proto.CompactTextString(m) }
func (*LoadCacheResponse) ProtoMessage()    {}
func (*LoadCacheResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{12}
}

func (m *LoadCacheResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadCacheResponse.Unmarshal(m, b)
}
func (m *LoadCacheResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadCacheResponse.Marshal(b, m, deterministic)
}
func (m *LoadCacheResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadCacheResponse.Merge(m, src)
}
func (m *LoadCacheResponse) XXX_Size() int {
	return xxx_messageInfo_LoadCacheResponse.Size(m)
}
func (m *LoadCacheResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadCacheResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoadCacheResponse proto.InternalMessageInfo

func (m *LoadCacheResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type HealthzRequest struct {
	// Type represents the type of enclave pool
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthzRequest) Reset()         { *m = HealthzRequest{} }
func (m *HealthzRequest) String() string { return proto.CompactTextString(m) }
func (*HealthzRequest) ProtoMessage()    {}
func (*HealthzRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{13}
}

func (m *HealthzRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthzRequest.Unmarshal(m, b)
}
func (m *HealthzRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthzRequest.Marshal(b, m, deterministic)
}
func (m *HealthzRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthzRequest.Merge(m, src)
}
func (m *HealthzRequest) XXX_Size() int {
	return xxx_messageInfo_HealthzRequest.Size(m)
}
func (m *HealthzRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthzRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HealthzRequest proto.InternalMessageInfo

func (m *HealthzRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type HealthzResponse struct {
	// Ok represents whether epm service is running successfully
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthzResponse) Reset()         { *m = HealthzResponse{} }
func (m *HealthzResponse) String() string { return proto.CompactTextString(m) }
func (*HealthzResponse) ProtoMessage()    {}
func (*HealthzResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{14}
}

func (m *HealthzResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthzResponse.Unmarshal(m, b)
}
func (m *HealthzResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthzResponse.Marshal(b, m, deterministic)
}
func (m *HealthzResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthzResponse.Merge(m, src)
}
func (m *HealthzResponse) XXX_Size() int {
	return xxx_messageInfo_HealthzResponse.Size(m)
}
func (m *HealthzResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthzResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HealthzResponse proto.InternalMessageInfo

func (m *HealthzResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func init() {
	proto.RegisterType((*Cache)(nil), "v1alpha1.Cache")
	proto.RegisterType((*GetCacheRequest)(nil), "v1alpha1.GetCacheRequest")
	proto.RegisterType((*GetCacheResponse)(nil), "v1alpha1.GetCacheResponse")
	proto.RegisterType((*PickCacheRequest)(nil), "v1alpha1.PickCacheRequest")
	proto.RegisterMapType((map[string]string)(nil), "v1alpha1.PickCacheRequest.FiltersEntry")
	proto.RegisterType((*PickCacheResponse)(nil), "v1alpha1.PickCacheResponse")
	proto.RegisterType((*SaveCacheRequest)(nil), "v1alpha1.SaveCacheRequest")
	proto.RegisterType((*SaveCacheResponse)(nil), "v1alpha1.SaveCacheResponse")
	proto.RegisterType((*ListCacheRequest)(nil), "v1alpha1.ListCacheRequest")
	proto.RegisterType((*ListCacheResponse)(nil), "v1alpha1.ListCacheResponse")
	proto.RegisterType((*DeleteCacheRequest)(nil), "v1alpha1.DeleteCacheRequest")
	proto.RegisterType((*DeleteCacheResponse)(nil), "v1alpha1.DeleteCacheResponse")
	proto.RegisterType((*LoadCacheRequest)(nil), "v1alpha1.LoadCacheRequest")
	proto.RegisterType((*LoadCacheResponse)(nil), "v1alpha1.LoadCacheResponse")
	proto.RegisterType((*HealthzRequest)(nil), "v1alpha1.HealthzRequest")
	proto.RegisterType((*HealthzResponse)(nil), "v1alpha1.HealthzResponse")
}

func init() {
	proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c)
}

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 633 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x55, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xfd, 0xf2, 0x9f, 0xdc, 0x7c, 0x4a, 0xd2, 0xa1, 0x0b, 0xc7, 0xfc, 0xa8, 0x18, 0xaa, 0xb2,
	0x72, 0xd5, 0xb2, 0x81, 0x8a, 0x05, 0x55, 0xdb, 0x00, 0xa2, 0x88, 0xca, 0xb0, 0x61, 0x39, 0x71,
	0xa7, 0x89, 0x15, 0xe3, 0x31, 0xf6, 0x24, 0x22, 0x7d, 0x39, 0xde, 0x82, 0x67, 0xe0, 0x31, 0x98,
	0x1f, 0xdb, 0x19, 0x3b, 0x0e, 0x02, 0xa5, 0xbb, 0x99, 0x7b, 0x6f, 0xce, 0x39, 0xf7, 0xce, 0xb9,
	0x0e, 0x74, 0x70, 0xe8, 0xd9, 0x61, 0x44, 0x19, 0x45, 0xed, 0xc5, 0x11, 0xf6, 0xc3, 0x29, 0x3e,
	0x32, 0x87, 0x13, 0x4a, 0x27, 0x3e, 0x39, 0x94, 0xf1, 0xf1, 0xfc, 0xe6, 0x10, 0x07, 0x4b, 0x55,
	0x64, 0xfd, 0xaa, 0x40, 0xe3, 0x0c, 0xbb, 0x53, 0x82, 0x10, 0xd4, 0xd9, 0x32, 0x24, 0x46, 0x65,
	0xaf, 0xf2, 0xac, 0xe3, 0xc8, 0x33, 0x32, 0xa0, 0x15, 0xcf, 0xc7, 0x9f, 0x45, 0xb8, 0x2a, 0xc3,
	0xe9, 0x15, 0xf5, 0xa0, 0xfa, 0xee, 0xdc, 0xa8, 0xc9, 0x20, 0x3f, 0x21, 0x13, 0xda, 0x31, 0x5e,
	0x90, 0x2b, 0xcc, 0xa6, 0x46, 0x5d, 0x46, 0xb3, 0x3b, 0x3a, 0x80, 0x66, 0x88, 0x23, 0x12, 0x30,
	0xa3, 0xc1, 0x33, 0xdd, 0xe3, 0xbe, 0x9d, 0x2a, 0xb3, 0x25, 0xb5, 0x93, 0xa4, 0x85, 0x84, 0xd8,
	0xbb, 0x25, 0x46, 0x93, 0x97, 0xd5, 0x1c, 0x79, 0x16, 0x12, 0xdc, 0x88, 0x60, 0x46, 0xae, 0x8d,
	0x96, 0x0c, 0xa7, 0x57, 0x64, 0x43, 0x8b, 0x86, 0xcc, 0xa3, 0x41, 0x6c, 0xb4, 0x25, 0xee, 0xae,
	0xad, 0xfa, 0xb4, 0xd3, 0x3e, 0xed, 0xd3, 0x60, 0xe9, 0xa4, 0x45, 0xd6, 0x47, 0xe8, 0xbf, 0x21,
	0x4c, 0x31, 0x92, 0x6f, 0x73, 0x12, 0xb3, 0xed, 0x7a, 0xb6, 0x5e, 0xc2, 0x60, 0x05, 0x18, 0x87,
	0x9c, 0x83, 0xa0, 0x7d, 0x68, 0xb8, 0x22, 0x20, 0x21, 0x4b, 0x5a, 0x55, 0x59, 0xeb, 0x47, 0x05,
	0x06, 0x57, 0x9e, 0x3b, 0xdb, 0x42, 0xcd, 0x29, 0xb4, 0x6e, 0x3c, 0x9f, 0x91, 0x28, 0xe6, 0x92,
	0x6a, 0x9c, 0xeb, 0x60, 0xc5, 0x55, 0x84, 0xb6, 0x47, 0xaa, 0xf2, 0x22, 0x60, 0x11, 0x9f, 0x48,
	0xf2, 0x3b, 0xf3, 0x04, 0xfe, 0xd7, 0x13, 0x68, 0x00, 0xb5, 0x19, 0x59, 0x26, 0xfc, 0xe2, 0x88,
	0x76, 0xa1, 0xb1, 0xc0, 0xfe, 0x3c, 0x25, 0x57, 0x97, 0x93, 0xea, 0x8b, 0x8a, 0xf5, 0x0a, 0x76,
	0x34, 0x96, 0xa4, 0x7b, 0xfe, 0xd2, 0xb2, 0xbf, 0x98, 0x63, 0xd4, 0x4a, 0x5f, 0x5a, 0xa5, 0xad,
	0x2f, 0x30, 0xf8, 0xc4, 0xed, 0x91, 0x6b, 0xff, 0xef, 0x46, 0x87, 0x1e, 0x01, 0xc4, 0x74, 0x1e,
	0xb9, 0xca, 0x6b, 0x4a, 0x97, 0x16, 0xb1, 0x9e, 0xc0, 0x8e, 0x06, 0x9d, 0x08, 0xe3, 0x4f, 0x47,
	0x67, 0x12, 0xb8, 0xed, 0xf0, 0x93, 0xf5, 0x1d, 0x06, 0x97, 0x5e, 0xbc, 0x8d, 0x19, 0xf6, 0xa0,
	0xeb, 0xe3, 0x04, 0x21, 0x73, 0x85, 0x1e, 0x12, 0xb3, 0xf3, 0xbd, 0xaf, 0x1e, 0x93, 0xfb, 0xd0,
	0x70, 0xd4, 0x45, 0xcc, 0x4d, 0x63, 0xfe, 0xd7, 0xb9, 0x39, 0x80, 0xce, 0x89, 0x4f, 0x18, 0xb9,
	0x43, 0x1b, 0xef, 0xc3, 0xbd, 0x1c, 0xe6, 0x86, 0x91, 0x85, 0x7c, 0x64, 0x14, 0x5f, 0xdf, 0x1d,
	0xb1, 0x78, 0x49, 0x86, 0xa3, 0x09, 0x61, 0xda, 0x57, 0x43, 0x8b, 0x88, 0x97, 0xd4, 0x18, 0x37,
	0xc8, 0x7a, 0x0a, 0xbd, 0xb7, 0x04, 0xfb, 0x6c, 0x7a, 0xfb, 0x07, 0x51, 0xd6, 0x63, 0xe8, 0x67,
	0x55, 0xe5, 0x40, 0xc7, 0x3f, 0xeb, 0x80, 0x2e, 0x02, 0xd7, 0x17, 0x5f, 0x2d, 0x4a, 0xfd, 0x0f,
	0x38, 0xc0, 0x13, 0x12, 0xa1, 0x33, 0x68, 0xa7, 0x4b, 0x8e, 0x86, 0xab, 0x67, 0x29, 0x7c, 0x49,
	0x4c, 0xb3, 0x2c, 0xa5, 0x98, 0xac, 0xff, 0xd0, 0x08, 0x3a, 0xd9, 0xb2, 0x20, 0x73, 0xf3, 0x9e,
	0x9a, 0xf7, 0x4b, 0x73, 0x3a, 0x4e, 0xe6, 0x6d, 0x1d, 0xa7, 0xb8, 0x4b, 0x3a, 0xce, 0xda, 0x32,
	0x70, 0x9c, 0xf7, 0xd0, 0x13, 0xe1, 0x91, 0x17, 0x60, 0x7f, 0x6b, 0x30, 0x2e, 0x2a, 0x73, 0xb4,
	0x8e, 0x53, 0x5c, 0x30, 0x1d, 0x67, 0x6d, 0x05, 0x38, 0xce, 0x25, 0x74, 0x35, 0x1f, 0xa2, 0x07,
	0xab, 0xea, 0x75, 0xcb, 0x9b, 0x0f, 0x37, 0x64, 0x73, 0xaa, 0x52, 0xf3, 0xe4, 0x54, 0x15, 0x3c,
	0x9c, 0x53, 0x55, 0x74, 0x1b, 0xc7, 0x79, 0x0d, 0xad, 0xc4, 0x39, 0xc8, 0x58, 0x55, 0xe6, 0x2d,
	0x67, 0x0e, 0x4b, 0x32, 0x29, 0xc2, 0xb8, 0x29, 0xff, 0x8e, 0x9e, 0xff, 0x0e, 0x00, 0x00, 0xff,
	0xff, 0x6e, 0xc0, 0x17, 0x2f, 0x9b, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EnclavePoolManagerClient is the client API for EnclavePoolManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EnclavePoolManagerClient interface {
	// GetCache represents get the specified cache from pool
	GetCache(ctx context.Context, in *GetCacheRequest, opts ...grpc.CallOption) (*GetCacheResponse, error)
	// PickCache represents pick a suitable cache from pool
	PickCache(ctx context.Context, in *PickCacheRequest, opts ...grpc.CallOption) (*PickCacheResponse, error)
	// SaveCache represents save the data to a cache directory and record the cache metadata
	SaveCache(ctx context.Context, in *SaveCacheRequest, opts ...grpc.CallOption) (*SaveCacheResponse, error)
	// SaveFinalCache represents save the enclave info which can be used instantly
	SaveFinalCache(ctx context.Context, in *SaveCacheRequest, opts ...grpc.CallOption) (*SaveCacheResponse, error)
	// ListCache represents list part of or all of the cache metadata
	ListCache(ctx context.Context, in *ListCacheRequest, opts ...grpc.CallOption) (*ListCacheResponse, error)
	// DeleteCache represents delete the specified cached data and remove the corresponding cache metadata
	DeleteCache(ctx context.Context, in *DeleteCacheRequest, opts ...grpc.CallOption) (*DeleteCacheResponse, error)
	// LoadCache represents load the specified cache data to work directory
	LoadCache(ctx context.Context, in *LoadCacheRequest, opts ...grpc.CallOption) (*LoadCacheResponse, error)
	// Healthz represents epm service is in running state
	Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error)
}

type enclavePoolManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewEnclavePoolManagerClient(cc grpc.ClientConnInterface) EnclavePoolManagerClient {
	return &enclavePoolManagerClient{cc}
}

func (c *enclavePoolManagerClient) GetCache(ctx context.Context, in *GetCacheRequest, opts ...grpc.CallOption) (*GetCacheResponse, error) {
	out := new(GetCacheResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.EnclavePoolManager/GetCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enclavePoolManagerClient) PickCache(ctx context.Context, in *PickCacheRequest, opts ...grpc.CallOption) (*PickCacheResponse, error) {
	out := new(PickCacheResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.EnclavePoolManager/PickCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enclavePoolManagerClient) SaveCache(ctx context.Context, in *SaveCacheRequest, opts ...grpc.CallOption) (*SaveCacheResponse, error) {
	out := new(SaveCacheResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.EnclavePoolManager/SaveCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enclavePoolManagerClient) SaveFinalCache(ctx context.Context, in *SaveCacheRequest, opts ...grpc.CallOption) (*SaveCacheResponse, error) {
	out := new(SaveCacheResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.EnclavePoolManager/SaveFinalCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enclavePoolManagerClient) ListCache(ctx context.Context, in *ListCacheRequest, opts ...grpc.CallOption) (*ListCacheResponse, error) {
	out := new(ListCacheResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.EnclavePoolManager/ListCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enclavePoolManagerClient) DeleteCache(ctx context.Context, in *DeleteCacheRequest, opts ...grpc.CallOption) (*DeleteCacheResponse, error) {
	out := new(DeleteCacheResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.EnclavePoolManager/DeleteCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enclavePoolManagerClient) LoadCache(ctx context.Context, in *LoadCacheRequest, opts ...grpc.CallOption) (*LoadCacheResponse, error) {
	out := new(LoadCacheResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.EnclavePoolManager/LoadCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enclavePoolManagerClient) Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error) {
	out := new(HealthzResponse)
	err := c.cc.Invoke(ctx, "/v1alpha1.EnclavePoolManager/Healthz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnclavePoolManagerServer is the server API for EnclavePoolManager service.
type EnclavePoolManagerServer interface {
	// GetCache represents get the specified cache from pool
	GetCache(context.Context, *GetCacheRequest) (*GetCacheResponse, error)
	// PickCache represents pick a suitable cache from pool
	PickCache(context.Context, *PickCacheRequest) (*PickCacheResponse, error)
	// SaveCache represents save the data to a cache directory and record the cache metadata
	SaveCache(context.Context, *SaveCacheRequest) (*SaveCacheResponse, error)
	// SaveFinalCache represents save the enclave info which can be used instantly
	SaveFinalCache(context.Context, *SaveCacheRequest) (*SaveCacheResponse, error)
	// ListCache represents list part of or all of the cache metadata
	ListCache(context.Context, *ListCacheRequest) (*ListCacheResponse, error)
	// DeleteCache represents delete the specified cached data and remove the corresponding cache metadata
	DeleteCache(context.Context, *DeleteCacheRequest) (*DeleteCacheResponse, error)
	// LoadCache represents load the specified cache data to work directory
	LoadCache(context.Context, *LoadCacheRequest) (*LoadCacheResponse, error)
	// Healthz represents epm service is in running state
	Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error)
}

// UnimplementedEnclavePoolManagerServer can be embedded to have forward compatible implementations.
type UnimplementedEnclavePoolManagerServer struct {
}

func (*UnimplementedEnclavePoolManagerServer) GetCache(ctx context.Context, req *GetCacheRequest) (*GetCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCache not implemented")
}
func (*UnimplementedEnclavePoolManagerServer) PickCache(ctx context.Context, req *PickCacheRequest) (*PickCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PickCache not implemented")
}
func (*UnimplementedEnclavePoolManagerServer) SaveCache(ctx context.Context, req *SaveCacheRequest) (*SaveCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCache not implemented")
}
func (*UnimplementedEnclavePoolManagerServer) SaveFinalCache(ctx context.Context, req *SaveCacheRequest) (*SaveCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveFinalCache not implemented")
}
func (*UnimplementedEnclavePoolManagerServer) ListCache(ctx context.Context, req *ListCacheRequest) (*ListCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCache not implemented")
}
func (*UnimplementedEnclavePoolManagerServer) DeleteCache(ctx context.Context, req *DeleteCacheRequest) (*DeleteCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCache not implemented")
}
func (*UnimplementedEnclavePoolManagerServer) LoadCache(ctx context.Context, req *LoadCacheRequest) (*LoadCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadCache not implemented")
}
func (*UnimplementedEnclavePoolManagerServer) Healthz(ctx context.Context, req *HealthzRequest) (*HealthzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthz not implemented")
}

func RegisterEnclavePoolManagerServer(s *grpc.Server, srv EnclavePoolManagerServer) {
	s.RegisterService(&_EnclavePoolManager_serviceDesc, srv)
}

func _EnclavePoolManager_GetCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnclavePoolManagerServer).GetCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.EnclavePoolManager/GetCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnclavePoolManagerServer).GetCache(ctx, req.(*GetCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnclavePoolManager_PickCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PickCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnclavePoolManagerServer).PickCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.EnclavePoolManager/PickCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnclavePoolManagerServer).PickCache(ctx, req.(*PickCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnclavePoolManager_SaveCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnclavePoolManagerServer).SaveCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.EnclavePoolManager/SaveCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnclavePoolManagerServer).SaveCache(ctx, req.(*SaveCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnclavePoolManager_SaveFinalCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnclavePoolManagerServer).SaveFinalCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.EnclavePoolManager/SaveFinalCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnclavePoolManagerServer).SaveFinalCache(ctx, req.(*SaveCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnclavePoolManager_ListCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnclavePoolManagerServer).ListCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.EnclavePoolManager/ListCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnclavePoolManagerServer).ListCache(ctx, req.(*ListCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnclavePoolManager_DeleteCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnclavePoolManagerServer).DeleteCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.EnclavePoolManager/DeleteCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnclavePoolManagerServer).DeleteCache(ctx, req.(*DeleteCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnclavePoolManager_LoadCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnclavePoolManagerServer).LoadCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.EnclavePoolManager/LoadCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnclavePoolManagerServer).LoadCache(ctx, req.(*LoadCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnclavePoolManager_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnclavePoolManagerServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1alpha1.EnclavePoolManager/Healthz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnclavePoolManagerServer).Healthz(ctx, req.(*HealthzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EnclavePoolManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1alpha1.EnclavePoolManager",
	HandlerType: (*EnclavePoolManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCache",
			Handler:    _EnclavePoolManager_GetCache_Handler,
		},
		{
			MethodName: "PickCache",
			Handler:    _EnclavePoolManager_PickCache_Handler,
		},
		{
			MethodName: "SaveCache",
			Handler:    _EnclavePoolManager_SaveCache_Handler,
		},
		{
			MethodName: "SaveFinalCache",
			Handler:    _EnclavePoolManager_SaveFinalCache_Handler,
		},
		{
			MethodName: "ListCache",
			Handler:    _EnclavePoolManager_ListCache_Handler,
		},
		{
			MethodName: "DeleteCache",
			Handler:    _EnclavePoolManager_DeleteCache_Handler,
		},
		{
			MethodName: "LoadCache",
			Handler:    _EnclavePoolManager_LoadCache_Handler,
		},
		{
			MethodName: "Healthz",
			Handler:    _EnclavePoolManager_Healthz_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
