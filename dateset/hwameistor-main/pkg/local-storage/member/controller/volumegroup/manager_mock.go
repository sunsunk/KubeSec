// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package volumegroup is a generated GoMock package.
package volumegroup

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/hwameistor/hwameistor/pkg/apis/hwameistor/v1alpha1"
)

// MockVolumeGroupManager is a mock of VolumeGroupManager interface.
type MockVolumeGroupManager struct {
	ctrl     *gomock.Controller
	recorder *MockVolumeGroupManagerMockRecorder
}

// MockVolumeGroupManagerMockRecorder is the mock recorder for MockVolumeGroupManager.
type MockVolumeGroupManagerMockRecorder struct {
	mock *MockVolumeGroupManager
}

// NewMockVolumeGroupManager creates a new mock instance.
func NewMockVolumeGroupManager(ctrl *gomock.Controller) *MockVolumeGroupManager {
	mock := &MockVolumeGroupManager{ctrl: ctrl}
	mock.recorder = &MockVolumeGroupManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVolumeGroupManager) EXPECT() *MockVolumeGroupManagerMockRecorder {
	return m.recorder
}

// GetLocalVolumeGroupByLocalVolume mocks base method.
func (m *MockVolumeGroupManager) GetLocalVolumeGroupByLocalVolume(nameSpace, lvName string) (*v1alpha1.LocalVolumeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalVolumeGroupByLocalVolume", nameSpace, lvName)
	ret0, _ := ret[0].(*v1alpha1.LocalVolumeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocalVolumeGroupByLocalVolume indicates an expected call of GetLocalVolumeGroupByLocalVolume.
func (mr *MockVolumeGroupManagerMockRecorder) GetLocalVolumeGroupByLocalVolume(nameSpace, lvName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalVolumeGroupByLocalVolume", reflect.TypeOf((*MockVolumeGroupManager)(nil).GetLocalVolumeGroupByLocalVolume), nameSpace, lvName)
}

// GetLocalVolumeGroupByName mocks base method.
func (m *MockVolumeGroupManager) GetLocalVolumeGroupByName(nameSpace, lvgName string) (*v1alpha1.LocalVolumeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalVolumeGroupByName", nameSpace, lvgName)
	ret0, _ := ret[0].(*v1alpha1.LocalVolumeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocalVolumeGroupByName indicates an expected call of GetLocalVolumeGroupByName.
func (mr *MockVolumeGroupManagerMockRecorder) GetLocalVolumeGroupByName(nameSpace, lvgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalVolumeGroupByName", reflect.TypeOf((*MockVolumeGroupManager)(nil).GetLocalVolumeGroupByName), nameSpace, lvgName)
}

// GetLocalVolumeGroupByPVC mocks base method.
func (m *MockVolumeGroupManager) GetLocalVolumeGroupByPVC(pvcName, pvcNamespace string) (*v1alpha1.LocalVolumeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalVolumeGroupByPVC", pvcName, pvcNamespace)
	ret0, _ := ret[0].(*v1alpha1.LocalVolumeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocalVolumeGroupByPVC indicates an expected call of GetLocalVolumeGroupByPVC.
func (mr *MockVolumeGroupManagerMockRecorder) GetLocalVolumeGroupByPVC(pvcName, pvcNamespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalVolumeGroupByPVC", reflect.TypeOf((*MockVolumeGroupManager)(nil).GetLocalVolumeGroupByPVC), pvcName, pvcNamespace)
}

// Init mocks base method.
func (m *MockVolumeGroupManager) Init(stopCh <-chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init", stopCh)
}

// Init indicates an expected call of Init.
func (mr *MockVolumeGroupManagerMockRecorder) Init(stopCh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockVolumeGroupManager)(nil).Init), stopCh)
}

// ReconcileVolumeGroup mocks base method.
func (m *MockVolumeGroupManager) ReconcileVolumeGroup(volGroup *v1alpha1.LocalVolumeGroup) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReconcileVolumeGroup", volGroup)
}

// ReconcileVolumeGroup indicates an expected call of ReconcileVolumeGroup.
func (mr *MockVolumeGroupManagerMockRecorder) ReconcileVolumeGroup(volGroup interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileVolumeGroup", reflect.TypeOf((*MockVolumeGroupManager)(nil).ReconcileVolumeGroup), volGroup)
}

// MockVolumeScheduler is a mock of VolumeScheduler interface.
type MockVolumeScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockVolumeSchedulerMockRecorder
}

// MockVolumeSchedulerMockRecorder is the mock recorder for MockVolumeScheduler.
type MockVolumeSchedulerMockRecorder struct {
	mock *MockVolumeScheduler
}

// NewMockVolumeScheduler creates a new mock instance.
func NewMockVolumeScheduler(ctrl *gomock.Controller) *MockVolumeScheduler {
	mock := &MockVolumeScheduler{ctrl: ctrl}
	mock.recorder = &MockVolumeSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVolumeScheduler) EXPECT() *MockVolumeSchedulerMockRecorder {
	return m.recorder
}

// Allocate mocks base method.
func (m *MockVolumeScheduler) Allocate(vol *v1alpha1.LocalVolume) (*v1alpha1.VolumeConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allocate", vol)
	ret0, _ := ret[0].(*v1alpha1.VolumeConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Allocate indicates an expected call of Allocate.
func (mr *MockVolumeSchedulerMockRecorder) Allocate(vol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allocate", reflect.TypeOf((*MockVolumeScheduler)(nil).Allocate), vol)
}

// GetNodeCandidates mocks base method.
func (m *MockVolumeScheduler) GetNodeCandidates(vols []*v1alpha1.LocalVolume) []*v1alpha1.LocalStorageNode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeCandidates", vols)
	ret0, _ := ret[0].([]*v1alpha1.LocalStorageNode)
	return ret0
}

// GetNodeCandidates indicates an expected call of GetNodeCandidates.
func (mr *MockVolumeSchedulerMockRecorder) GetNodeCandidates(vols interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeCandidates", reflect.TypeOf((*MockVolumeScheduler)(nil).GetNodeCandidates), vols)
}

// Init mocks base method.
func (m *MockVolumeScheduler) Init() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init")
}

// Init indicates an expected call of Init.
func (mr *MockVolumeSchedulerMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockVolumeScheduler)(nil).Init))
}
