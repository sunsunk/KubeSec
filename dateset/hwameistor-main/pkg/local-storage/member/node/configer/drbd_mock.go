// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package configer is a generated GoMock package.
package configer

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/hwameistor/hwameistor/pkg/apis/hwameistor/v1alpha1"
)

// MockConfiger is a mock of Configer interface.
type MockConfiger struct {
	ctrl     *gomock.Controller
	recorder *MockConfigerMockRecorder
}

// MockConfigerMockRecorder is the mock recorder for MockConfiger.
type MockConfigerMockRecorder struct {
	mock *MockConfiger
}

// NewMockConfiger creates a new mock instance.
func NewMockConfiger(ctrl *gomock.Controller) *MockConfiger {
	mock := &MockConfiger{ctrl: ctrl}
	mock.recorder = &MockConfigerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfiger) EXPECT() *MockConfigerMockRecorder {
	return m.recorder
}

// ApplyConfig mocks base method.
func (m *MockConfiger) ApplyConfig(replica *v1alpha1.LocalVolumeReplica, config v1alpha1.VolumeConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyConfig", replica, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyConfig indicates an expected call of ApplyConfig.
func (mr *MockConfigerMockRecorder) ApplyConfig(replica, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyConfig", reflect.TypeOf((*MockConfiger)(nil).ApplyConfig), replica, config)
}

// ConsistencyCheck mocks base method.
func (m *MockConfiger) ConsistencyCheck(replicas []v1alpha1.LocalVolumeReplica) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ConsistencyCheck", replicas)
}

// ConsistencyCheck indicates an expected call of ConsistencyCheck.
func (mr *MockConfigerMockRecorder) ConsistencyCheck(replicas interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsistencyCheck", reflect.TypeOf((*MockConfiger)(nil).ConsistencyCheck), replicas)
}

// DeleteConfig mocks base method.
func (m *MockConfiger) DeleteConfig(replica *v1alpha1.LocalVolumeReplica) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConfig", replica)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConfig indicates an expected call of DeleteConfig.
func (mr *MockConfigerMockRecorder) DeleteConfig(replica interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfig", reflect.TypeOf((*MockConfiger)(nil).DeleteConfig), replica)
}

// GetReplicaHAState mocks base method.
func (m *MockConfiger) GetReplicaHAState(replica *v1alpha1.LocalVolumeReplica) (v1alpha1.HAState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplicaHAState", replica)
	ret0, _ := ret[0].(v1alpha1.HAState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplicaHAState indicates an expected call of GetReplicaHAState.
func (mr *MockConfigerMockRecorder) GetReplicaHAState(replica interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplicaHAState", reflect.TypeOf((*MockConfiger)(nil).GetReplicaHAState), replica)
}

// HasConfig mocks base method.
func (m *MockConfiger) HasConfig(replica *v1alpha1.LocalVolumeReplica) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasConfig", replica)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasConfig indicates an expected call of HasConfig.
func (mr *MockConfigerMockRecorder) HasConfig(replica interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasConfig", reflect.TypeOf((*MockConfiger)(nil).HasConfig), replica)
}

// Initialize mocks base method.
func (m *MockConfiger) Initialize(replica *v1alpha1.LocalVolumeReplica, config v1alpha1.VolumeConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", replica, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockConfigerMockRecorder) Initialize(replica, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockConfiger)(nil).Initialize), replica, config)
}

// IsConfigUpdated mocks base method.
func (m *MockConfiger) IsConfigUpdated(replica *v1alpha1.LocalVolumeReplica, config v1alpha1.VolumeConfig) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConfigUpdated", replica, config)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConfigUpdated indicates an expected call of IsConfigUpdated.
func (mr *MockConfigerMockRecorder) IsConfigUpdated(replica, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConfigUpdated", reflect.TypeOf((*MockConfiger)(nil).IsConfigUpdated), replica, config)
}

// Run mocks base method.
func (m *MockConfiger) Run(stopCh <-chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", stopCh)
}

// Run indicates an expected call of Run.
func (mr *MockConfigerMockRecorder) Run(stopCh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockConfiger)(nil).Run), stopCh)
}
