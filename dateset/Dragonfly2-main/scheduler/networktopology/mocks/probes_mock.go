// Code generated by MockGen. DO NOT EDIT.
// Source: probes.go
//
// Generated by this command:
//
//	mockgen -destination mocks/probes_mock.go -source probes.go -package mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	networktopology "d7y.io/dragonfly/v2/scheduler/networktopology"
	gomock "go.uber.org/mock/gomock"
)

// MockProbes is a mock of Probes interface.
type MockProbes struct {
	ctrl     *gomock.Controller
	recorder *MockProbesMockRecorder
}

// MockProbesMockRecorder is the mock recorder for MockProbes.
type MockProbesMockRecorder struct {
	mock *MockProbes
}

// NewMockProbes creates a new mock instance.
func NewMockProbes(ctrl *gomock.Controller) *MockProbes {
	mock := &MockProbes{ctrl: ctrl}
	mock.recorder = &MockProbesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProbes) EXPECT() *MockProbesMockRecorder {
	return m.recorder
}

// AverageRTT mocks base method.
func (m *MockProbes) AverageRTT() (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AverageRTT")
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AverageRTT indicates an expected call of AverageRTT.
func (mr *MockProbesMockRecorder) AverageRTT() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AverageRTT", reflect.TypeOf((*MockProbes)(nil).AverageRTT))
}

// CreatedAt mocks base method.
func (m *MockProbes) CreatedAt() (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatedAt")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatedAt indicates an expected call of CreatedAt.
func (mr *MockProbesMockRecorder) CreatedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatedAt", reflect.TypeOf((*MockProbes)(nil).CreatedAt))
}

// Enqueue mocks base method.
func (m *MockProbes) Enqueue(arg0 *networktopology.Probe) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enqueue", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enqueue indicates an expected call of Enqueue.
func (mr *MockProbesMockRecorder) Enqueue(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockProbes)(nil).Enqueue), arg0)
}

// Len mocks base method.
func (m *MockProbes) Len() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Len indicates an expected call of Len.
func (mr *MockProbesMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockProbes)(nil).Len))
}

// Peek mocks base method.
func (m *MockProbes) Peek() (*networktopology.Probe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Peek")
	ret0, _ := ret[0].(*networktopology.Probe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Peek indicates an expected call of Peek.
func (mr *MockProbesMockRecorder) Peek() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peek", reflect.TypeOf((*MockProbes)(nil).Peek))
}

// UpdatedAt mocks base method.
func (m *MockProbes) UpdatedAt() (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatedAt")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatedAt indicates an expected call of UpdatedAt.
func (mr *MockProbesMockRecorder) UpdatedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatedAt", reflect.TypeOf((*MockProbes)(nil).UpdatedAt))
}
