// Code generated by MockGen. DO NOT EDIT.
// Source: client_v1.go
//
// Generated by this command:
//
//	mockgen -destination mocks/client_v1_mock.go -source client_v1.go -package mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	inference "d7y.io/api/v2/pkg/apis/inference"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockV1 is a mock of V1 interface.
type MockV1 struct {
	ctrl     *gomock.Controller
	recorder *MockV1MockRecorder
}

// MockV1MockRecorder is the mock recorder for MockV1.
type MockV1MockRecorder struct {
	mock *MockV1
}

// NewMockV1 creates a new mock instance.
func NewMockV1(ctrl *gomock.Controller) *MockV1 {
	mock := &MockV1{ctrl: ctrl}
	mock.recorder = &MockV1MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockV1) EXPECT() *MockV1MockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockV1) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockV1MockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockV1)(nil).Close))
}

// ModelInfer mocks base method.
func (m *MockV1) ModelInfer(arg0 context.Context, arg1 *inference.ModelInferRequest, arg2 ...grpc.CallOption) (*inference.ModelInferResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModelInfer", varargs...)
	ret0, _ := ret[0].(*inference.ModelInferResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelInfer indicates an expected call of ModelInfer.
func (mr *MockV1MockRecorder) ModelInfer(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelInfer", reflect.TypeOf((*MockV1)(nil).ModelInfer), varargs...)
}

// ModelReady mocks base method.
func (m *MockV1) ModelReady(arg0 context.Context, arg1 *inference.ModelReadyRequest, arg2 ...grpc.CallOption) (*inference.ModelReadyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModelReady", varargs...)
	ret0, _ := ret[0].(*inference.ModelReadyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelReady indicates an expected call of ModelReady.
func (mr *MockV1MockRecorder) ModelReady(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelReady", reflect.TypeOf((*MockV1)(nil).ModelReady), varargs...)
}

// ServerReady mocks base method.
func (m *MockV1) ServerReady(arg0 context.Context, arg1 *inference.ServerReadyRequest, arg2 ...grpc.CallOption) (*inference.ServerReadyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ServerReady", varargs...)
	ret0, _ := ret[0].(*inference.ServerReadyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerReady indicates an expected call of ServerReady.
func (mr *MockV1MockRecorder) ServerReady(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerReady", reflect.TypeOf((*MockV1)(nil).ServerReady), varargs...)
}
