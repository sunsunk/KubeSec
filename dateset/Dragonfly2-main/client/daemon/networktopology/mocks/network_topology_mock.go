// Code generated by MockGen. DO NOT EDIT.
// Source: network_topology.go
//
// Generated by this command:
//
//	mockgen -destination mocks/network_topology_mock.go -source network_topology.go -package mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockNetworkTopology is a mock of NetworkTopology interface.
type MockNetworkTopology struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkTopologyMockRecorder
}

// MockNetworkTopologyMockRecorder is the mock recorder for MockNetworkTopology.
type MockNetworkTopologyMockRecorder struct {
	mock *MockNetworkTopology
}

// NewMockNetworkTopology creates a new mock instance.
func NewMockNetworkTopology(ctrl *gomock.Controller) *MockNetworkTopology {
	mock := &MockNetworkTopology{ctrl: ctrl}
	mock.recorder = &MockNetworkTopologyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkTopology) EXPECT() *MockNetworkTopologyMockRecorder {
	return m.recorder
}

// Serve mocks base method.
func (m *MockNetworkTopology) Serve() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Serve")
}

// Serve indicates an expected call of Serve.
func (mr *MockNetworkTopologyMockRecorder) Serve() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serve", reflect.TypeOf((*MockNetworkTopology)(nil).Serve))
}

// Stop mocks base method.
func (m *MockNetworkTopology) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockNetworkTopologyMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockNetworkTopology)(nil).Stop))
}
