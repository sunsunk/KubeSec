/*
Copyright 2021 The SchemaHero Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha4

import (
	v1alpha4 "github.com/schemahero/schemahero/pkg/apis/schemas/v1alpha4"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ViewLister helps list Views.
// All objects returned here must be treated as read-only.
type ViewLister interface {
	// List lists all Views in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha4.View, err error)
	// Views returns an object that can list and get Views.
	Views(namespace string) ViewNamespaceLister
	ViewListerExpansion
}

// viewLister implements the ViewLister interface.
type viewLister struct {
	indexer cache.Indexer
}

// NewViewLister returns a new ViewLister.
func NewViewLister(indexer cache.Indexer) ViewLister {
	return &viewLister{indexer: indexer}
}

// List lists all Views in the indexer.
func (s *viewLister) List(selector labels.Selector) (ret []*v1alpha4.View, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha4.View))
	})
	return ret, err
}

// Views returns an object that can list and get Views.
func (s *viewLister) Views(namespace string) ViewNamespaceLister {
	return viewNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ViewNamespaceLister helps list and get Views.
// All objects returned here must be treated as read-only.
type ViewNamespaceLister interface {
	// List lists all Views in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha4.View, err error)
	// Get retrieves the View from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha4.View, error)
	ViewNamespaceListerExpansion
}

// viewNamespaceLister implements the ViewNamespaceLister
// interface.
type viewNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Views in the indexer for a given namespace.
func (s viewNamespaceLister) List(selector labels.Selector) (ret []*v1alpha4.View, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha4.View))
	})
	return ret, err
}

// Get retrieves the View from the indexer for a given namespace and name.
func (s viewNamespaceLister) Get(name string) (*v1alpha4.View, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha4.Resource("view"), name)
	}
	return obj.(*v1alpha4.View), nil
}
