# Copyright 2020-2023 Alibaba Group Holding Limited.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

setup:
  env: kind
  kubeconfig: /tmp/e2e-k8s.config
  steps:
    - name: setup the backup path
      command: worker=($(docker ps | grep kind-worker | awk -F ' ' '{print $1}')); for c in ${worker[@]}; do docker exec $c mkdir -p /var/vineyard/dump; done
    - name: download all failover images into kind cluster and load the backup-job and recover-job images manually
      command: |
        make -C k8s/test/e2e publish-failover-images REGISTRY=localhost:5001
    - name: deploy the vineyard deployment
      command: |
        go run k8s/cmd/main.go deploy vineyard-deployment \
          --vineyardd.image="localhost:5001/vineyardd:latest" \
          --pluginImage.backupImage="localhost:5001/backup-job" \
          --pluginImage.recoverImage="localhost:5001/recover-job" \
          --pluginImage.daskRepartitionImage="localhost:5001/dask-repartition" \
          --pluginImage.localAssemblyImage="localhost:5001/local-assembly" \
          --pluginImage.distributedAssemblyImage="localhost:5001/distributed-assembly" \
          --create-namespace
    - name: install local-object
      command: |
        kubectl create namespace vineyard-job
        sed 's/$job/localObject/' k8s/test/e2e/failover-demo/failover-job.yaml | \
          gomplate -d config=k8s/test/e2e/failover-demo/failover-job-config.yaml | \
          kubectl apply -f -
        kubectl wait --for=condition=Ready pod -l app=build-local-object -n vineyard-job --timeout=5m
        while [[ -z $(kubectl get pod -l app=build-local-object -n vineyard-job -oname | awk -F '/' '{print $2}' | xargs kubectl logs -n vineyard-job) ]]; \
        do \
          sleep 0.1; \
        done
        export meta=$(kubectl get pod -l app=build-local-object -n vineyard-job -oname | awk -F '/' '{print $2}' | xargs kubectl logs -n vineyard-job)
        export localobjectid=$(echo $meta | awk 'END {print}' |awk -F "[\"]" '{print $2}')
      wait:
        - namespace: vineyard-job
          resource: deployment/build-local-object
          for: condition=Available
    - name: install distributed-object
      command: |
        sed 's/$job/distributedObject1/' k8s/test/e2e/failover-demo/failover-job.yaml | \
          gomplate -d config=k8s/test/e2e/failover-demo/failover-job-config.yaml | \
          kubectl apply -f -
        kubectl wait --for=condition=Ready pod -l app=build-distributed-object-step1 -n vineyard-job --timeout=5m
        while [[ -z $(kubectl get pod -l app=build-distributed-object-step1 -n vineyard-job -oname | awk -F '/' '{print $2}' | xargs kubectl logs -n vineyard-job) ]]; \
        do \
          sleep 0.1; \
        done
        export meta=$(kubectl get pod -l app=build-distributed-object-step1 -n vineyard-job -oname | awk -F '/' '{print $2}' | xargs kubectl logs -n vineyard-job)
        export step1objectid=$(echo $meta | awk 'END {print}' |awk -F "[\"]" '{print $2}')
        sed 's/objectid/'$step1objectid'/;s/$job/distributedObject2/' k8s/test/e2e/failover-demo/failover-job.yaml | \
          gomplate -d config=k8s/test/e2e/failover-demo/failover-job-config.yaml | \
          kubectl apply -f -
        kubectl wait --for=condition=Ready pod -l app=build-distributed-object-step2 -n vineyard-job --timeout=5m
        while [[ -z $(kubectl get pod -l app=build-distributed-object-step2 -n vineyard-job -oname | awk -F '/' '{print $2}' | xargs kubectl logs -n vineyard-job) ]]; \
        do \
          sleep 0.1; \
        done
        export meta=$(kubectl get pod -l app=build-distributed-object-step2 -n vineyard-job -oname | awk -F '/' '{print $2}' | xargs kubectl logs -n vineyard-job)
        export distributedobjectid=$(echo $meta | awk 'END {print}' |awk -F "[\"]" '{print $2}')
      wait:
        - namespace: vineyard-job
          resource: deployment/build-distributed-object-step2
          for: condition=Available
    - name: install pv and pvc
      command: |
        # create pv
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: PersistentVolume
        metadata:
          name: backup-path
          labels:
            app: backup-and-recover-demo
          namespace: vineyard-system
        spec:
          capacity:
            storage: 1Gi
          storageClassName: manual
          accessModes:
            - ReadWriteOnce
          hostPath:
            path: /var/vineyard/dump
        EOF

        # create pvc
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: pvc-for-backup-and-recover-demo
          labels:
            app: backup-and-recover-demo
          namespace: vineyard-system
        spec:
          storageClassName: manual
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
          selector:
            matchLabels:
              app: backup-and-recover-demo
        EOF
    - name: install backup
      command: |
        go run k8s/cmd/main.go deploy backup-job\
          --backup-name backup-job-xxx \
          --vineyard-deployment-name vineyardd-sample \
          --vineyard-deployment-namespace vineyard-system  \
          --objectIDs "$localobjectid,$distributedobjectid" \
          --path /var/vineyard/dump  \
          --pvc-name pvc-for-backup-and-recover-demo
    - name: simulate vineyard node fail
      command: |
        go run k8s/cmd/main.go delete vineyard-deployment
        kubectl wait --for delete pod --timeout=60s --selector=app.kubernetes.io/name=vineyardd-sample -n vineyard-system
    - name: reinstall vineyardd
      command: |
        go run k8s/cmd/main.go deploy vineyard-deployment \
          --vineyardd.image="localhost:5001/vineyardd:latest" \
          --pluginImage.backupImage="localhost:5001/backup-job" \
          --pluginImage.recoverImage="localhost:5001/recover-job" \
          --pluginImage.daskRepartitionImage="localhost:5001/dask-repartition" \
          --pluginImage.localAssemblyImage="localhost:5001/local-assembly" \
          --pluginImage.distributedAssemblyImage="localhost:5001/distributed-assembly" \
          --create-namespace
    - name: install recover
      command: |
        go run k8s/cmd/main.go deploy recover-job \
          --recover-name recover-job-xxx \
          --vineyard-deployment-name vineyardd-sample \
          --vineyard-deployment-namespace vineyard-system  \
          --recover-path /var/vineyard/dump \
          --pvc-name pvc-for-backup-and-recover-demo
    - name: install get-local-object job
      command: |
        export newlocalobject_id=$(kubectl get configmap vineyard-recover-mapping-table -n vineyard-system -oyaml | grep $localobjectid | sed -n 's/.*: //p')
        sed 's/objectid/'$newlocalobject_id'/;s/$job/getLocalObject/' k8s/test/e2e/failover-demo/failover-job.yaml | \
          gomplate -d config=k8s/test/e2e/failover-demo/failover-job-config.yaml | \
          kubectl apply -f -
      wait:
        - namespace: vineyard-job
          resource: deployment/get-local-object
          for: condition=Available
    - name: install get-distributed-object job
      command: |
        export newdistributed_id=$(kubectl get configmap vineyard-recover-mapping-table -n vineyard-system -oyaml  | \
          grep $distributedobjectid | sed -n 's/.*: //p')
        sed 's/objectid/'$newdistributed_id'/;s/$job/getDistributedObject/' k8s/test/e2e/failover-demo/failover-job.yaml | \
          gomplate -d config=k8s/test/e2e/failover-demo/failover-job-config.yaml | \
          kubectl apply -f -
      wait:
        - namespace: vineyard-job
          resource: deployment/get-distributed-object
          for: condition=Available
  timeout: 40m

cleanup:
  # always never success failure
  on: success

verify:
  # verify with retry strategy
  retry:
    # max retry count
    count: 10
    # the interval between two attempts, e.g. 10s, 1m.
    interval: 10s
  cases:
    - query: |
        kubectl get pod -l app=get-local-object -n vineyard-job -oname | \
          awk -F '/' '{print $2}' | \
          head -n 1 | \
          xargs kubectl logs -n vineyard-job | \
          yq e '{"sum": .}' - | \
          yq e 'to_entries' -
      expected: ../verify/values.yaml
    - query: |
        kubectl get pod -l app=get-distributed-object -n vineyard-job -oname | \
          awk -F '/' '{print $2}' | \
          head -n 1 | \
          xargs kubectl logs -n vineyard-job | \
          yq e '{"sum": .}' - | \
          yq e 'to_entries' -
      expected: ../verify/distributed-object-values.yaml
