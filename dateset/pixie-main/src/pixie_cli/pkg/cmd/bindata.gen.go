// Code generated by go-bindata.
// sources:
// ../../../../../../../../../tmp/vizier_yamls/etcd.yaml
// ../../../../../../../../../tmp/vizier_yamls/nats.yaml
// ../../../../../../../../../tmp/vizier_yamls/vizier.yaml
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmpVizier_yamlsEtcdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4d\x6f\xdb\x38\x10\xbd\xeb\x57\x10\xb9\x04\x58\x40\x4a\x9c\xec\x61\x97\x37\xd7\x71\x8b\x02\x49\x6c\xc4\x6e\x81\x9e\x8c\x11\x35\x4e\xd8\xf0\xab\xe4\x48\x68\xf2\xeb\x0b\x9a\x92\x62\x5b\x76\x1a\x34\xe5\x49\x1a\xbc\x99\x37\x7c\xf3\x38\xe0\xe4\x57\xf4\x41\x5a\xc3\x99\x2f\x41\x14\x50\xd3\x83\xf5\xf2\x19\x48\x5a\x53\x3c\xfe\x17\x0a\x69\xcf\x9a\x51\x89\x04\xa3\xec\x51\x9a\x8a\xb3\x89\xaa\x03\xa1\xbf\xb3\x0a\x33\x8d\x04\x15\x10\xf0\x8c\x31\x05\x25\xaa\x10\xbf\x18\x03\xe7\x38\x73\x2a\xd7\xd6\x48\xb2\x5e\x9a\xfb\x8c\x31\x03\x1a\x39\x43\x12\x55\x6e\x1d\x7a\x20\xeb\x33\x5f\x2b\x0c\x3c\xcb\x19\x38\xf9\xc9\xdb\xda\x6d\x0a\xe4\x1b\x54\x11\x2b\x97\x10\xb0\x10\xd6\xa3\x0d\x85\xb0\x3a\x63\xcc\x63\xb0\xb5\x17\xb8\x85\x14\xa9\xa5\xd0\x07\x4a\x10\x8f\xb5\x7b\xf9\xf7\x18\xc8\x7a\x8c\x81\x06\x7d\xd9\xa6\x9e\xfe\x73\x3a\x64\x06\x27\xf1\x27\xa1\x89\xa2\x84\x56\x81\x21\xab\xa8\x03\x59\xdd\x05\x2b\x5c\x4b\x23\xa3\x64\x6f\x61\x38\x39\x19\xd6\x73\xb6\x4a\xdd\x06\xf4\x8d\x14\xd8\xb6\x6e\x2a\x67\xa5\xa1\xf4\xe7\xe2\xa4\x02\xa1\xa1\xc6\xaa\x5a\xa3\x50\x20\x75\x0b\x6c\x30\xa1\x7e\x7f\xbb\x8d\x2a\x7b\xec\x15\x3a\x65\x9f\xf4\x1b\x6b\x1c\xea\x3f\xa0\xf0\xb8\x9f\x7d\x8f\x94\xe5\x79\x9e\xbd\xd3\x65\x1f\xa4\xa9\xa2\x83\xde\x6f\x36\xab\xf0\x0e\xd7\x31\xab\xbb\xd2\x2b\x0d\x65\x8c\x0d\x0d\x7f\xb8\x70\xa8\xcb\xef\x28\x68\x63\xe4\x94\xb3\x48\x63\x1c\x0b\x61\x6b\x43\x7d\x5a\x85\x6b\xa8\x55\xf7\x1f\x1c\x08\x8c\xad\x0f\x54\x8a\x63\x3a\x6b\x3a\x2d\xae\xfa\xf1\xbc\x5f\x83\x7d\xe6\xe0\x50\xf0\xcd\x3c\x9d\x92\x02\x02\x67\xa3\x8c\xb1\x80\x0a\x05\x59\x9f\x8a\x6b\x20\xf1\x70\xbd\xc5\x76\x84\x8f\x50\x3b\x05\x84\x6d\xd6\x56\xab\xf1\xa8\x9d\x02\x47\x4a\xa4\x73\xb8\x71\xc6\xba\x66\xe3\x11\xd6\x10\x48\x83\xbe\x2f\x99\x33\x61\xb5\x06\x53\xbd\x70\xe4\x07\x8a\xc4\x83\xa6\xd9\x06\x25\xbe\x9b\x6f\xab\xf9\xec\x6a\x75\x3b\xbe\x99\x2e\xe6\xe3\xc9\xb4\x07\x30\xd6\x80\xaa\xf1\xa3\xb7\x9a\x6f\x05\x19\x5b\x4b\x54\x55\xeb\xa8\x41\x7c\x0e\xf4\xc0\x7b\x15\x8a\x5e\xf6\xd7\x78\xff\x3e\x65\x0f\x93\x1a\xee\x91\xb3\x1f\x35\x3c\xc5\xd7\x96\x56\xea\xd9\x8e\x3c\xbc\x39\x2f\xfe\x2f\xfe\x7d\x75\x0c\xfb\x4e\x3d\xb6\xa8\xdb\xe7\x7c\xd1\x5a\x78\x4a\xa2\x6a\xdf\xd1\x9f\x78\xd8\xa9\x3c\x12\x1d\x75\xef\xf2\x7a\x91\x6a\x04\x02\x92\xbd\x47\x34\xea\x12\xfd\x8b\x54\x0e\xd1\x2f\x36\x9b\xaa\xbd\x56\x0c\xe4\xa4\x42\x2e\xd0\x6f\xb6\x57\x3a\x71\x09\xef\x21\x53\x68\x80\xed\x74\xd9\xc1\x0a\x25\xd1\xd0\x0e\xd6\xd9\xd6\x95\x11\x30\xed\xdc\xd7\x39\x60\xba\x9c\x5c\xad\xc6\x5f\x96\xb3\xd5\x64\x76\x33\x1f\x4f\x96\x9f\x67\xb7\xab\xbb\xe9\x72\x7a\x1b\xbf\xb2\x2d\x43\x70\x76\x32\x3a\x8f\xfb\x37\xc8\x67\xe4\xec\x32\x2d\xdc\x34\x8a\xcb\xe2\xa2\x18\x5d\x66\xbf\x02\x00\x00\xff\xff\x09\x0c\x05\x30\xd4\x07\x00\x00")

func tmpVizier_yamlsEtcdYamlBytes() ([]byte, error) {
	return bindataRead(
		_tmpVizier_yamlsEtcdYaml,
		"tmp/vizier_yamls/etcd.yaml",
	)
}

func tmpVizier_yamlsEtcdYaml() (*asset, error) {
	bytes, err := tmpVizier_yamlsEtcdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmp/vizier_yamls/etcd.yaml", size: 2004, mode: os.FileMode(436), modTime: time.Unix(1570690336, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmpVizier_yamlsNatsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x4d\x6f\xe3\x38\x0c\xbd\xfb\x57\x08\xbd\x14\x58\xc0\x4e\xb2\x45\x81\xc2\xb7\x6c\xbf\xb0\xd8\x6d\xd6\x68\x80\x05\xe6\x54\x30\x32\x93\x68\x22\x4b\x82\x44\x1b\x4d\x7f\xfd\x40\x96\xe3\xd8\x8d\x93\xe9\xb4\xd3\x19\x9d\x2c\xea\xf9\x91\x7c\xa4\x68\x83\x11\xff\xa3\x75\x42\xab\x94\x55\x93\x68\x23\x54\x9e\xb2\x39\xda\x4a\x70\x9c\x72\xae\x4b\x45\x51\x81\x04\x39\x10\xa4\x11\x63\x12\x16\x28\x9d\x7f\x62\x0c\x8c\x49\x99\x91\x71\xa1\x95\x20\x6d\x85\x5a\x45\x8c\x29\x28\x30\x65\x0a\xc8\xc5\xda\xa0\x05\xd2\xb6\xb1\x3a\x03\x1c\xfd\x0b\x51\x1c\xc7\xd1\x67\x3a\x76\x68\x2b\xfc\xbe\x5b\xbb\x00\x9e\x40\x49\x6b\x6d\xc5\x0b\x90\xd0\x2a\xd9\x5c\xb9\x44\xe8\x51\x1b\xd0\xb5\x2c\x1d\xa1\x7d\xd4\x12\x3f\x2e\x83\x2d\x25\xba\x34\x8a\x19\x18\x71\x6f\x75\x69\x6a\x82\x7a\x8b\xcf\x84\xca\x47\xe5\x9a\x10\x22\xc6\x2c\x3a\x5d\x5a\x8e\x0d\x8a\x97\x8e\x74\xb1\x33\xe6\xb8\x14\x4a\xf8\x98\x5d\xc4\x58\x85\x76\xd1\xc0\xce\xff\x38\x3f\xf4\xe0\xe3\x18\x24\xf5\x07\x3c\xe4\xe8\x5a\x83\x0b\x55\xb0\x5a\xe2\x5b\xc8\xcf\xce\x06\x82\xd5\x6a\x29\x56\x05\x98\xc0\xea\x90\x5b\xa4\xf0\x6c\x74\xbe\x7f\x18\xe1\x33\xf2\xfd\x4e\xea\x55\x83\xaf\x23\x70\xdd\x0d\x84\xa6\x18\xb4\x8d\x48\x6f\x50\xd5\x27\xa8\x72\xa3\xc5\x0e\x87\x15\x86\xc7\xf7\x24\xd1\x76\xcf\x2b\x02\x29\x1c\xfd\xae\x66\x6a\x5a\xfb\x58\x2b\x0d\xa6\xa1\xf3\xc1\x3a\x7e\x28\x81\xbf\x84\xca\x7d\x70\x1f\xbd\x14\xf1\xa2\x21\xf2\xdd\xf6\x88\x4b\xff\xf6\x2e\xa7\x13\x31\x45\x8c\x1d\x6a\x3a\x7c\xeb\x5c\xb9\xf8\x8a\x9c\x6a\xb5\x06\xa7\xcc\xfb\x66\xd6\xaf\x95\x2b\x94\xfd\xd3\xc4\x6a\xba\xea\xc7\xa4\x7a\xe3\x94\x05\x63\xdc\x5e\x93\x1b\x34\x52\x6f\x0b\xfc\x8c\xcf\x8a\x33\xc8\xd3\xba\xff\x8d\x14\x1c\x5c\xca\x26\x11\x63\x0e\x25\x72\xd2\x36\x90\x17\x40\x7c\xfd\x6f\xc7\xdb\x11\x7f\x7e\x0d\xfb\x24\x2c\x8c\x04\xc2\x86\xaf\x93\x84\x5f\xb2\x47\x7d\x82\xfc\x18\x3d\x63\xbb\x34\xfc\xe2\x5a\x11\x08\x85\xb6\xa5\x8c\x19\xd8\x55\xc7\x41\x3c\xc0\xe0\x17\xaa\xaa\x0f\xf2\xce\x1e\xbe\x3c\x65\xff\xdd\x3c\xcd\xa6\x0f\xb7\xf3\x6c\x7a\x7d\xdb\x02\x18\xab\x40\x96\x78\x67\x75\x91\x76\x8c\x8c\x2d\x05\xca\xbc\x69\xb5\x03\x7b\x06\xb4\x4e\x5b\x09\x92\xb6\x1a\xa7\xfc\xfe\x7c\x97\x2d\x4c\x14\xb0\xc2\xd4\x6b\xa6\x90\x13\x56\x68\xb7\xb4\x16\x6a\x35\xea\x29\x94\x8e\x93\xcb\x64\x1c\x57\x13\x90\x66\x0d\x7f\xf6\xdf\xce\x4a\x29\x33\x2d\x05\xdf\xa6\xec\xef\xe5\x4c\x53\x66\xd1\x61\xdd\xf9\xa7\x8b\xe6\x97\xd1\x96\x7a\x95\x69\xab\x97\x69\x4b\x29\xbb\x1a\x5f\x8d\x3b\x39\x05\x2a\x8b\x90\x6f\x5f\x5a\xb3\xdf\x0a\x85\xce\x65\x56\x2f\xb0\x2b\xc1\x9a\xc8\xdc\x23\xf5\x55\x31\xb5\x1c\xa3\x57\x24\xbb\x60\x0e\xd8\x19\xab\x7f\x1a\x40\xde\xa0\x84\xed\x1c\xb9\x56\xb9\xbf\x26\x97\x1d\x04\x89\x02\x75\x49\xed\xe1\x45\x73\xe6\x7a\xa3\x60\x36\xa0\xc3\xeb\x9b\xdf\xfc\x75\x8c\x5a\xa9\xc3\x08\x98\x01\xb9\x66\x12\xbd\x67\x06\x18\x19\x7b\xe2\xa3\xb7\xdf\x89\x17\x0c\x51\xd3\x8e\x2d\x4c\xaa\x79\xfd\x13\x92\xee\x12\x89\x49\xba\x98\xa3\xad\xa9\xfa\x98\xeb\xe9\x9d\x90\x18\x52\xe4\x90\x70\x4b\x87\x10\xb4\xb4\x07\x85\x93\x41\xe0\x3f\xb8\x3d\xc0\x6d\x70\x1b\xbe\xc7\x41\xa7\x49\x72\x91\x8c\xa3\x6f\x01\x00\x00\xff\xff\x4f\x82\x99\xca\x8a\x0b\x00\x00")

func tmpVizier_yamlsNatsYamlBytes() ([]byte, error) {
	return bindataRead(
		_tmpVizier_yamlsNatsYaml,
		"tmp/vizier_yamls/nats.yaml",
	)
}

func tmpVizier_yamlsNatsYaml() (*asset, error) {
	bytes, err := tmpVizier_yamlsNatsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmp/vizier_yamls/nats.yaml", size: 2954, mode: os.FileMode(436), modTime: time.Unix(1570690336, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmpVizier_yamlsVizierYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9a\xdf\x73\xe2\x38\x12\xc7\xdf\xf9\x2b\x54\xf3\xb2\x55\x57\x65\x20\x93\xc9\xdd\x8c\xab\xf6\x81\x25\x6c\x86\xdb\x84\x75\x61\x76\xb7\xf6\xc9\x25\xe4\x06\x34\xc8\x92\x46\x92\xc9\x90\xbf\xfe\xca\xf2\x0f\x6c\xf3\x33\x10\x92\xbb\x1c\x7e\x49\x2c\x4b\xad\xee\xaf\x5a\x1f\x37\xb6\xb1\xa4\x7f\x82\xd2\x54\x70\x17\xa9\x31\x26\x4d\x1c\x9b\x99\x50\xf4\x09\x1b\x2a\x78\x73\xfe\x59\x37\xa9\x68\x2d\xae\xc6\x60\xf0\x55\x63\x4e\x79\xe8\xa2\x2e\x8b\xb5\x01\x35\x14\x0c\x1a\x11\x18\x1c\x62\x83\xdd\x06\x42\x0c\x8f\x81\xe9\xe4\x3f\x84\xb0\x94\x2e\x92\xcc\x89\x04\xa7\x46\x28\xca\xa7\x0d\x84\x38\x8e\xc0\x45\x5c\x84\xe0\x2c\x28\x3c\x36\x54\xcc\x40\xbb\x0d\x07\x61\x49\xef\x94\x88\xa5\x1d\xec\xa0\x0f\x1f\x1a\x08\x29\xd0\x22\x56\x04\xb2\xb6\x64\x94\x6e\x20\xb4\x00\x35\xce\x9a\xa6\x60\xec\xdf\x47\x6c\xc8\xcc\xfe\xc7\xa8\x36\x0d\xc7\x71\x1a\x6f\x10\xd6\x82\x3e\x51\x50\x0e\x01\x65\xa2\xa9\x7a\x56\x6c\x52\x84\xda\xfe\xa3\x81\x28\x30\xb5\x30\x7f\xfa\xc7\x4f\x6f\x1c\x53\x3e\xf2\xd8\xa0\xd4\x82\x12\x48\x4f\x80\x87\x52\x50\x7e\xa6\x18\x7f\xa1\x3c\x4c\xfc\x3f\x25\x2b\x9d\x71\x66\x44\x09\x06\x43\x98\x24\x23\xf3\x70\x77\x38\xd5\x40\x68\x5d\xf2\xf5\x94\xd7\xf1\xf8\x1b\x10\x63\x45\x4c\xfb\xfb\xa9\x3c\x1d\x42\x44\xcc\x4d\x31\x24\x84\x09\x8e\x59\x7e\xae\x25\x26\x90\xb8\xfe\xc6\x2a\xd5\x93\xfc\xe5\x24\xaa\x59\x7e\x1f\x3a\xad\x36\xce\x8b\x0b\x55\x98\x7e\x71\xa5\x16\xb9\x14\x99\x9d\x13\xe2\xc7\x92\x3a\xd9\xf6\x5f\x9b\x56\x4b\x20\x89\x1d\x29\x94\xc9\x19\x6f\xc7\x1a\x22\x9d\x99\x31\xf2\xa3\x9d\x24\xb9\xec\xa2\x9b\xf6\xc7\x76\x3b\x3d\x57\xc2\x08\x22\x98\x8b\x46\x5d\xcf\xb6\x18\xac\xa6\x60\xbc\x4a\x3f\x0d\x0c\x88\x11\x6a\x87\xa3\xeb\xae\x36\x10\x32\x4b\x09\x85\xec\x7d\xef\x9c\xda\xe4\x99\x7e\xa2\x2e\x5f\x0e\xd4\xe5\xcb\x91\xba\xac\xdc\x7c\x45\x6d\x8a\xe4\x3e\x51\x9c\x4f\x07\x8a\xf3\xe9\x48\x71\x4a\x7e\xbe\xa2\x3a\x52\x89\x1f\xcb\xe3\xf7\x95\x2e\x49\xf4\xe9\xd3\xf5\x21\x02\xdd\xb4\xad\x40\x75\x4b\x25\x43\x9f\x0f\x12\xfa\xa6\xdd\xbe\x3a\x4a\x68\x1b\x72\xa1\xf2\x40\x84\x90\x58\x3c\xa7\xc8\xdf\x63\x50\x4b\x67\xac\xc4\x1c\x4e\xde\xa3\xd7\x07\xa6\xe1\xf5\x91\x69\x58\xf3\x75\x5f\x2a\x62\x29\x75\xab\x90\xea\x16\x24\x13\xcb\x08\xb8\x39\x0d\xf4\x5b\x45\x52\x20\x19\x25\x58\xbb\x68\x7d\xed\xa3\xa4\x74\xbf\x2f\x4d\xb5\x35\xe0\xcd\xb8\x86\x48\x32\x6c\x20\x33\x56\x72\x3f\x39\x58\xc5\xee\x0e\xcb\x1b\x6d\x23\x94\x07\x90\x1c\x44\x70\x83\x29\x07\x55\xd8\x4b\x6a\xd9\xc5\xca\x78\x9e\x01\xde\x7d\xf0\xef\xbf\x46\x81\xdf\xbf\x1b\xf4\x07\x77\xc1\x6f\xbd\xbf\x8b\x2e\x08\x2d\x30\x8b\xe1\x57\x25\x22\xb7\xd4\x88\xb2\xb2\xff\x37\x58\x66\x25\x42\xf9\x98\xc3\xd2\x45\xdf\x1e\x8d\xa3\xe9\x94\x53\x3e\x75\xe6\xb0\xac\x75\x49\x27\x96\xcc\x21\xe9\x92\x3b\xab\x9f\x11\x6b\xbe\xf9\xbd\xe1\x9f\xbd\x61\x30\xba\xf7\x83\x6e\x6f\x38\xaa\xfb\xe6\xa2\x56\x02\x7c\xdd\x4a\xe8\x02\xaa\x49\x94\xd9\x63\x65\x43\x80\x75\x23\x65\x8f\x4b\x46\xba\xf7\xfd\xde\x60\xb4\xdf\x15\xc2\x28\x70\xb3\xcd\x95\x92\x95\x5d\xae\x64\x46\xb6\xb8\x62\x7d\xe8\xec\x71\x03\x57\x5c\xa0\x11\x9e\x82\x8b\xa6\x44\x25\x35\xa4\x64\x4e\x08\x0b\x87\xf2\x89\xc2\xad\x34\x8d\x5a\x58\xd2\x20\x55\x20\x48\x3b\x27\x99\xaa\xcd\xd6\x9c\x73\xd2\xce\xc5\xf5\x02\x2e\xb9\xbb\x45\x0e\x7a\xb5\x9a\x28\x3d\x66\x42\x9b\x4d\x57\x16\x82\xc5\x11\x3c\x24\xb5\x60\xc5\x5c\x94\xb4\x78\xd8\xcc\xf2\x10\x1b\xf5\x94\x2a\xb7\xda\x10\xbc\x98\x31\x3f\x4d\xae\xd5\x36\x28\xd2\xcf\x76\xc9\x92\xaf\x51\x9e\x7b\xad\x73\x75\xba\x74\x44\x39\xf1\xd3\x96\x81\xed\x9b\xdd\xe7\x1c\xc3\xb4\x93\x8e\x7b\x05\x9e\xed\x2b\xce\xce\xc2\xb4\x52\xa9\x75\x16\xae\xad\xec\x5f\xd8\x76\x61\xdb\x0e\xb6\x95\x46\xdf\xf6\xfd\xce\x2f\xf7\xbd\xe0\x6e\xe8\x75\x83\xce\x1f\xa3\xaf\xeb\x36\x3e\x18\x15\xc3\x87\x4d\x83\x07\x9d\x87\x9e\xef\x75\xba\xbd\xfd\x69\x32\xa1\xc0\xc2\x0d\x29\x62\xdb\x53\x48\xe5\xdb\xa0\x59\x6c\xc9\x67\xc0\x38\xcb\xfd\xc3\x81\x5c\xde\x2c\xe8\x20\x1a\x7f\xb9\x30\xf7\x34\xe6\x32\x11\x87\x0e\x11\x9c\x5b\x98\xbe\x32\x7b\xd7\x26\x3f\x13\x83\xd7\xe6\x79\x9f\x2c\xee\xde\xff\xe1\x8f\x7a\xc3\xa0\x7f\xfb\x02\x6e\xe5\xf3\xd1\xf0\x72\x77\x78\xfb\xbb\x03\xf0\x45\x75\x0d\x2d\x0b\x27\x74\xfa\x80\xe5\xda\x0a\x96\x56\x28\x4b\xfc\x09\x9d\x3e\x87\xdb\xc9\xb0\xa0\xd8\x2f\xcf\xe0\x77\x75\xa3\x3d\xbf\xb8\xfe\xbc\xb5\xb8\xfe\x7c\x01\xfd\x49\xa0\xdf\xfb\x74\xef\x2c\x84\x2f\x3f\xab\x3b\x0b\xda\x4b\x13\xbc\x4f\xa6\x5f\x08\xfa\xdf\x50\x5f\xef\x67\x66\x9e\x88\x87\xc3\xb2\x92\xba\xe8\x82\xb5\xe3\x1f\xcb\xbf\x2e\xd3\x8a\xc7\xe2\x67\x01\x5a\x6e\x7d\x3f\xcd\xb0\x9a\x56\xd2\xc4\x71\x18\xd5\x06\x78\xa9\xe9\xea\xe3\xbf\x9a\xed\x66\xbb\x79\xe5\xde\x5c\x57\x7a\x66\xaf\x25\x1d\x05\x5a\xb0\xf2\x2d\x3a\xb9\x88\xa5\x04\x1e\x3a\x1a\xb0\x22\x33\x27\x14\x11\xa6\x5c\x57\x7a\x24\x37\x66\x3d\xa1\x0c\x7e\x6e\x81\x21\x2d\x7b\x5a\xdf\x2b\xdf\x30\x07\xf2\x34\x8f\x5b\x53\xe1\x84\x5c\x47\x58\x7f\x77\x15\x30\xc0\x1a\x9c\xab\x66\xbb\x79\x53\x8b\x3f\xeb\xf3\x3f\x0d\xeb\xbd\x68\x34\x4c\x6f\x83\xd2\x3e\x20\x26\x43\xcb\xde\xed\x47\x92\x4d\xa5\xc3\x79\xb4\x7a\xc3\xf5\x9c\x92\x2d\x7b\x4b\x95\x1e\x0a\x70\x48\x39\x68\xed\x29\x31\x86\xb2\xd8\x33\x63\xe4\x5d\x95\x1d\x08\xc9\x94\x69\x33\xc0\xcc\xcc\x9e\xaa\x97\x36\x58\xb7\x8b\x49\x66\x90\xf8\xfc\x75\x34\xf2\xfc\xf7\x42\xce\x54\xf9\x57\xe5\xe6\x41\x6f\xda\xce\x82\xcf\xfa\x7b\xb3\xb3\x50\xb4\x36\xc9\xa5\x34\xbc\x94\x86\x6f\x57\x1a\xda\x64\x0c\xd2\x64\x3c\x1c\xc7\x6b\x29\x8c\x0e\xfa\x05\x7d\xfd\x7f\xfc\x3b\x19\x43\x24\xb8\x0f\x47\x71\x11\x4f\x81\xaf\x7f\xa6\x95\x63\xe3\x54\xf6\xe5\xd6\x5f\x98\x76\xb9\xd9\x63\x8a\x45\x6d\xa8\x62\x94\x4f\x03\xe0\x78\xcc\x20\x90\x58\xe9\xe4\xd4\x7e\x2f\x31\x8e\x27\xfa\xe7\x24\xcf\x8b\x21\xdb\x00\xf9\xee\x76\xbe\xef\xdf\x6f\xd8\xf3\x13\xcc\xf4\xe6\xf7\x2d\xde\xf0\xf7\x6e\xe0\x75\x36\x91\xc2\x16\xc6\x49\x19\x46\x9e\x41\x0b\xbb\xa6\xbb\xf8\xb0\x5a\x74\x84\x6a\x1f\x00\xe7\x07\xa3\x11\x35\xba\x7a\xfb\x89\x20\x12\x6a\xe9\xa2\x8f\x37\xff\x7c\xa0\xa5\x2b\x0a\xbe\xc7\xa0\xeb\xbd\x89\x8c\x5d\x74\xd5\x6e\x47\x07\xd8\xd0\x40\x62\x45\xcd\xb2\x2b\xb8\x81\x1f\x95\xed\x4c\xb0\xc4\x63\xca\xa8\xa1\x50\x9b\x00\x87\x61\xb5\xc1\x41\xfe\xdf\x7e\xe0\x8d\x86\xd5\x57\x57\xf9\x85\xce\xed\x43\x7f\x50\x6a\x97\x8a\x2e\x28\x83\x29\x84\x2e\xaa\x24\xea\x21\xd0\x4b\xd6\x65\x8d\x79\x49\xa3\xa3\x84\x30\x15\x71\x70\xf8\x3b\x67\xcb\xda\x1c\x55\x6b\x7a\xb9\x0e\xd0\x6a\xdb\x41\x66\xf6\x93\x38\xe4\xda\x13\x8c\x92\x65\xf1\xa1\xd1\xaf\x54\x69\xf3\x17\x35\xb3\xaf\x42\x9b\x41\x01\xdf\x59\x7a\xf6\x28\xd4\xbc\x32\xa5\x7d\xa0\xda\xbf\xad\xb4\x1d\x87\x77\x03\x2a\xa2\xdc\x7e\x3f\x7b\xa7\x30\x01\x0f\x14\x15\xa1\x0f\x44\xf0\x50\xbb\xe8\x3a\xbf\x09\x19\xc1\x40\xd9\x6e\xe5\x62\x6b\x32\x01\x62\x5c\x34\x10\x3e\x99\x41\x18\xb3\x95\x24\xb6\x44\xb2\x5f\x6e\x2b\xc1\xa0\x39\x8f\xc7\xa0\x38\x18\xb0\x1f\x0d\x47\x38\x89\x79\xdb\x0d\xc6\x06\x97\x48\x59\xce\x92\x54\xda\x52\x4b\xfa\x9d\xd6\x2d\x55\x96\xe7\xcb\xc6\xee\x1c\xd8\x69\xb5\xba\xc6\xbb\x0d\xaf\xfa\xbe\xcc\x9d\xf0\x3f\x01\x00\x00\xff\xff\x4f\x4d\x8d\x82\x43\x32\x00\x00")

func tmpVizier_yamlsVizierYamlBytes() ([]byte, error) {
	return bindataRead(
		_tmpVizier_yamlsVizierYaml,
		"tmp/vizier_yamls/vizier.yaml",
	)
}

func tmpVizier_yamlsVizierYaml() (*asset, error) {
	bytes, err := tmpVizier_yamlsVizierYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmp/vizier_yamls/vizier.yaml", size: 12867, mode: os.FileMode(436), modTime: time.Unix(1570690336, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmp/vizier_yamls/etcd.yaml":   tmpVizier_yamlsEtcdYaml,
	"tmp/vizier_yamls/nats.yaml":   tmpVizier_yamlsNatsYaml,
	"tmp/vizier_yamls/vizier.yaml": tmpVizier_yamlsVizierYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tmp": &bintree{nil, map[string]*bintree{
		"vizier_yamls": &bintree{nil, map[string]*bintree{
			"etcd.yaml":   &bintree{tmpVizier_yamlsEtcdYaml, map[string]*bintree{}},
			"nats.yaml":   &bintree{tmpVizier_yamlsNatsYaml, map[string]*bintree{}},
			"vizier.yaml": &bintree{tmpVizier_yamlsVizierYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
