// Code generated by MockGen. DO NOT EDIT.
// Source: server.go

// Package mock_controllers is a generated GoMock package.
package mock_controllers

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	distributedpb "px.dev/pixie/src/carnot/planner/distributedpb"
	plannerpb "px.dev/pixie/src/carnot/planner/plannerpb"
	tracker "px.dev/pixie/src/vizier/services/query_broker/tracker"
)

// MockPlanner is a mock of Planner interface.
type MockPlanner struct {
	ctrl     *gomock.Controller
	recorder *MockPlannerMockRecorder
}

// MockPlannerMockRecorder is the mock recorder for MockPlanner.
type MockPlannerMockRecorder struct {
	mock *MockPlanner
}

// NewMockPlanner creates a new mock instance.
func NewMockPlanner(ctrl *gomock.Controller) *MockPlanner {
	mock := &MockPlanner{ctrl: ctrl}
	mock.recorder = &MockPlannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlanner) EXPECT() *MockPlannerMockRecorder {
	return m.recorder
}

// CompileMutations mocks base method.
func (m *MockPlanner) CompileMutations(request *plannerpb.CompileMutationsRequest) (*plannerpb.CompileMutationsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompileMutations", request)
	ret0, _ := ret[0].(*plannerpb.CompileMutationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompileMutations indicates an expected call of CompileMutations.
func (mr *MockPlannerMockRecorder) CompileMutations(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompileMutations", reflect.TypeOf((*MockPlanner)(nil).CompileMutations), request)
}

// Free mocks base method.
func (m *MockPlanner) Free() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Free")
}

// Free indicates an expected call of Free.
func (mr *MockPlannerMockRecorder) Free() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Free", reflect.TypeOf((*MockPlanner)(nil).Free))
}

// GenerateOTelScript mocks base method.
func (m *MockPlanner) GenerateOTelScript(request *plannerpb.GenerateOTelScriptRequest) (*plannerpb.GenerateOTelScriptResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateOTelScript", request)
	ret0, _ := ret[0].(*plannerpb.GenerateOTelScriptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateOTelScript indicates an expected call of GenerateOTelScript.
func (mr *MockPlannerMockRecorder) GenerateOTelScript(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateOTelScript", reflect.TypeOf((*MockPlanner)(nil).GenerateOTelScript), request)
}

// Plan mocks base method.
func (m *MockPlanner) Plan(req *plannerpb.QueryRequest) (*distributedpb.LogicalPlannerResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Plan", req)
	ret0, _ := ret[0].(*distributedpb.LogicalPlannerResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Plan indicates an expected call of Plan.
func (mr *MockPlannerMockRecorder) Plan(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Plan", reflect.TypeOf((*MockPlanner)(nil).Plan), req)
}

// MockAgentsTracker is a mock of AgentsTracker interface.
type MockAgentsTracker struct {
	ctrl     *gomock.Controller
	recorder *MockAgentsTrackerMockRecorder
}

// MockAgentsTrackerMockRecorder is the mock recorder for MockAgentsTracker.
type MockAgentsTrackerMockRecorder struct {
	mock *MockAgentsTracker
}

// NewMockAgentsTracker creates a new mock instance.
func NewMockAgentsTracker(ctrl *gomock.Controller) *MockAgentsTracker {
	mock := &MockAgentsTracker{ctrl: ctrl}
	mock.recorder = &MockAgentsTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentsTracker) EXPECT() *MockAgentsTrackerMockRecorder {
	return m.recorder
}

// GetAgentInfo mocks base method.
func (m *MockAgentsTracker) GetAgentInfo() tracker.AgentsInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentInfo")
	ret0, _ := ret[0].(tracker.AgentsInfo)
	return ret0
}

// GetAgentInfo indicates an expected call of GetAgentInfo.
func (mr *MockAgentsTrackerMockRecorder) GetAgentInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentInfo", reflect.TypeOf((*MockAgentsTracker)(nil).GetAgentInfo))
}
