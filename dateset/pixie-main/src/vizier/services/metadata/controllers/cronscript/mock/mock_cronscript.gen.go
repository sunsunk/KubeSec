// Code generated by MockGen. DO NOT EDIT.
// Source: server.go

// Package mock_cronscript is a generated GoMock package.
package mock_cronscript

import (
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	cvmsgspb "px.dev/pixie/src/shared/cvmsgspb"
	storepb "px.dev/pixie/src/vizier/services/metadata/storepb"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// DeleteCronScript mocks base method.
func (m *MockStore) DeleteCronScript(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCronScript", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCronScript indicates an expected call of DeleteCronScript.
func (mr *MockStoreMockRecorder) DeleteCronScript(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCronScript", reflect.TypeOf((*MockStore)(nil).DeleteCronScript), id)
}

// GetAllCronScriptResults mocks base method.
func (m *MockStore) GetAllCronScriptResults() ([]*storepb.CronScriptResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCronScriptResults")
	ret0, _ := ret[0].([]*storepb.CronScriptResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCronScriptResults indicates an expected call of GetAllCronScriptResults.
func (mr *MockStoreMockRecorder) GetAllCronScriptResults() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCronScriptResults", reflect.TypeOf((*MockStore)(nil).GetAllCronScriptResults))
}

// GetCronScripts mocks base method.
func (m *MockStore) GetCronScripts() ([]*cvmsgspb.CronScript, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCronScripts")
	ret0, _ := ret[0].([]*cvmsgspb.CronScript)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCronScripts indicates an expected call of GetCronScripts.
func (mr *MockStoreMockRecorder) GetCronScripts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCronScripts", reflect.TypeOf((*MockStore)(nil).GetCronScripts))
}

// RecordCronScriptResult mocks base method.
func (m *MockStore) RecordCronScriptResult(arg0 *storepb.CronScriptResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordCronScriptResult", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordCronScriptResult indicates an expected call of RecordCronScriptResult.
func (mr *MockStoreMockRecorder) RecordCronScriptResult(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordCronScriptResult", reflect.TypeOf((*MockStore)(nil).RecordCronScriptResult), arg0)
}

// SetCronScripts mocks base method.
func (m *MockStore) SetCronScripts(scripts []*cvmsgspb.CronScript) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCronScripts", scripts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCronScripts indicates an expected call of SetCronScripts.
func (mr *MockStoreMockRecorder) SetCronScripts(scripts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCronScripts", reflect.TypeOf((*MockStore)(nil).SetCronScripts), scripts)
}

// UpsertCronScript mocks base method.
func (m *MockStore) UpsertCronScript(script *cvmsgspb.CronScript) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertCronScript", script)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertCronScript indicates an expected call of UpsertCronScript.
func (mr *MockStoreMockRecorder) UpsertCronScript(script interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertCronScript", reflect.TypeOf((*MockStore)(nil).UpsertCronScript), script)
}
