/*
 * Copyright 2022- The Pixie Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
// Code generated by AMQP protocol generator. DO NOT EDIT.
#include <string>

#include "src/common/base/base.h"
#include "src/stirling/source_connectors/socket_tracer/protocols/amqp/decode.h"
#include "src/stirling/source_connectors/socket_tracer/protocols/amqp/types_gen.h"
#include "src/stirling/utils/binary_decoder.h"

namespace px {
namespace stirling {
namespace protocols {
namespace amqp {

StatusOr<std::string> ExtractShortString(BinaryDecoder* decoder) {
  // Short string defined as 2*OCTET(short-uint)
  PX_ASSIGN_OR_RETURN(uint8_t len, decoder->ExtractBEInt<uint8_t>());
  return decoder->ExtractString(len);
}

StatusOr<std::string> ExtractLongString(BinaryDecoder* decoder) {
  // Long string defined as 4*OCTET(short-uint)
  PX_ASSIGN_OR_RETURN(uint32_t len, decoder->ExtractBEInt<uint32_t>());
  return decoder->ExtractString(len);
}

StatusOr<bool> ExtractNthBit(BinaryDecoder* decoder, int n) {
  // Extract Value at Nth bit
  return decoder->Buf()[0] >> n & 1;
}

{{ process_class_methods }}

{{ process_content_header }}

{{ process_method_type }}

{{ process_class_type }}

{{ process_frame_type }}

}  // namespace amqp
}  // namespace protocols
}  // namespace stirling
}  // namespace px
