/*
 * Copyright 2018- The Pixie Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

#include <gmock/gmock.h>
#include <gtest/gtest.h>

#include "src/common/base/base.h"
#include "src/common/exec/exec.h"
#include "src/common/testing/testing.h"

#include "src/common/base/types.h"
#include "src/stirling/source_connectors/socket_tracer/protocols/amqp/decode.h"
#include "src/stirling/source_connectors/socket_tracer/protocols/amqp/parse.h"
#include "src/stirling/source_connectors/socket_tracer/protocols/amqp/types_gen.h"

namespace px {
namespace stirling {
namespace protocols {
namespace amqp {

class DecodeAllTests
    : public ::testing::TestWithParam<std::tuple<std::string, std::string_view, std::string>> {};

TEST_P(DecodeAllTests, CheckDecoding) {
  std::basic_string_view<char> string_input = std::get<1>(GetParam());
  Frame packet;
  ParseFrame(message_type_t::kRequest, &string_input, &packet);
  std::string expected = std::get<2>(GetParam());
  EXPECT_EQ(packet.ToString(), expected);
}

INSTANTIATE_TEST_SUITE_P(DecodeAllTestsSuite, DecodeAllTests,
                         ::testing::Values(
{{ heartbeat_test }}
{{ content_body_tests }}
{{ content_header_tests }}
{{ amqp_method_tests }}
),
[](const ::testing::TestParamInfo<DecodeAllTests::ParamType>& info) {
std::string title = std::get<0>(info.param);
return title;
});


}  // namespace amqp
}  // namespace protocols
}  // namespace stirling
}  // namespace px
