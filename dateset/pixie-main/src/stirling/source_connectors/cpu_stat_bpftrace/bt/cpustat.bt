/*
 * This code runs using bpf in the Linux kernel.
 * Copyright 2018- The Pixie Authors.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * SPDX-License-Identifier: GPL-2.0
 */

// TODO
// 1) idle and iowait are actually functions in proc/stat.c
//    get_idle_time(), get_iowait_time()
//    they modify the raw values before reporting them.
//    That functionality may need to be replicated.
// 2) unroll doesn't work for values above 6
// 3) Need to determine user_hz dynamically (or pass in as argument)
// 4) Determine num_cpus dynamically (or pass in as argument)
// 5) There is a sampling time by the source (this file), and another
//    sampling time by the connector. Think about best way of managing both.

interval:ms:100
{
    $cpu_id = (uint64) $1;

    //sudo cat /proc/kallsyms | less
    $cpustat_offset = kaddr("kernel_cpustat");
    $per_cpu_offsets = kaddr("__per_cpu_offset");

    $cputime_user    = (uint64) 0;
    $cputime_nice    = (uint64) 0;
    $cputime_system  = (uint64) 0;
    $cputime_softirq = (uint64) 0;
    $cputime_irq     = (uint64) 0;
    $cputime_idle    = (uint64) 0;
    $cputime_iowait  = (uint64) 0;

    $nsec_per_sec = (uint64) 1000000000;
    $user_hz = (uint64) 100;
    $nsec_per_tick = $nsec_per_sec / $user_hz;

    $cpu = $cpu_id;
    unroll(1) {
        $cpu_base = *($per_cpu_offsets+($cpu*8));
        $cpustat  = $cpu_base + $cpustat_offset;

        //printf("cpu=%d addr=%llx\n", $cpu, $cpustat);

        $cputime_user    = $cputime_user    + *($cpustat + 0);
        $cputime_nice    = $cputime_nice    + *($cpustat + 8);
        $cputime_system  = $cputime_system  + *($cpustat + 16);
        $cputime_softirq = $cputime_softirq + *($cpustat + 24);
        $cputime_irq     = $cputime_irq     + *($cpustat + 32);
        $cputime_idle    = $cputime_idle    + *($cpustat + 40);
        $cputime_iowait  = $cputime_iowait  + *($cpustat + 48);

        $cpu = $cpu+1;
    }

    $cputime_user    = $cputime_user    / $nsec_per_tick;
    $cputime_nice    = $cputime_nice    / $nsec_per_tick;
    $cputime_system  = $cputime_system  / $nsec_per_tick;
    $cputime_softirq = $cputime_softirq / $nsec_per_tick;
    $cputime_irq     = $cputime_irq     / $nsec_per_tick;
    $cputime_idle    = $cputime_idle    / $nsec_per_tick;
    $cputime_iowait  = $cputime_iowait  / $nsec_per_tick;

    @retval[0] = nsecs;
    @retval[1] = $cputime_user;
    @retval[2] = $cputime_nice;
    @retval[3] = $cputime_system;
    @retval[4] = $cputime_softirq;
    @retval[5] = $cputime_irq;
    @retval[6] = $cputime_idle;
    @retval[7] = $cputime_iowait;
}
