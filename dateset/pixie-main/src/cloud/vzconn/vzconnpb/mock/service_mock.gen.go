// Code generated by MockGen. DO NOT EDIT.
// Source: service.pb.go

// Package mock_vzconnpb is a generated GoMock package.
package mock_vzconnpb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	vzconnpb "px.dev/pixie/src/cloud/vzconn/vzconnpb"
)

// MockVZConnServiceClient is a mock of VZConnServiceClient interface.
type MockVZConnServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockVZConnServiceClientMockRecorder
}

// MockVZConnServiceClientMockRecorder is the mock recorder for MockVZConnServiceClient.
type MockVZConnServiceClientMockRecorder struct {
	mock *MockVZConnServiceClient
}

// NewMockVZConnServiceClient creates a new mock instance.
func NewMockVZConnServiceClient(ctrl *gomock.Controller) *MockVZConnServiceClient {
	mock := &MockVZConnServiceClient{ctrl: ctrl}
	mock.recorder = &MockVZConnServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVZConnServiceClient) EXPECT() *MockVZConnServiceClientMockRecorder {
	return m.recorder
}

// NATSBridge mocks base method.
func (m *MockVZConnServiceClient) NATSBridge(ctx context.Context, opts ...grpc.CallOption) (vzconnpb.VZConnService_NATSBridgeClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NATSBridge", varargs...)
	ret0, _ := ret[0].(vzconnpb.VZConnService_NATSBridgeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NATSBridge indicates an expected call of NATSBridge.
func (mr *MockVZConnServiceClientMockRecorder) NATSBridge(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NATSBridge", reflect.TypeOf((*MockVZConnServiceClient)(nil).NATSBridge), varargs...)
}

// RegisterVizierDeployment mocks base method.
func (m *MockVZConnServiceClient) RegisterVizierDeployment(ctx context.Context, in *vzconnpb.RegisterVizierDeploymentRequest, opts ...grpc.CallOption) (*vzconnpb.RegisterVizierDeploymentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterVizierDeployment", varargs...)
	ret0, _ := ret[0].(*vzconnpb.RegisterVizierDeploymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterVizierDeployment indicates an expected call of RegisterVizierDeployment.
func (mr *MockVZConnServiceClientMockRecorder) RegisterVizierDeployment(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterVizierDeployment", reflect.TypeOf((*MockVZConnServiceClient)(nil).RegisterVizierDeployment), varargs...)
}

// MockVZConnService_NATSBridgeClient is a mock of VZConnService_NATSBridgeClient interface.
type MockVZConnService_NATSBridgeClient struct {
	ctrl     *gomock.Controller
	recorder *MockVZConnService_NATSBridgeClientMockRecorder
}

// MockVZConnService_NATSBridgeClientMockRecorder is the mock recorder for MockVZConnService_NATSBridgeClient.
type MockVZConnService_NATSBridgeClientMockRecorder struct {
	mock *MockVZConnService_NATSBridgeClient
}

// NewMockVZConnService_NATSBridgeClient creates a new mock instance.
func NewMockVZConnService_NATSBridgeClient(ctrl *gomock.Controller) *MockVZConnService_NATSBridgeClient {
	mock := &MockVZConnService_NATSBridgeClient{ctrl: ctrl}
	mock.recorder = &MockVZConnService_NATSBridgeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVZConnService_NATSBridgeClient) EXPECT() *MockVZConnService_NATSBridgeClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockVZConnService_NATSBridgeClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockVZConnService_NATSBridgeClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockVZConnService_NATSBridgeClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockVZConnService_NATSBridgeClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockVZConnService_NATSBridgeClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockVZConnService_NATSBridgeClient)(nil).Context))
}

// Header mocks base method.
func (m *MockVZConnService_NATSBridgeClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockVZConnService_NATSBridgeClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockVZConnService_NATSBridgeClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockVZConnService_NATSBridgeClient) Recv() (*vzconnpb.C2VBridgeMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*vzconnpb.C2VBridgeMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockVZConnService_NATSBridgeClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockVZConnService_NATSBridgeClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockVZConnService_NATSBridgeClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockVZConnService_NATSBridgeClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockVZConnService_NATSBridgeClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockVZConnService_NATSBridgeClient) Send(arg0 *vzconnpb.V2CBridgeMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockVZConnService_NATSBridgeClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockVZConnService_NATSBridgeClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockVZConnService_NATSBridgeClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockVZConnService_NATSBridgeClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockVZConnService_NATSBridgeClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockVZConnService_NATSBridgeClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockVZConnService_NATSBridgeClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockVZConnService_NATSBridgeClient)(nil).Trailer))
}

// MockVZConnServiceServer is a mock of VZConnServiceServer interface.
type MockVZConnServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockVZConnServiceServerMockRecorder
}

// MockVZConnServiceServerMockRecorder is the mock recorder for MockVZConnServiceServer.
type MockVZConnServiceServerMockRecorder struct {
	mock *MockVZConnServiceServer
}

// NewMockVZConnServiceServer creates a new mock instance.
func NewMockVZConnServiceServer(ctrl *gomock.Controller) *MockVZConnServiceServer {
	mock := &MockVZConnServiceServer{ctrl: ctrl}
	mock.recorder = &MockVZConnServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVZConnServiceServer) EXPECT() *MockVZConnServiceServerMockRecorder {
	return m.recorder
}

// NATSBridge mocks base method.
func (m *MockVZConnServiceServer) NATSBridge(arg0 vzconnpb.VZConnService_NATSBridgeServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NATSBridge", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// NATSBridge indicates an expected call of NATSBridge.
func (mr *MockVZConnServiceServerMockRecorder) NATSBridge(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NATSBridge", reflect.TypeOf((*MockVZConnServiceServer)(nil).NATSBridge), arg0)
}

// RegisterVizierDeployment mocks base method.
func (m *MockVZConnServiceServer) RegisterVizierDeployment(arg0 context.Context, arg1 *vzconnpb.RegisterVizierDeploymentRequest) (*vzconnpb.RegisterVizierDeploymentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterVizierDeployment", arg0, arg1)
	ret0, _ := ret[0].(*vzconnpb.RegisterVizierDeploymentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterVizierDeployment indicates an expected call of RegisterVizierDeployment.
func (mr *MockVZConnServiceServerMockRecorder) RegisterVizierDeployment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterVizierDeployment", reflect.TypeOf((*MockVZConnServiceServer)(nil).RegisterVizierDeployment), arg0, arg1)
}

// MockVZConnService_NATSBridgeServer is a mock of VZConnService_NATSBridgeServer interface.
type MockVZConnService_NATSBridgeServer struct {
	ctrl     *gomock.Controller
	recorder *MockVZConnService_NATSBridgeServerMockRecorder
}

// MockVZConnService_NATSBridgeServerMockRecorder is the mock recorder for MockVZConnService_NATSBridgeServer.
type MockVZConnService_NATSBridgeServerMockRecorder struct {
	mock *MockVZConnService_NATSBridgeServer
}

// NewMockVZConnService_NATSBridgeServer creates a new mock instance.
func NewMockVZConnService_NATSBridgeServer(ctrl *gomock.Controller) *MockVZConnService_NATSBridgeServer {
	mock := &MockVZConnService_NATSBridgeServer{ctrl: ctrl}
	mock.recorder = &MockVZConnService_NATSBridgeServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVZConnService_NATSBridgeServer) EXPECT() *MockVZConnService_NATSBridgeServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockVZConnService_NATSBridgeServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockVZConnService_NATSBridgeServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockVZConnService_NATSBridgeServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockVZConnService_NATSBridgeServer) Recv() (*vzconnpb.V2CBridgeMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*vzconnpb.V2CBridgeMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockVZConnService_NATSBridgeServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockVZConnService_NATSBridgeServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockVZConnService_NATSBridgeServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockVZConnService_NATSBridgeServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockVZConnService_NATSBridgeServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockVZConnService_NATSBridgeServer) Send(arg0 *vzconnpb.C2VBridgeMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockVZConnService_NATSBridgeServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockVZConnService_NATSBridgeServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockVZConnService_NATSBridgeServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockVZConnService_NATSBridgeServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockVZConnService_NATSBridgeServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockVZConnService_NATSBridgeServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockVZConnService_NATSBridgeServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockVZConnService_NATSBridgeServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockVZConnService_NATSBridgeServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockVZConnService_NATSBridgeServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockVZConnService_NATSBridgeServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockVZConnService_NATSBridgeServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockVZConnService_NATSBridgeServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockVZConnService_NATSBridgeServer)(nil).SetTrailer), arg0)
}
