// Code generated by MockGen. DO NOT EDIT.
// Source: service.pb.go

// Package mock_pluginpb is a generated GoMock package.
package mock_pluginpb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	pluginpb "px.dev/pixie/src/cloud/plugin/pluginpb"
)

// MockPluginServiceClient is a mock of PluginServiceClient interface.
type MockPluginServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPluginServiceClientMockRecorder
}

// MockPluginServiceClientMockRecorder is the mock recorder for MockPluginServiceClient.
type MockPluginServiceClientMockRecorder struct {
	mock *MockPluginServiceClient
}

// NewMockPluginServiceClient creates a new mock instance.
func NewMockPluginServiceClient(ctrl *gomock.Controller) *MockPluginServiceClient {
	mock := &MockPluginServiceClient{ctrl: ctrl}
	mock.recorder = &MockPluginServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPluginServiceClient) EXPECT() *MockPluginServiceClientMockRecorder {
	return m.recorder
}

// GetPlugins mocks base method.
func (m *MockPluginServiceClient) GetPlugins(ctx context.Context, in *pluginpb.GetPluginsRequest, opts ...grpc.CallOption) (*pluginpb.GetPluginsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPlugins", varargs...)
	ret0, _ := ret[0].(*pluginpb.GetPluginsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlugins indicates an expected call of GetPlugins.
func (mr *MockPluginServiceClientMockRecorder) GetPlugins(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlugins", reflect.TypeOf((*MockPluginServiceClient)(nil).GetPlugins), varargs...)
}

// GetRetentionPluginConfig mocks base method.
func (m *MockPluginServiceClient) GetRetentionPluginConfig(ctx context.Context, in *pluginpb.GetRetentionPluginConfigRequest, opts ...grpc.CallOption) (*pluginpb.GetRetentionPluginConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRetentionPluginConfig", varargs...)
	ret0, _ := ret[0].(*pluginpb.GetRetentionPluginConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRetentionPluginConfig indicates an expected call of GetRetentionPluginConfig.
func (mr *MockPluginServiceClientMockRecorder) GetRetentionPluginConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRetentionPluginConfig", reflect.TypeOf((*MockPluginServiceClient)(nil).GetRetentionPluginConfig), varargs...)
}

// MockPluginServiceServer is a mock of PluginServiceServer interface.
type MockPluginServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPluginServiceServerMockRecorder
}

// MockPluginServiceServerMockRecorder is the mock recorder for MockPluginServiceServer.
type MockPluginServiceServerMockRecorder struct {
	mock *MockPluginServiceServer
}

// NewMockPluginServiceServer creates a new mock instance.
func NewMockPluginServiceServer(ctrl *gomock.Controller) *MockPluginServiceServer {
	mock := &MockPluginServiceServer{ctrl: ctrl}
	mock.recorder = &MockPluginServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPluginServiceServer) EXPECT() *MockPluginServiceServerMockRecorder {
	return m.recorder
}

// GetPlugins mocks base method.
func (m *MockPluginServiceServer) GetPlugins(arg0 context.Context, arg1 *pluginpb.GetPluginsRequest) (*pluginpb.GetPluginsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlugins", arg0, arg1)
	ret0, _ := ret[0].(*pluginpb.GetPluginsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlugins indicates an expected call of GetPlugins.
func (mr *MockPluginServiceServerMockRecorder) GetPlugins(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlugins", reflect.TypeOf((*MockPluginServiceServer)(nil).GetPlugins), arg0, arg1)
}

// GetRetentionPluginConfig mocks base method.
func (m *MockPluginServiceServer) GetRetentionPluginConfig(arg0 context.Context, arg1 *pluginpb.GetRetentionPluginConfigRequest) (*pluginpb.GetRetentionPluginConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRetentionPluginConfig", arg0, arg1)
	ret0, _ := ret[0].(*pluginpb.GetRetentionPluginConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRetentionPluginConfig indicates an expected call of GetRetentionPluginConfig.
func (mr *MockPluginServiceServerMockRecorder) GetRetentionPluginConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRetentionPluginConfig", reflect.TypeOf((*MockPluginServiceServer)(nil).GetRetentionPluginConfig), arg0, arg1)
}

// MockDataRetentionPluginServiceClient is a mock of DataRetentionPluginServiceClient interface.
type MockDataRetentionPluginServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockDataRetentionPluginServiceClientMockRecorder
}

// MockDataRetentionPluginServiceClientMockRecorder is the mock recorder for MockDataRetentionPluginServiceClient.
type MockDataRetentionPluginServiceClientMockRecorder struct {
	mock *MockDataRetentionPluginServiceClient
}

// NewMockDataRetentionPluginServiceClient creates a new mock instance.
func NewMockDataRetentionPluginServiceClient(ctrl *gomock.Controller) *MockDataRetentionPluginServiceClient {
	mock := &MockDataRetentionPluginServiceClient{ctrl: ctrl}
	mock.recorder = &MockDataRetentionPluginServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataRetentionPluginServiceClient) EXPECT() *MockDataRetentionPluginServiceClientMockRecorder {
	return m.recorder
}

// CreateRetentionScript mocks base method.
func (m *MockDataRetentionPluginServiceClient) CreateRetentionScript(ctx context.Context, in *pluginpb.CreateRetentionScriptRequest, opts ...grpc.CallOption) (*pluginpb.CreateRetentionScriptResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateRetentionScript", varargs...)
	ret0, _ := ret[0].(*pluginpb.CreateRetentionScriptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRetentionScript indicates an expected call of CreateRetentionScript.
func (mr *MockDataRetentionPluginServiceClientMockRecorder) CreateRetentionScript(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRetentionScript", reflect.TypeOf((*MockDataRetentionPluginServiceClient)(nil).CreateRetentionScript), varargs...)
}

// DeleteRetentionScript mocks base method.
func (m *MockDataRetentionPluginServiceClient) DeleteRetentionScript(ctx context.Context, in *pluginpb.DeleteRetentionScriptRequest, opts ...grpc.CallOption) (*pluginpb.DeleteRetentionScriptResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRetentionScript", varargs...)
	ret0, _ := ret[0].(*pluginpb.DeleteRetentionScriptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRetentionScript indicates an expected call of DeleteRetentionScript.
func (mr *MockDataRetentionPluginServiceClientMockRecorder) DeleteRetentionScript(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRetentionScript", reflect.TypeOf((*MockDataRetentionPluginServiceClient)(nil).DeleteRetentionScript), varargs...)
}

// GetOrgRetentionPluginConfig mocks base method.
func (m *MockDataRetentionPluginServiceClient) GetOrgRetentionPluginConfig(ctx context.Context, in *pluginpb.GetOrgRetentionPluginConfigRequest, opts ...grpc.CallOption) (*pluginpb.GetOrgRetentionPluginConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrgRetentionPluginConfig", varargs...)
	ret0, _ := ret[0].(*pluginpb.GetOrgRetentionPluginConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrgRetentionPluginConfig indicates an expected call of GetOrgRetentionPluginConfig.
func (mr *MockDataRetentionPluginServiceClientMockRecorder) GetOrgRetentionPluginConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrgRetentionPluginConfig", reflect.TypeOf((*MockDataRetentionPluginServiceClient)(nil).GetOrgRetentionPluginConfig), varargs...)
}

// GetRetentionPluginsForOrg mocks base method.
func (m *MockDataRetentionPluginServiceClient) GetRetentionPluginsForOrg(ctx context.Context, in *pluginpb.GetRetentionPluginsForOrgRequest, opts ...grpc.CallOption) (*pluginpb.GetRetentionPluginsForOrgResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRetentionPluginsForOrg", varargs...)
	ret0, _ := ret[0].(*pluginpb.GetRetentionPluginsForOrgResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRetentionPluginsForOrg indicates an expected call of GetRetentionPluginsForOrg.
func (mr *MockDataRetentionPluginServiceClientMockRecorder) GetRetentionPluginsForOrg(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRetentionPluginsForOrg", reflect.TypeOf((*MockDataRetentionPluginServiceClient)(nil).GetRetentionPluginsForOrg), varargs...)
}

// GetRetentionScript mocks base method.
func (m *MockDataRetentionPluginServiceClient) GetRetentionScript(ctx context.Context, in *pluginpb.GetRetentionScriptRequest, opts ...grpc.CallOption) (*pluginpb.GetRetentionScriptResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRetentionScript", varargs...)
	ret0, _ := ret[0].(*pluginpb.GetRetentionScriptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRetentionScript indicates an expected call of GetRetentionScript.
func (mr *MockDataRetentionPluginServiceClientMockRecorder) GetRetentionScript(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRetentionScript", reflect.TypeOf((*MockDataRetentionPluginServiceClient)(nil).GetRetentionScript), varargs...)
}

// GetRetentionScripts mocks base method.
func (m *MockDataRetentionPluginServiceClient) GetRetentionScripts(ctx context.Context, in *pluginpb.GetRetentionScriptsRequest, opts ...grpc.CallOption) (*pluginpb.GetRetentionScriptsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRetentionScripts", varargs...)
	ret0, _ := ret[0].(*pluginpb.GetRetentionScriptsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRetentionScripts indicates an expected call of GetRetentionScripts.
func (mr *MockDataRetentionPluginServiceClientMockRecorder) GetRetentionScripts(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRetentionScripts", reflect.TypeOf((*MockDataRetentionPluginServiceClient)(nil).GetRetentionScripts), varargs...)
}

// UpdateOrgRetentionPluginConfig mocks base method.
func (m *MockDataRetentionPluginServiceClient) UpdateOrgRetentionPluginConfig(ctx context.Context, in *pluginpb.UpdateOrgRetentionPluginConfigRequest, opts ...grpc.CallOption) (*pluginpb.UpdateOrgRetentionPluginConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOrgRetentionPluginConfig", varargs...)
	ret0, _ := ret[0].(*pluginpb.UpdateOrgRetentionPluginConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrgRetentionPluginConfig indicates an expected call of UpdateOrgRetentionPluginConfig.
func (mr *MockDataRetentionPluginServiceClientMockRecorder) UpdateOrgRetentionPluginConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrgRetentionPluginConfig", reflect.TypeOf((*MockDataRetentionPluginServiceClient)(nil).UpdateOrgRetentionPluginConfig), varargs...)
}

// UpdateRetentionScript mocks base method.
func (m *MockDataRetentionPluginServiceClient) UpdateRetentionScript(ctx context.Context, in *pluginpb.UpdateRetentionScriptRequest, opts ...grpc.CallOption) (*pluginpb.UpdateRetentionScriptResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRetentionScript", varargs...)
	ret0, _ := ret[0].(*pluginpb.UpdateRetentionScriptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRetentionScript indicates an expected call of UpdateRetentionScript.
func (mr *MockDataRetentionPluginServiceClientMockRecorder) UpdateRetentionScript(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRetentionScript", reflect.TypeOf((*MockDataRetentionPluginServiceClient)(nil).UpdateRetentionScript), varargs...)
}

// MockDataRetentionPluginServiceServer is a mock of DataRetentionPluginServiceServer interface.
type MockDataRetentionPluginServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockDataRetentionPluginServiceServerMockRecorder
}

// MockDataRetentionPluginServiceServerMockRecorder is the mock recorder for MockDataRetentionPluginServiceServer.
type MockDataRetentionPluginServiceServerMockRecorder struct {
	mock *MockDataRetentionPluginServiceServer
}

// NewMockDataRetentionPluginServiceServer creates a new mock instance.
func NewMockDataRetentionPluginServiceServer(ctrl *gomock.Controller) *MockDataRetentionPluginServiceServer {
	mock := &MockDataRetentionPluginServiceServer{ctrl: ctrl}
	mock.recorder = &MockDataRetentionPluginServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataRetentionPluginServiceServer) EXPECT() *MockDataRetentionPluginServiceServerMockRecorder {
	return m.recorder
}

// CreateRetentionScript mocks base method.
func (m *MockDataRetentionPluginServiceServer) CreateRetentionScript(arg0 context.Context, arg1 *pluginpb.CreateRetentionScriptRequest) (*pluginpb.CreateRetentionScriptResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRetentionScript", arg0, arg1)
	ret0, _ := ret[0].(*pluginpb.CreateRetentionScriptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRetentionScript indicates an expected call of CreateRetentionScript.
func (mr *MockDataRetentionPluginServiceServerMockRecorder) CreateRetentionScript(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRetentionScript", reflect.TypeOf((*MockDataRetentionPluginServiceServer)(nil).CreateRetentionScript), arg0, arg1)
}

// DeleteRetentionScript mocks base method.
func (m *MockDataRetentionPluginServiceServer) DeleteRetentionScript(arg0 context.Context, arg1 *pluginpb.DeleteRetentionScriptRequest) (*pluginpb.DeleteRetentionScriptResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRetentionScript", arg0, arg1)
	ret0, _ := ret[0].(*pluginpb.DeleteRetentionScriptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRetentionScript indicates an expected call of DeleteRetentionScript.
func (mr *MockDataRetentionPluginServiceServerMockRecorder) DeleteRetentionScript(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRetentionScript", reflect.TypeOf((*MockDataRetentionPluginServiceServer)(nil).DeleteRetentionScript), arg0, arg1)
}

// GetOrgRetentionPluginConfig mocks base method.
func (m *MockDataRetentionPluginServiceServer) GetOrgRetentionPluginConfig(arg0 context.Context, arg1 *pluginpb.GetOrgRetentionPluginConfigRequest) (*pluginpb.GetOrgRetentionPluginConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrgRetentionPluginConfig", arg0, arg1)
	ret0, _ := ret[0].(*pluginpb.GetOrgRetentionPluginConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrgRetentionPluginConfig indicates an expected call of GetOrgRetentionPluginConfig.
func (mr *MockDataRetentionPluginServiceServerMockRecorder) GetOrgRetentionPluginConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrgRetentionPluginConfig", reflect.TypeOf((*MockDataRetentionPluginServiceServer)(nil).GetOrgRetentionPluginConfig), arg0, arg1)
}

// GetRetentionPluginsForOrg mocks base method.
func (m *MockDataRetentionPluginServiceServer) GetRetentionPluginsForOrg(arg0 context.Context, arg1 *pluginpb.GetRetentionPluginsForOrgRequest) (*pluginpb.GetRetentionPluginsForOrgResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRetentionPluginsForOrg", arg0, arg1)
	ret0, _ := ret[0].(*pluginpb.GetRetentionPluginsForOrgResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRetentionPluginsForOrg indicates an expected call of GetRetentionPluginsForOrg.
func (mr *MockDataRetentionPluginServiceServerMockRecorder) GetRetentionPluginsForOrg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRetentionPluginsForOrg", reflect.TypeOf((*MockDataRetentionPluginServiceServer)(nil).GetRetentionPluginsForOrg), arg0, arg1)
}

// GetRetentionScript mocks base method.
func (m *MockDataRetentionPluginServiceServer) GetRetentionScript(arg0 context.Context, arg1 *pluginpb.GetRetentionScriptRequest) (*pluginpb.GetRetentionScriptResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRetentionScript", arg0, arg1)
	ret0, _ := ret[0].(*pluginpb.GetRetentionScriptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRetentionScript indicates an expected call of GetRetentionScript.
func (mr *MockDataRetentionPluginServiceServerMockRecorder) GetRetentionScript(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRetentionScript", reflect.TypeOf((*MockDataRetentionPluginServiceServer)(nil).GetRetentionScript), arg0, arg1)
}

// GetRetentionScripts mocks base method.
func (m *MockDataRetentionPluginServiceServer) GetRetentionScripts(arg0 context.Context, arg1 *pluginpb.GetRetentionScriptsRequest) (*pluginpb.GetRetentionScriptsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRetentionScripts", arg0, arg1)
	ret0, _ := ret[0].(*pluginpb.GetRetentionScriptsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRetentionScripts indicates an expected call of GetRetentionScripts.
func (mr *MockDataRetentionPluginServiceServerMockRecorder) GetRetentionScripts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRetentionScripts", reflect.TypeOf((*MockDataRetentionPluginServiceServer)(nil).GetRetentionScripts), arg0, arg1)
}

// UpdateOrgRetentionPluginConfig mocks base method.
func (m *MockDataRetentionPluginServiceServer) UpdateOrgRetentionPluginConfig(arg0 context.Context, arg1 *pluginpb.UpdateOrgRetentionPluginConfigRequest) (*pluginpb.UpdateOrgRetentionPluginConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrgRetentionPluginConfig", arg0, arg1)
	ret0, _ := ret[0].(*pluginpb.UpdateOrgRetentionPluginConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrgRetentionPluginConfig indicates an expected call of UpdateOrgRetentionPluginConfig.
func (mr *MockDataRetentionPluginServiceServerMockRecorder) UpdateOrgRetentionPluginConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrgRetentionPluginConfig", reflect.TypeOf((*MockDataRetentionPluginServiceServer)(nil).UpdateOrgRetentionPluginConfig), arg0, arg1)
}

// UpdateRetentionScript mocks base method.
func (m *MockDataRetentionPluginServiceServer) UpdateRetentionScript(arg0 context.Context, arg1 *pluginpb.UpdateRetentionScriptRequest) (*pluginpb.UpdateRetentionScriptResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRetentionScript", arg0, arg1)
	ret0, _ := ret[0].(*pluginpb.UpdateRetentionScriptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRetentionScript indicates an expected call of UpdateRetentionScript.
func (mr *MockDataRetentionPluginServiceServerMockRecorder) UpdateRetentionScript(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRetentionScript", reflect.TypeOf((*MockDataRetentionPluginServiceServer)(nil).UpdateRetentionScript), arg0, arg1)
}
