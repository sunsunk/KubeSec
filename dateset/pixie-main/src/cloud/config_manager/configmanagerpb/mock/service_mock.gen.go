// Code generated by MockGen. DO NOT EDIT.
// Source: service.pb.go

// Package mock_configmanagerpb is a generated GoMock package.
package mock_configmanagerpb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	configmanagerpb "px.dev/pixie/src/cloud/config_manager/configmanagerpb"
)

// MockConfigManagerServiceClient is a mock of ConfigManagerServiceClient interface.
type MockConfigManagerServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockConfigManagerServiceClientMockRecorder
}

// MockConfigManagerServiceClientMockRecorder is the mock recorder for MockConfigManagerServiceClient.
type MockConfigManagerServiceClientMockRecorder struct {
	mock *MockConfigManagerServiceClient
}

// NewMockConfigManagerServiceClient creates a new mock instance.
func NewMockConfigManagerServiceClient(ctrl *gomock.Controller) *MockConfigManagerServiceClient {
	mock := &MockConfigManagerServiceClient{ctrl: ctrl}
	mock.recorder = &MockConfigManagerServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigManagerServiceClient) EXPECT() *MockConfigManagerServiceClientMockRecorder {
	return m.recorder
}

// GetConfigForOperator mocks base method.
func (m *MockConfigManagerServiceClient) GetConfigForOperator(ctx context.Context, in *configmanagerpb.ConfigForOperatorRequest, opts ...grpc.CallOption) (*configmanagerpb.ConfigForOperatorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConfigForOperator", varargs...)
	ret0, _ := ret[0].(*configmanagerpb.ConfigForOperatorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigForOperator indicates an expected call of GetConfigForOperator.
func (mr *MockConfigManagerServiceClientMockRecorder) GetConfigForOperator(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigForOperator", reflect.TypeOf((*MockConfigManagerServiceClient)(nil).GetConfigForOperator), varargs...)
}

// GetConfigForVizier mocks base method.
func (m *MockConfigManagerServiceClient) GetConfigForVizier(ctx context.Context, in *configmanagerpb.ConfigForVizierRequest, opts ...grpc.CallOption) (*configmanagerpb.ConfigForVizierResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConfigForVizier", varargs...)
	ret0, _ := ret[0].(*configmanagerpb.ConfigForVizierResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigForVizier indicates an expected call of GetConfigForVizier.
func (mr *MockConfigManagerServiceClientMockRecorder) GetConfigForVizier(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigForVizier", reflect.TypeOf((*MockConfigManagerServiceClient)(nil).GetConfigForVizier), varargs...)
}

// MockConfigManagerServiceServer is a mock of ConfigManagerServiceServer interface.
type MockConfigManagerServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockConfigManagerServiceServerMockRecorder
}

// MockConfigManagerServiceServerMockRecorder is the mock recorder for MockConfigManagerServiceServer.
type MockConfigManagerServiceServerMockRecorder struct {
	mock *MockConfigManagerServiceServer
}

// NewMockConfigManagerServiceServer creates a new mock instance.
func NewMockConfigManagerServiceServer(ctrl *gomock.Controller) *MockConfigManagerServiceServer {
	mock := &MockConfigManagerServiceServer{ctrl: ctrl}
	mock.recorder = &MockConfigManagerServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigManagerServiceServer) EXPECT() *MockConfigManagerServiceServerMockRecorder {
	return m.recorder
}

// GetConfigForOperator mocks base method.
func (m *MockConfigManagerServiceServer) GetConfigForOperator(arg0 context.Context, arg1 *configmanagerpb.ConfigForOperatorRequest) (*configmanagerpb.ConfigForOperatorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigForOperator", arg0, arg1)
	ret0, _ := ret[0].(*configmanagerpb.ConfigForOperatorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigForOperator indicates an expected call of GetConfigForOperator.
func (mr *MockConfigManagerServiceServerMockRecorder) GetConfigForOperator(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigForOperator", reflect.TypeOf((*MockConfigManagerServiceServer)(nil).GetConfigForOperator), arg0, arg1)
}

// GetConfigForVizier mocks base method.
func (m *MockConfigManagerServiceServer) GetConfigForVizier(arg0 context.Context, arg1 *configmanagerpb.ConfigForVizierRequest) (*configmanagerpb.ConfigForVizierResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigForVizier", arg0, arg1)
	ret0, _ := ret[0].(*configmanagerpb.ConfigForVizierResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigForVizier indicates an expected call of GetConfigForVizier.
func (mr *MockConfigManagerServiceServerMockRecorder) GetConfigForVizier(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigForVizier", reflect.TypeOf((*MockConfigManagerServiceServer)(nil).GetConfigForVizier), arg0, arg1)
}
