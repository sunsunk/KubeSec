# Copyright 2018- The Pixie Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

# flake8: noqa:E501

import pxtrace
import px

# Adapted from https://github.com/iovisor/bpftrace/blob/master/tools/tcpdrop.bt
# Due to backported changes (i.e. the kprobe:tcp_drop was removed in older versions of the kernel),
# the old bpftrace script may not work on some older kernels <5.19.
pre_519_program = pxtrace.TraceProgram("""
// tcpdrop.bt   Trace TCP kernel-dropped packets/segments.
//              For Linux, uses bpftrace and eBPF.
//
// Copyright (c) 2018 Dale Hamel.
// Licensed under the Apache License, Version 2.0 (the "License")

#include <linux/socket.h>
#include <net/sock.h>

BEGIN
{
  // See https://github.com/torvalds/linux/blob/master/include/net/tcp_states.h
  @tcp_states[1] = "ESTABLISHED";
  @tcp_states[2] = "SYN_SENT";
  @tcp_states[3] = "SYN_RECV";
  @tcp_states[4] = "FIN_WAIT1";
  @tcp_states[5] = "FIN_WAIT2";
  @tcp_states[6] = "TIME_WAIT";
  @tcp_states[7] = "CLOSE";
  @tcp_states[8] = "CLOSE_WAIT";
  @tcp_states[9] = "LAST_ACK";
  @tcp_states[10] = "LISTEN";
  @tcp_states[11] = "CLOSING";
  @tcp_states[12] = "NEW_SYN_RECV";
}

kprobe:tcp_drop
{
  $sk = ((struct sock *) arg0);
  $inet_family = $sk->__sk_common.skc_family;

  $AF_INET = (uint16) 2;
  $AF_INET6 = (uint16) 10;

  if ($inet_family == $AF_INET || $inet_family == $AF_INET6) {
    if ($inet_family == $AF_INET) {
      $daddr = ntop($sk->__sk_common.skc_daddr);
      $saddr = ntop($sk->__sk_common.skc_rcv_saddr);
    } else {
      $daddr = ntop($sk->__sk_common.skc_v6_daddr.in6_u.u6_addr8);
      $saddr = ntop($sk->__sk_common.skc_v6_rcv_saddr.in6_u.u6_addr8);
    }
    $sport = $sk->__sk_common.skc_num;
    $dport = $sk->__sk_common.skc_dport;

    // Destination port is big endian, it must be flipped
    $dport = ($dport >> 8) | (($dport << 8) & 0x00FF00);

    $state = $sk->__sk_common.skc_state;
    $statestr = @tcp_states[$state];

    printf(\"time_:%llu pid:%u pid_start_time:%llu src_ip:%s src_port:%d dst_ip:%s dst_port:%d state:%s\",
      nsecs,
      pid,
      ((struct task_struct*)curtask)->group_leader->start_time / 10000000,
      $saddr,
      $sport,
      $daddr,
      $dport,
      $statestr);
  }
}
""",
max_kernel='5.18'
)

post_519_program = pxtrace.TraceProgram(
"""
// tcpdrop.bt   Trace TCP kernel-dropped packets/segments.
//              For Linux, uses bpftrace and eBPF.
//
// Copyright (c) 2018 Dale Hamel.
// Licensed under the Apache License, Version 2.0 (the "License")

#include <linux/socket.h>
#include <net/sock.h>

BEGIN
{
  // See https://github.com/torvalds/linux/blob/master/include/net/tcp_states.h
  @tcp_states[1] = "ESTABLISHED";
  @tcp_states[2] = "SYN_SENT";
  @tcp_states[3] = "SYN_RECV";
  @tcp_states[4] = "FIN_WAIT1";
  @tcp_states[5] = "FIN_WAIT2";
  @tcp_states[6] = "TIME_WAIT";
  @tcp_states[7] = "CLOSE";
  @tcp_states[8] = "CLOSE_WAIT";
  @tcp_states[9] = "LAST_ACK";
  @tcp_states[10] = "LISTEN";
  @tcp_states[11] = "CLOSING";
  @tcp_states[12] = "NEW_SYN_RECV";
}

tracepoint:skb:kfree_skb
{
  $reason = args->reason;
  $skb = (struct sk_buff *)args->skbaddr;
  $sk = ((struct sock *) $skb->sk);
  $inet_family = $sk->__sk_common.skc_family;

  if ($reason > SKB_DROP_REASON_NOT_SPECIFIED &&
      ($inet_family == AF_INET || $inet_family == AF_INET6)) {
    if ($inet_family == AF_INET) {
      $daddr = ntop($sk->__sk_common.skc_daddr);
      $saddr = ntop($sk->__sk_common.skc_rcv_saddr);
    } else {
      $daddr = ntop($sk->__sk_common.skc_v6_daddr.in6_u.u6_addr8);
      $saddr = ntop($sk->__sk_common.skc_v6_rcv_saddr.in6_u.u6_addr8);
    }
    $lport = $sk->__sk_common.skc_num;
    $dport = $sk->__sk_common.skc_dport;

    // Destination port is big endian, it must be flipped
    $dport = bswap($dport);

    $state = $sk->__sk_common.skc_state;
    $statestr = @tcp_states[$state];

    printf(\"time_:%llu pid:%u pid_start_time:%llu src_ip:%s src_port:%d dst_ip:%s dst_port:%d state:%s\",
      nsecs,
      pid,
      ((struct task_struct*)curtask)->group_leader->start_time / 10000000,
      $saddr,
      $lport,
      $daddr,
      $dport,
      $statestr);
  }
}
""",
min_kernel='5.19'
)


def tcp_drops_func():
    table_name = 'tcp_drop_table'
    pxtrace.UpsertTracepoint('tcp_drop_tracer',
                             table_name,
                             [pre_519_program, post_519_program],
                             pxtrace.kprobe(),
                             "10m")

    df = px.DataFrame(table=table_name)

    # Convert IPs to domain names.
    df.src = px.pod_id_to_pod_name(px.ip_to_pod_id(df.src_ip))
    df.src = px.select(df.src == '', df.src_ip, df.src)
    df.dst = px.nslookup(df.dst_ip)

    # Count drops.
    df = df.groupby(['src', 'dst']).agg(drops=('src', px.count))

    # Filter for a particular service, if desired.
    df = df[px.contains(df['dst'], '')]

    # Set a threshold to display, if desired.
    df = df[df['drops'] > 0]

    return df
