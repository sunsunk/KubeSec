# Copyright 2018- The Pixie Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

import pxtrace
import px

program = """
#include <linux/sched.h>

tracepoint:syscalls:sys_enter_exec*
{
    printf("time_:%u pid:%d pid_start_time:%d ppid:%d ppid_start_time:%d filename:%s argv0:%s argv1:%s",
           nsecs,
           pid,
           ((struct task_struct*)curtask)->group_leader->start_time / 10000000,
           ((struct task_struct*)curtask)->parent->pid,
           ((struct task_struct*)curtask)->parent->group_leader->start_time / 10000000,
           str(args->filename), str(args->argv[0]), str(args->argv[1]));
}
"""


def add_pod_name(df):
    proc = px.DataFrame(table='process_stats')
    proc.pod = proc.ctx['pod']
    proc.pid = px.upid_to_pid(proc.upid)
    proc.asid = px.upid_to_asid(proc.upid)
    proc = proc.groupby(['pod', 'pid', 'asid']).agg()

    # Resolve the pod name of the PID.
    df = df.merge(proc,
                  how='left',
                  left_on=['pid', 'asid'],
                  right_on=['pid', 'asid'],
                  suffixes=['', '_x'])

    df = df.drop(['pid_x', 'asid_x'])

    # Resolve the pod name of the parent PID (PPID).
    df = df.merge(proc,
                  how='left',
                  left_on=['ppid', 'asid'],
                  right_on=['pid', 'asid'],
                  suffixes=['', '_x'])

    df.parent_pod = df.pod_x
    df = df.drop(['pid_x', 'asid_x'])

    return df


def exec_snoop_func(command_substr: str):
    table_name = 'exec_table'
    pxtrace.UpsertTracepoint('exec_tracer',
                             table_name,
                             program,
                             pxtrace.kprobe(),
                             "5m")
    df = px.DataFrame(table=table_name)

    # Grab the node from exec_hostname instead of `ctx`, because not all PIDs have a pod.
    df.node = px._exec_hostname()

    # Filter for the requested commands.
    df = df[px.contains(df.filename, command_substr)]

    # Try to add the pod name, if available. If pod is not matched, the field will be blank.
    df.asid = px.asid()
    df = add_pod_name(df)

    return df['time_', 'node', 'pid', 'pod', 'ppid', 'parent_pod', 'filename', 'argv0', 'argv1']
