# Copyright 2018- The Pixie Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

''' Namespaces Overview

This view lists the namespaces on the current cluster and their pod and service counts.
It also lists the high-level resource consumption by namespace.

'''
import px
import pxviews

ns_per_ms = 1000 * 1000
ns_per_s = 1000 * ns_per_ms
# Window size to use on time_ column for bucketing.
window_ns = px.DurationNanos(10 * ns_per_s)


def namespaces_for_cluster(start_time: str):
    ''' Gets a list of namespaces in the current cluster since `start_time`.

    Args:
    @start_time Start time of the data to examine.
    '''
    df = pxviews.pod_resource_stats(start_time, px.now())
    pod_count = df.groupby('namespace').agg(pod_count=('pod', px.count))
    services = df.groupby(['namespace', 'service']).agg()
    service_count = services.groupby('namespace').agg(service_count=('service', px.count))
    df = pod_count.merge(service_count, how='inner', left_on='namespace', right_on='namespace', suffixes=('', '_x'))
    return df[['namespace', 'pod_count', 'service_count']]


def process_stats_by_namespace(start_time: str):
    ''' Gets a summary of process stats by namespace since `start_time`.
        Computes the total I/O consumption across the namespace since `start_time`.

    Args:
    @start_time Start time of the data to examine.
    '''
    df = pxviews.pod_resource_stats(start_time, px.now())
    df = df.groupby('namespace').agg(
        vsize=('vsize', px.sum),
        rss=('rss', px.sum),
        actual_disk_read_throughput=('actual_disk_read_throughput', px.sum),
        actual_disk_write_throughput=('actual_disk_write_throughput', px.sum),
        total_disk_read_throughput=('total_disk_read_throughput', px.sum),
        total_disk_write_throughput=('total_disk_write_throughput', px.sum),
    )

    return df[[
        'namespace',
        'vsize',
        'rss',
        'actual_disk_read_throughput',
        'actual_disk_write_throughput',
        'total_disk_read_throughput',
        'total_disk_write_throughput',
    ]]
