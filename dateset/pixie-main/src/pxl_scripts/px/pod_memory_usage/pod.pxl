# Copyright 2018- The Pixie Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

import px

###############################################################
# The following can be edited to k8s object and name to match.
###############################################################
# The Kubernetes object to filter on.
#    Options are ['pod', 'service']
k8s_object = 'pod'

# If you want to filter the object by name, enter the partial
# or full name here.
match_name = ''
###############################################################

#
# Get the virtual and real memory usage for each pod/svc
# in the cluster.
#
t1 = px.DataFrame(table='process_stats', start_time='-1m')
t1.timestamp = px.bin(t1.time_, px.seconds(10))
t1[k8s_object] = t1.ctx[k8s_object]

t1 = t1[px.contains(t1[k8s_object], match_name)]

upid_aggop = t1.groupby(['upid', k8s_object, 'timestamp']).agg(
    vsize=('vsize_bytes', px.mean),
    rss=('rss_bytes', px.mean),
)

# For this aggregate, we sum up the values as we've already calculated the average/usage
# for the upids already, just need to do it for the entire svc.
aggop = upid_aggop.groupby([k8s_object, 'timestamp']).agg(
    vsize=('vsize', px.sum),
    rss=('rss', px.sum),
)

# Format column names.
aggop['Virtual Memory'] = aggop.vsize
aggop['Average Memory'] = aggop.rss
keep_columns = aggop[[
    k8s_object,
    'timestamp',
    'Virtual Memory',
    'Average Memory'
]]

px.display(keep_columns)
