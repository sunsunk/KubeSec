# Copyright 2018- The Pixie Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

''' DNS Overview Map
Shows DNS requests made by pods, clustered by name prefix.
'''
import px


def dns_queries(start_time: str, namespace: str, pod_filter: str,
                query_filter: str, dns_server_filter: str):
    df = px.DataFrame('dns_events', start_time=start_time)

    # Client-side tracing only.
    df = df[df.trace_role == 1]
    df = df.drop(['trace_role'])

    # Add context.
    df.pod = df.ctx['pod']
    df.service = df.ctx['service']
    df.namespace = df.ctx['namespace']
    df = df.drop(['upid'])

    # Filter by namesapce
    df = df[px.contains(df.namespace, namespace)]

    # Extract some fields into their own columns for convenience.
    df.req_body = px.pluck(df.req_body, "queries")
    df.resp_body = px.pluck(df.resp_body, "answers")
    df.rcode = px.pluck_int64(df.resp_header, "rcode")
    df.resolved = px.contains(df.resp_body, "name")

    # Get the query prefix up to the first "."
    df.idxa = px.find(df.req_body, "\"name\":")
    df.idxz = px.find(df.req_body, ".")
    df.qname = px.substring(df.req_body, df.idxa + 8, df.idxz - df.idxa - 8)
    df = df.drop(['idxa', 'idxz'])

    # Convert DNS IP to string.
    df.dns_server = px.nslookup(df.remote_addr)

    # Apply user-filters on the data.
    df = df[px.contains(df.pod, pod_filter)]
    df = df[px.contains(df.qname, query_filter)]
    df = df[px.contains(df.dns_server, dns_server_filter)]

    # Before aggregating, output individual requests to drawer.
    px.debug(df, "events")

    # Aggregate by each pod making a query to a particular DNS.
    df.nxdomain = df.rcode == 3
    df = df.groupby(['pod', 'dns_server', 'qname']).agg(
        num_requests=('resolved', px.count),
        num_resolved=('resolved', px.sum),
        num_nxdomain=('nxdomain', px.sum),
    )

    # Compute percentages.
    df.unresolved_rate = px.Percent((df.num_requests - df.num_resolved) / df.num_requests)
    df.nxdomain_rate = px.Percent((df.num_nxdomain) / df.num_requests)
    df.qgroup = df.qname + " @" + df.dns_server

    return df
