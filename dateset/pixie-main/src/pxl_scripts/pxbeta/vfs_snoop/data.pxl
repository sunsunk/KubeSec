# Copyright 2018- The Pixie Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

import pxtrace
import px

program = """
#include <linux/sched.h>
#include <linux/file.h>
#include <linux/fs.h>
#include <linux/dcache.h>

kprobe:vfs_write
{
  $file = (struct file*)arg0;

  $dentry = $file->f_path.dentry;
  $filename = str($dentry->d_name.name);

  $parent1_dentry = $dentry->d_parent;
  $parent1_filename = str($parent1_dentry->d_name.name);

  $parent2_dentry = $parent1_dentry->d_parent;
  $parent2_filename = str($parent2_dentry->d_name.name);

  printf(\"time_:%d pid:%d pid_start_time:%d op:%s filename:%s d1:%s d2:%s\",
        nsecs,
        pid,
        ((struct task_struct*)curtask)->group_leader->start_time / 10000000,
        "write",
        $filename,
        $parent1_filename,
        $parent2_filename);
}

kprobe:vfs_unlink
{
  $dentry = (struct dentry*)arg1;
  $filename = str($dentry->d_name.name);

  $parent1_dentry = $dentry->d_parent;
  $parent1_filename = str($parent1_dentry->d_name.name);

  $parent2_dentry = $parent1_dentry->d_parent;
  $parent2_filename = str($parent2_dentry->d_name.name);

  printf(\"time_:%d pid:%d pid_start_time:%d op:%s filename:%s d1:%s d2:%s\",
        nsecs,
        pid,
        ((struct task_struct*)curtask)->group_leader->start_time / 10000000,
        "delete",
        $filename,
        $parent1_filename,
        $parent2_filename);
}
"""


def add_pod_name(df):
    proc = px.DataFrame(table='process_stats')
    proc.pod = proc.ctx['pod']
    proc.pid = px.upid_to_pid(proc.upid)
    proc.asid = px.upid_to_asid(proc.upid)
    proc = proc.groupby(['pod', 'pid', 'asid']).agg()

    df = df.merge(proc,
                  how='left',
                  left_on=['pid', 'asid'],
                  right_on=['pid', 'asid'],
                  suffixes=['', '_x'])

    return df


def exec_snoop_func(path_substr: str):
    table_name = 'vfs_table'
    pxtrace.UpsertTracepoint('vfs_tracer',
                             table_name,
                             program,
                             pxtrace.kprobe(),
                             "5m")
    df = px.DataFrame(table=table_name)

    # Grab the node from exec_hostname instead of `ctx`, because not all PIDs have a pod.
    df.node = px._exec_hostname()

    # Try to add the pod name, if available. If pod is not matched, the field will be blank.
    df.asid = px.asid()
    df = add_pod_name(df)

    # Filter to paths that are two-levels only (i.e. /dir/file)
    df = df[df.d2 == "/" and not df.d1 == "/"]

    # Build the path.
    df.path = "/" + df.d1 + "/" + df.filename
    df = df.drop(['filename', 'd1', 'd2'])

    # Filter for the requested commands.
    df = df[px.contains(df.path, path_substr)]

    return df['time_', 'node', 'pid', 'pod', 'op', 'path']
