# Copyright 2018- The Pixie Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

''' DNS Traffic FQDN List
Lists external, fully qualified domain names (FQDNs) from all
DNS traffic on the cluster for a specified amount of time.
'''
import px


def fqdn_list(start_time: str):

    # The dns_events table pairs DNS requests with their responses.
    df = px.DataFrame(table='dns_events', start_time=start_time)

    # Parse the DNS response to determine if it was successfully resolved.
    df.resp_body = px.pluck(df.resp_body, 'answers')
    df.request_resolved = px.contains(df.resp_body, 'name')

    # Filter for resolved requests.
    df = df[df.request_resolved]

    # Parse the DNS request for query name.
    # TODO: cleanup this logic when we support object types.
    df.req_body = px.pluck(df.req_body, 'queries')
    df.idx1 = px.find(df.req_body, '\"name\":')
    df.idz = px.length(df.req_body) - (df.idx1 + 8) - 3
    df.fqdn_partial = px.substring(df.req_body, df.idx1 + 8, df.idz)
    df.idx2 = px.find(df.fqdn_partial, ',')
    df.fqdn = px.substring(df.fqdn_partial, 0, df.idx2 - 1)

    # Filter out local domain queries:
    # If your k8s cluster uses a different internal domain suffix, add it here.
    df = df[not px.contains(df.fqdn, '.local')]
    df = df[not px.contains(df.fqdn, '.internal')]

    # Add link to script that will show all requests for specific query.
    df.link = px.script_reference('All DNS requests containing FQDN as substring',
                                  'sotw/dns_queries_filtered', {
                                      'start_time': start_time,
                                      'query_name_filter': df.fqdn
                                  })

    # Group by (fqdn, link) and count number of requests.
    df = df.groupby(['fqdn', 'link']).agg(
        num_requests=('request_resolved', px.count)
    )

    return df
