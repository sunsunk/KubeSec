// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/shared/scriptspb/scripts.proto

package scriptspb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	typespb "px.dev/pixie/src/shared/types/typespb"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FuncArgsSpec struct {
	Args []*FuncArgsSpec_Arg `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty"`
}

func (m *FuncArgsSpec) Reset()      { *m = FuncArgsSpec{} }
func (*FuncArgsSpec) ProtoMessage() {}
func (*FuncArgsSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_4aa89baec43fda2f, []int{0}
}
func (m *FuncArgsSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FuncArgsSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FuncArgsSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FuncArgsSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FuncArgsSpec.Merge(m, src)
}
func (m *FuncArgsSpec) XXX_Size() int {
	return m.Size()
}
func (m *FuncArgsSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_FuncArgsSpec.DiscardUnknown(m)
}

var xxx_messageInfo_FuncArgsSpec proto.InternalMessageInfo

func (m *FuncArgsSpec) GetArgs() []*FuncArgsSpec_Arg {
	if m != nil {
		return m.Args
	}
	return nil
}

type FuncArgsSpec_Arg struct {
	DataType     typespb.DataType     `protobuf:"varint,1,opt,name=data_type,json=dataType,proto3,enum=px.types.DataType" json:"data_type,omitempty"`
	SemanticType typespb.SemanticType `protobuf:"varint,2,opt,name=semantic_type,json=semanticType,proto3,enum=px.types.SemanticType" json:"semantic_type,omitempty"`
	Name         string               `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	DefaultValue string               `protobuf:"bytes,5,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
}

func (m *FuncArgsSpec_Arg) Reset()      { *m = FuncArgsSpec_Arg{} }
func (*FuncArgsSpec_Arg) ProtoMessage() {}
func (*FuncArgsSpec_Arg) Descriptor() ([]byte, []int) {
	return fileDescriptor_4aa89baec43fda2f, []int{0, 0}
}
func (m *FuncArgsSpec_Arg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FuncArgsSpec_Arg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FuncArgsSpec_Arg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FuncArgsSpec_Arg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FuncArgsSpec_Arg.Merge(m, src)
}
func (m *FuncArgsSpec_Arg) XXX_Size() int {
	return m.Size()
}
func (m *FuncArgsSpec_Arg) XXX_DiscardUnknown() {
	xxx_messageInfo_FuncArgsSpec_Arg.DiscardUnknown(m)
}

var xxx_messageInfo_FuncArgsSpec_Arg proto.InternalMessageInfo

func (m *FuncArgsSpec_Arg) GetDataType() typespb.DataType {
	if m != nil {
		return m.DataType
	}
	return typespb.DATA_TYPE_UNKNOWN
}

func (m *FuncArgsSpec_Arg) GetSemanticType() typespb.SemanticType {
	if m != nil {
		return m.SemanticType
	}
	return typespb.ST_UNSPECIFIED
}

func (m *FuncArgsSpec_Arg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FuncArgsSpec_Arg) GetDefaultValue() string {
	if m != nil {
		return m.DefaultValue
	}
	return ""
}

func init() {
	proto.RegisterType((*FuncArgsSpec)(nil), "px.shared.scriptspb.FuncArgsSpec")
	proto.RegisterType((*FuncArgsSpec_Arg)(nil), "px.shared.scriptspb.FuncArgsSpec.Arg")
}

func init() {
	proto.RegisterFile("src/shared/scriptspb/scripts.proto", fileDescriptor_4aa89baec43fda2f)
}

var fileDescriptor_4aa89baec43fda2f = []byte{
	// 310 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2a, 0x2e, 0x4a, 0xd6,
	0x2f, 0xce, 0x48, 0x2c, 0x4a, 0x4d, 0xd1, 0x2f, 0x4e, 0x2e, 0xca, 0x2c, 0x28, 0x29, 0x2e, 0x48,
	0x82, 0xb1, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x84, 0x0b, 0x2a, 0xf4, 0x20, 0x4a, 0xf4,
	0xe0, 0x4a, 0xa4, 0x54, 0x90, 0x34, 0x96, 0x54, 0x16, 0xa4, 0x16, 0x43, 0xc8, 0x82, 0x24, 0x08,
	0x0d, 0xd1, 0xaa, 0xf4, 0x83, 0x91, 0x8b, 0xc7, 0xad, 0x34, 0x2f, 0xd9, 0xb1, 0x28, 0xbd, 0x38,
	0xb8, 0x20, 0x35, 0x59, 0xc8, 0x92, 0x8b, 0x25, 0xb1, 0x28, 0xbd, 0x58, 0x82, 0x51, 0x81, 0x59,
	0x83, 0xdb, 0x48, 0x55, 0x0f, 0x8b, 0xd1, 0x7a, 0xc8, 0x1a, 0xf4, 0x1c, 0x8b, 0xd2, 0x83, 0xc0,
	0x5a, 0xa4, 0xd6, 0x30, 0x72, 0x31, 0x3b, 0x16, 0xa5, 0x0b, 0xe9, 0x73, 0x71, 0xa6, 0x24, 0x96,
	0x24, 0xc6, 0x83, 0xec, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x33, 0x12, 0x02, 0x99, 0x03, 0xb1,
	0xd7, 0x25, 0xb1, 0x24, 0x31, 0xa4, 0xb2, 0x20, 0x35, 0x88, 0x23, 0x05, 0xca, 0x12, 0xb2, 0xe6,
	0xe2, 0x2d, 0x4e, 0xcd, 0x4d, 0xcc, 0x2b, 0xc9, 0x4c, 0x86, 0x68, 0x62, 0x02, 0x6b, 0x12, 0x43,
	0x68, 0x0a, 0x86, 0x4a, 0x83, 0x35, 0xf2, 0x14, 0x23, 0xf1, 0x84, 0x84, 0xb8, 0x58, 0xf2, 0x12,
	0x73, 0x53, 0x25, 0x98, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x21, 0x65, 0x2e, 0xde, 0x94,
	0xd4, 0xb4, 0xc4, 0xd2, 0x9c, 0x92, 0xf8, 0xb2, 0xc4, 0x9c, 0xd2, 0x54, 0x09, 0x56, 0xb0, 0x24,
	0x0f, 0x54, 0x30, 0x0c, 0x24, 0xe6, 0x64, 0x7f, 0xe1, 0xa1, 0x1c, 0xc3, 0x8d, 0x87, 0x72, 0x0c,
	0x1f, 0x1e, 0xca, 0x31, 0x36, 0x3c, 0x92, 0x63, 0x5c, 0xf1, 0x48, 0x8e, 0xf1, 0xc4, 0x23, 0x39,
	0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x7c, 0xf1, 0x48, 0x8e, 0xe1, 0xc3, 0x23,
	0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x8a,
	0x13, 0x1e, 0x0c, 0x49, 0x6c, 0xe0, 0x20, 0x34, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xaa, 0xbb,
	0xf9, 0x4e, 0xa3, 0x01, 0x00, 0x00,
}

func (this *FuncArgsSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FuncArgsSpec)
	if !ok {
		that2, ok := that.(FuncArgsSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Args) != len(that1.Args) {
		return false
	}
	for i := range this.Args {
		if !this.Args[i].Equal(that1.Args[i]) {
			return false
		}
	}
	return true
}
func (this *FuncArgsSpec_Arg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FuncArgsSpec_Arg)
	if !ok {
		that2, ok := that.(FuncArgsSpec_Arg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DataType != that1.DataType {
		return false
	}
	if this.SemanticType != that1.SemanticType {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.DefaultValue != that1.DefaultValue {
		return false
	}
	return true
}
func (this *FuncArgsSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&scriptspb.FuncArgsSpec{")
	if this.Args != nil {
		s = append(s, "Args: "+fmt.Sprintf("%#v", this.Args)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FuncArgsSpec_Arg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&scriptspb.FuncArgsSpec_Arg{")
	s = append(s, "DataType: "+fmt.Sprintf("%#v", this.DataType)+",\n")
	s = append(s, "SemanticType: "+fmt.Sprintf("%#v", this.SemanticType)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "DefaultValue: "+fmt.Sprintf("%#v", this.DefaultValue)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringScripts(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *FuncArgsSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FuncArgsSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FuncArgsSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		for iNdEx := len(m.Args) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Args[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintScripts(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FuncArgsSpec_Arg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FuncArgsSpec_Arg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FuncArgsSpec_Arg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DefaultValue) > 0 {
		i -= len(m.DefaultValue)
		copy(dAtA[i:], m.DefaultValue)
		i = encodeVarintScripts(dAtA, i, uint64(len(m.DefaultValue)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintScripts(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SemanticType != 0 {
		i = encodeVarintScripts(dAtA, i, uint64(m.SemanticType))
		i--
		dAtA[i] = 0x10
	}
	if m.DataType != 0 {
		i = encodeVarintScripts(dAtA, i, uint64(m.DataType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintScripts(dAtA []byte, offset int, v uint64) int {
	offset -= sovScripts(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FuncArgsSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Args) > 0 {
		for _, e := range m.Args {
			l = e.Size()
			n += 1 + l + sovScripts(uint64(l))
		}
	}
	return n
}

func (m *FuncArgsSpec_Arg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataType != 0 {
		n += 1 + sovScripts(uint64(m.DataType))
	}
	if m.SemanticType != 0 {
		n += 1 + sovScripts(uint64(m.SemanticType))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovScripts(uint64(l))
	}
	l = len(m.DefaultValue)
	if l > 0 {
		n += 1 + l + sovScripts(uint64(l))
	}
	return n
}

func sovScripts(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozScripts(x uint64) (n int) {
	return sovScripts(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FuncArgsSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForArgs := "[]*FuncArgsSpec_Arg{"
	for _, f := range this.Args {
		repeatedStringForArgs += strings.Replace(fmt.Sprintf("%v", f), "FuncArgsSpec_Arg", "FuncArgsSpec_Arg", 1) + ","
	}
	repeatedStringForArgs += "}"
	s := strings.Join([]string{`&FuncArgsSpec{`,
		`Args:` + repeatedStringForArgs + `,`,
		`}`,
	}, "")
	return s
}
func (this *FuncArgsSpec_Arg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FuncArgsSpec_Arg{`,
		`DataType:` + fmt.Sprintf("%v", this.DataType) + `,`,
		`SemanticType:` + fmt.Sprintf("%v", this.SemanticType) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`DefaultValue:` + fmt.Sprintf("%v", this.DefaultValue) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringScripts(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FuncArgsSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScripts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FuncArgsSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FuncArgsSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScripts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScripts
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScripts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, &FuncArgsSpec_Arg{})
			if err := m.Args[len(m.Args)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScripts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScripts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FuncArgsSpec_Arg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScripts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Arg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Arg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			m.DataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScripts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataType |= typespb.DataType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SemanticType", wireType)
			}
			m.SemanticType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScripts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SemanticType |= typespb.SemanticType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScripts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScripts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScripts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScripts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScripts
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScripts
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScripts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthScripts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipScripts(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowScripts
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScripts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScripts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthScripts
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupScripts
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthScripts
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthScripts        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowScripts          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupScripts = fmt.Errorf("proto: unexpected end of group")
)
