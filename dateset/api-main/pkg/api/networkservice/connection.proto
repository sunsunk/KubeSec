// Copyright 2018 Red Hat, Inc.
// Copyright (c) 2018 Cisco and/or its affiliates.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This contains the core Network Service Mesh API definitions for external
// consumption via gRPC protobufs.

syntax = "proto3";

package connection;
option go_package = "github.com/networkservicemesh/api/pkg/api/networkservice";

import "google/protobuf/timestamp.proto";
import "connectioncontext.proto";

message Mechanism {
  string cls = 1;
  string type = 2;
  map<string, string> parameters = 3;
}

enum State {
  // UP - Endpoint sets the connection state to UP when it successfully
  // establishes the connection.
  UP = 0;
  // DOWN - Monitor Connection Server sets the connection state to DOWN
  // when the connection is broken (for example, one of the NSM components is dead).
  // Monitor Connection Server also sets the DOWN state for the deleted connections.
  DOWN = 1;
  // REFRESH_REQUESTED - This state indicates the server's connection parameters have 
  // been changed and the client should make a refresh to get them. 
  REFRESH_REQUESTED = 2;
  // RESELECT_REQUESTED - This state indicates the client wants to use another endpoint
  // for the connection. The client can set this state when it loses the connection.
  RESELECT_REQUESTED = 3;
}

message PathSegment {
  string name      = 1;
  string id        = 2;
  string token = 3;
  google.protobuf.Timestamp expires = 4;
  map<string, string> metrics = 5;
}
message Path {
  uint32 index = 1;
  repeated PathSegment path_segments = 2;
}

message Connection {
  string id = 1;
  string network_service = 2;
  Mechanism mechanism = 3;
  connectioncontext.ConnectionContext context = 4;
  map<string, string> labels = 5;
  Path path = 6;
  string network_service_endpoint_name = 7;
  string payload = 8;
  State state = 9;
}

enum ConnectionEventType {
  // INITIAL_STATE_TRANSFER - Monitor Connection Server immediately sends event 
  // with this type to a client when the client makes MonitorConnections Request. 
  // Event with this type contains all connections that Monitor Connection Server 
  // currently has.
  INITIAL_STATE_TRANSFER = 0;
  // UPDATE - Monitor Connection Server sends event with this type when the 
  // connection changes. For exapmle, when the state of the connection has been changed.
  UPDATE = 1;
  // DELETE - Monitor Connection Server sends event with this type when the connection
  // has been closed.
  DELETE = 2;
}

message ConnectionEvent {
  ConnectionEventType type = 1;
  map<string, Connection> connections = 2;
}

message MonitorScopeSelector {
  repeated PathSegment path_segments = 1;
}

service MonitorConnection {
  rpc MonitorConnections(MonitorScopeSelector) returns (stream ConnectionEvent);
}
