[build-system]
# Dependabot cannot do `build-system.requires` (dependabot/dependabot-core#8465)
# workaround to get reproducibility and auto-updates:
#   PIP_CONSTRAINT=requirements/build.txt python3 -m build ...
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "in-toto"
description = "A framework to define and secure the integrity of software supply chains"
readme = "README.md"
license = "Apache-2.0"
requires-python = "~=3.8"
authors = [
    { name = "New York University: Secure Systems Lab", email = "in-toto-dev@googlegroups.com" },
]
keywords = [
    "security",
    "software",
    "supply chain",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: POSIX",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Security",
    "Topic :: Software Development",
]
dependencies = [
    "attrs",
    "iso8601",
    "pathspec",
    "python-dateutil",
    "securesystemslib[crypto]>=0.31.0",
]
dynamic = ["version"]

[project.optional-dependencies]
# Install pynacl as optional dependency to use with securesystemslib, as a
# workaround for `"ssl-pynacl": ["securesystemslib[pynacl]>=0.11.3"]`,
# which currently is not supported in "extra_require" (see pypa/pip#4957).
# TODO: Keep track of changes (version, additional requirements) under the
# "pynacl" key in securesystemslib's setup.py.
# https://github.com/secure-systems-lab/securesystemslib/blob/master/setup.py#L101
pynacl = [
    "pynacl>1.2.0",
]

[project.scripts]
in-toto-mock = "in_toto.in_toto_mock:main"
in-toto-record = "in_toto.in_toto_record:main"
in-toto-run = "in_toto.in_toto_run:main"
in-toto-sign = "in_toto.in_toto_sign:main"
in-toto-verify = "in_toto.in_toto_verify:main"
in-toto-match-products = "in_toto.in_toto_match_products:main"

[project.urls]
"Bug Reports" = "https://github.com/in-toto/in-toto/issues"
Homepage = "https://in-toto.io"
Source = "https://github.com/in-toto/in-toto"

[tool.hatch.version]
path = "in_toto/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/in_toto",
    "/tests",
    "/.coveragerc",
    "/tox.ini",
    "/requirements*.txt",
]

[tool.black]
line-length=80

[tool.isort]
profile="black"
line_length=80
known_first_party = ["in_toto"]

# Minimal pylint configuration file for Secure Systems Lab Python Style Guide:
#     https://github.com/secure-systems-lab/code-style-guidelines
#
# Based on Google Python Style Guide pylintrc and pylint defaults:
#     https://google.github.io/styleguide/pylintrc
#     http://pylint.pycqa.org/en/latest/technical_reference/features.html
#
[tool.pylint.message_control]
# Disable the message, report, category or checker with the given id(s).
# NOTE: To keep this config as short as possible we only disable checks that
# are currently in conflict with our code. If new code displeases the linter
# (for good reasons) consider updating this config file, or disable checks with.
disable=[
  "fixme",
  "too-few-public-methods",
  "too-many-arguments",
  "format",
  "duplicate-code",
  "consider-using-f-string"
]

[tool.pylint.basic]
good-names = ["i","j","k","v","e","f","fn","fp","_type","_"]
# Regexes for allowed names are copied from the Google pylintrc
# NOTE: Pylint captures regex name groups such as 'snake_case' or 'camel_case'.
# If there are multiple groups it enfoces the prevalent naming style inside
# each modules. Names in the exempt capturing group are ignored.
function-rgx="^(?:(?P<exempt>setUp|tearDown|setUpModule|tearDownModule)|(?P<camel_case>_?[A-Z][a-zA-Z0-9]*)|(?P<snake_case>_?[a-z][a-z0-9_]*))$"
method-rgx="(?x)^(?:(?P<exempt>_[a-z0-9_]+__|runTest|setUp|tearDown|setUpTestCase|tearDownTestCase|setupSelf|tearDownClass|setUpClass|(test|assert)_*[A-Z0-9][a-zA-Z0-9_]*|next)|(?P<camel_case>_{0,2}[A-Z][a-zA-Z0-9_]*)|(?P<snake_case>_{0,2}[a-z][a-z0-9_]*))$"
argument-rgx="^[a-z][a-z0-9_]*$"
attr-rgx="^_{0,2}[a-z][a-z0-9_]*$"
class-attribute-rgx="^(_?[A-Z][A-Z0-9_]*|__[a-z0-9_]+__|_?[a-z][a-z0-9_]*)$"
class-rgx="^_?[A-Z][a-zA-Z0-9]*$"
const-rgx="^(_?[A-Z][A-Z0-9_]*|__[a-z0-9_]+__|_?[a-z][a-z0-9_]*)$"
inlinevar-rgx="^[a-z][a-z0-9_]*$"
module-rgx="^(_?[a-z][a-z0-9_]*|__init__)$"
no-docstring-rgx="(__.*__|main|test.*|.*test|.*Test)$"
variable-rgx="^[a-z][a-z0-9_]*$"
docstring-min-length=10

[tool.pylint.logging]
logging-format-style="old"

[tool.pylint.miscellaneous]
notes="TODO"

[tool.pylint.STRING]
check-quote-consistency="yes"
