/*
 * A workflow represents the work that has to be executed on a particular
 * hardware.
 */
syntax = "proto3";

option go_package = "github.com/tinkerbell/tink/internal/proto";

package proto;

import "google/protobuf/timestamp.proto";

/*
 * WorkflowService exposes various capabilities when it comes to starting and
 * monitoring a workflow
 */
service WorkflowService {
  rpc GetWorkflowContexts(WorkflowContextRequest) returns (stream WorkflowContext) {}
  rpc GetWorkflowActions(WorkflowActionsRequest) returns (WorkflowActionList) {}
  rpc ReportActionStatus(WorkflowActionStatus) returns (Empty) {}
}

message Empty {}

message WorkflowContextRequest {
  string worker_id = 1;
}

/*
 * The various state a workflow can be
 */
 enum State {
  /*
   * A workflow is in pending state when it is waiting for the hardware to pick
   * it up and start the execution.
  */
  STATE_PENDING = 0;
  /*
   * A workflow is in a running state when the tink-worker started the
   * exeuction of it, and it is currently in execution inside the device
   * itself.
   */
  STATE_RUNNING = 1;
  /*
   * Failed is a final state. Something wrong happened during the execution of
   * the workflow inside the target. Have a look at the logs to see if you can
   * spot what is going on.
   */
  STATE_FAILED = 2;
  /*
   * Timeout is final state, almost like FAILED but it communicate to you that
   * an action or the overall workflow reached the specified timeout.
   */
  STATE_TIMEOUT = 3;
  /*
   * This is the state we all deserve. The execution of the workflow is over
   * and everything is just fine. Sit down, and enjoy your great work.
   */
  STATE_SUCCESS = 4;
}

/*
 * WorkflowContext represents the state of the execution of this workflow in detail.
 * How many tasks are currently executed, the number of actions and their state.
 */
message WorkflowContext {
  /*
   * The workflow ID
   */
  string workflow_id = 1;

  string current_worker = 2;

  string current_task = 3;
  /*
   * the name of the current action
   */
  string current_action = 4;
  /*
   * The index of the current action
   */
  int64 current_action_index = 5;
  /*
   * The state of the current action
   */
  State current_action_state = 6;

  int64 total_number_of_actions = 7;
}

/*
 * WorkflowActionsRequest is used to get actions for a particular workflow
 */
message WorkflowActionsRequest {
  string workflow_id = 1;
}

/*
 * A list of actions
 */
message WorkflowActionList {
  repeated WorkflowAction action_list = 1;
}

/*
 * WorkflowAction represents a single aciton part of a workflow
 */
message WorkflowAction {
  /*
   * The name of the task the action belong to.
   */
  string task_name = 1;
  /*
   * The name of the action
   */
  string name = 2;
  /*
   * The docker/oci image the action starts from
   */
  string image = 3;
  /*
   * Every action has a timeout, after that the execution stops and the action
   * gets in a timeout state.
   */
  int64 timeout = 4;
  /*
   * You can override the command executed for the container
   */
  repeated string command = 5;
  /*
   * On timeout used to be a way to execute an action if the current one times out
   * but with the event system in place this is not needed anymore
   */
  repeated string on_timeout = 6;
  /*
   * On failure used to be a way to execute an action if the current one fails
   * but with the event system in place this is not needed anymore
   */
  repeated string on_failure = 7;
  string worker_id = 8;
  /*
   * You can mount directory from your host to the running action, mainly to
   * share files, or state
   */
  repeated string volumes = 9;
  /*
   * Set environment variables usable from the action itself.
   */
  repeated string environment = 10;
    /*
   * Set the namespace that the process IDs will be in.
   */
  string pid = 11;
}

/*
 * WorkflowActionStatus represents the state of all the action part of a
 * workflow
 */
 message WorkflowActionStatus {
  /*
   * The workflow id
   */
  string workflow_id = 1;
  /*
   * The name of the task this action is part of
   */
  string task_name = 2;
  /*
   * The name of the action
   */
  string action_name = 3;
  /*
   * The state of the action. Those are the same described for workflow as
   * well. pending, running, successful and so on.
   */
  State action_status = 4;
  /*
   * The execution time for the action
   */
  int64 seconds = 5;
  /*
   * The message returned from the action.
   */
  string message = 6;
  /*
   * When the status got created for this aciton. You can see it as the time
   * when the action started its execution inside the hardware itself.
   */
  google.protobuf.Timestamp created_at = 7;

  string worker_id = 8;
}