// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: internal/proto/workflow.proto

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkflowServiceClient is the client API for WorkflowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkflowServiceClient interface {
	GetWorkflowContexts(ctx context.Context, in *WorkflowContextRequest, opts ...grpc.CallOption) (WorkflowService_GetWorkflowContextsClient, error)
	GetWorkflowActions(ctx context.Context, in *WorkflowActionsRequest, opts ...grpc.CallOption) (*WorkflowActionList, error)
	ReportActionStatus(ctx context.Context, in *WorkflowActionStatus, opts ...grpc.CallOption) (*Empty, error)
}

type workflowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkflowServiceClient(cc grpc.ClientConnInterface) WorkflowServiceClient {
	return &workflowServiceClient{cc}
}

func (c *workflowServiceClient) GetWorkflowContexts(ctx context.Context, in *WorkflowContextRequest, opts ...grpc.CallOption) (WorkflowService_GetWorkflowContextsClient, error) {
	stream, err := c.cc.NewStream(ctx, &WorkflowService_ServiceDesc.Streams[0], "/proto.WorkflowService/GetWorkflowContexts", opts...)
	if err != nil {
		return nil, err
	}
	x := &workflowServiceGetWorkflowContextsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WorkflowService_GetWorkflowContextsClient interface {
	Recv() (*WorkflowContext, error)
	grpc.ClientStream
}

type workflowServiceGetWorkflowContextsClient struct {
	grpc.ClientStream
}

func (x *workflowServiceGetWorkflowContextsClient) Recv() (*WorkflowContext, error) {
	m := new(WorkflowContext)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workflowServiceClient) GetWorkflowActions(ctx context.Context, in *WorkflowActionsRequest, opts ...grpc.CallOption) (*WorkflowActionList, error) {
	out := new(WorkflowActionList)
	err := c.cc.Invoke(ctx, "/proto.WorkflowService/GetWorkflowActions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowServiceClient) ReportActionStatus(ctx context.Context, in *WorkflowActionStatus, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.WorkflowService/ReportActionStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowServiceServer is the server API for WorkflowService service.
// All implementations should embed UnimplementedWorkflowServiceServer
// for forward compatibility
type WorkflowServiceServer interface {
	GetWorkflowContexts(*WorkflowContextRequest, WorkflowService_GetWorkflowContextsServer) error
	GetWorkflowActions(context.Context, *WorkflowActionsRequest) (*WorkflowActionList, error)
	ReportActionStatus(context.Context, *WorkflowActionStatus) (*Empty, error)
}

// UnimplementedWorkflowServiceServer should be embedded to have forward compatible implementations.
type UnimplementedWorkflowServiceServer struct{}

func (UnimplementedWorkflowServiceServer) GetWorkflowContexts(*WorkflowContextRequest, WorkflowService_GetWorkflowContextsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetWorkflowContexts not implemented")
}

func (UnimplementedWorkflowServiceServer) GetWorkflowActions(context.Context, *WorkflowActionsRequest) (*WorkflowActionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowActions not implemented")
}

func (UnimplementedWorkflowServiceServer) ReportActionStatus(context.Context, *WorkflowActionStatus) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportActionStatus not implemented")
}

// UnsafeWorkflowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkflowServiceServer will
// result in compilation errors.
type UnsafeWorkflowServiceServer interface {
	mustEmbedUnimplementedWorkflowServiceServer()
}

func RegisterWorkflowServiceServer(s grpc.ServiceRegistrar, srv WorkflowServiceServer) {
	s.RegisterService(&WorkflowService_ServiceDesc, srv)
}

func _WorkflowService_GetWorkflowContexts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WorkflowContextRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkflowServiceServer).GetWorkflowContexts(m, &workflowServiceGetWorkflowContextsServer{stream})
}

type WorkflowService_GetWorkflowContextsServer interface {
	Send(*WorkflowContext) error
	grpc.ServerStream
}

type workflowServiceGetWorkflowContextsServer struct {
	grpc.ServerStream
}

func (x *workflowServiceGetWorkflowContextsServer) Send(m *WorkflowContext) error {
	return x.ServerStream.SendMsg(m)
}

func _WorkflowService_GetWorkflowActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).GetWorkflowActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WorkflowService/GetWorkflowActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).GetWorkflowActions(ctx, req.(*WorkflowActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkflowService_ReportActionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkflowActionStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowServiceServer).ReportActionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WorkflowService/ReportActionStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowServiceServer).ReportActionStatus(ctx, req.(*WorkflowActionStatus))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkflowService_ServiceDesc is the grpc.ServiceDesc for WorkflowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkflowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.WorkflowService",
	HandlerType: (*WorkflowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWorkflowActions",
			Handler:    _WorkflowService_GetWorkflowActions_Handler,
		},
		{
			MethodName: "ReportActionStatus",
			Handler:    _WorkflowService_ReportActionStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetWorkflowContexts",
			Handler:       _WorkflowService_GetWorkflowContexts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/proto/workflow.proto",
}
