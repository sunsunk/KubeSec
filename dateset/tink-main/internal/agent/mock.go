// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package agent

import (
	"context"
	"sync"

	"github.com/tinkerbell/tink/internal/agent/transport"
	"github.com/tinkerbell/tink/internal/agent/workflow"
)

// Ensure, that TransportMock does implement Transport.
// If this is not the case, regenerate this file with moq.
var _ Transport = &TransportMock{}

// TransportMock is a mock implementation of Transport.
//
//	func TestSomethingThatUsesTransport(t *testing.T) {
//
//		// make and configure a mocked Transport
//		mockedTransport := &TransportMock{
//			StartFunc: func(contextMoqParam context.Context, agentID string, workflowHandler transport.WorkflowHandler) error {
//				panic("mock out the Start method")
//			},
//		}
//
//		// use mockedTransport in code that requires Transport
//		// and then make assertions.
//
//	}
type TransportMock struct {
	// StartFunc mocks the Start method.
	StartFunc func(contextMoqParam context.Context, agentID string, workflowHandler transport.WorkflowHandler) error

	// calls tracks calls to the methods.
	calls struct {
		// Start holds details about calls to the Start method.
		Start []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// AgentID is the agentID argument value.
			AgentID string
			// WorkflowHandler is the workflowHandler argument value.
			WorkflowHandler transport.WorkflowHandler
		}
	}
	lockStart sync.RWMutex
}

// Start calls StartFunc.
func (mock *TransportMock) Start(contextMoqParam context.Context, agentID string, workflowHandler transport.WorkflowHandler) error {
	if mock.StartFunc == nil {
		panic("TransportMock.StartFunc: method is nil but Transport.Start was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		AgentID         string
		WorkflowHandler transport.WorkflowHandler
	}{
		ContextMoqParam: contextMoqParam,
		AgentID:         agentID,
		WorkflowHandler: workflowHandler,
	}
	mock.lockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	mock.lockStart.Unlock()
	return mock.StartFunc(contextMoqParam, agentID, workflowHandler)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//
//	len(mockedTransport.StartCalls())
func (mock *TransportMock) StartCalls() []struct {
	ContextMoqParam context.Context
	AgentID         string
	WorkflowHandler transport.WorkflowHandler
} {
	var calls []struct {
		ContextMoqParam context.Context
		AgentID         string
		WorkflowHandler transport.WorkflowHandler
	}
	mock.lockStart.RLock()
	calls = mock.calls.Start
	mock.lockStart.RUnlock()
	return calls
}

// Ensure, that ContainerRuntimeMock does implement ContainerRuntime.
// If this is not the case, regenerate this file with moq.
var _ ContainerRuntime = &ContainerRuntimeMock{}

// ContainerRuntimeMock is a mock implementation of ContainerRuntime.
//
//	func TestSomethingThatUsesContainerRuntime(t *testing.T) {
//
//		// make and configure a mocked ContainerRuntime
//		mockedContainerRuntime := &ContainerRuntimeMock{
//			RunFunc: func(contextMoqParam context.Context, action workflow.Action) error {
//				panic("mock out the Run method")
//			},
//		}
//
//		// use mockedContainerRuntime in code that requires ContainerRuntime
//		// and then make assertions.
//
//	}
type ContainerRuntimeMock struct {
	// RunFunc mocks the Run method.
	RunFunc func(contextMoqParam context.Context, action workflow.Action) error

	// calls tracks calls to the methods.
	calls struct {
		// Run holds details about calls to the Run method.
		Run []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Action is the action argument value.
			Action workflow.Action
		}
	}
	lockRun sync.RWMutex
}

// Run calls RunFunc.
func (mock *ContainerRuntimeMock) Run(contextMoqParam context.Context, action workflow.Action) error {
	if mock.RunFunc == nil {
		panic("ContainerRuntimeMock.RunFunc: method is nil but ContainerRuntime.Run was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Action          workflow.Action
	}{
		ContextMoqParam: contextMoqParam,
		Action:          action,
	}
	mock.lockRun.Lock()
	mock.calls.Run = append(mock.calls.Run, callInfo)
	mock.lockRun.Unlock()
	return mock.RunFunc(contextMoqParam, action)
}

// RunCalls gets all the calls that were made to Run.
// Check the length with:
//
//	len(mockedContainerRuntime.RunCalls())
func (mock *ContainerRuntimeMock) RunCalls() []struct {
	ContextMoqParam context.Context
	Action          workflow.Action
} {
	var calls []struct {
		ContextMoqParam context.Context
		Action          workflow.Action
	}
	mock.lockRun.RLock()
	calls = mock.calls.Run
	mock.lockRun.RUnlock()
	return calls
}
