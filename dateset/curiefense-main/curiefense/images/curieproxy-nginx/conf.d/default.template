upstream backend_a {
    server ${TARGET_ADDRESS_A}:${TARGET_PORT_A};
}

upstream backend_b {
    server ${TARGET_ADDRESS_B}:${TARGET_PORT_B};
}

server {
    resolver local=on;
    set $request_map '{}';
    access_log ${NGINX_ACCESS_LOG} curiefenselog;
    error_log  ${NGINX_ERROR_LOG}  ${NGINX_LOG_LEVEL};

    listen 31081 default_server;
    listen 31083 default_server ssl http2;
    ssl_certificate /etc/ssl/certificate.crt;
    ssl_certificate_key /etc/ssl/certificate.key;

    server_name _;
    location / {
        access_by_lua_block {
            local session = require "lua.session_nginx"
            session.inspect(ngx, "${CF_LOG_LEVEL}")
        }
        log_by_lua_block {
            local session = require "lua.session_nginx"
            session.log(ngx, {
                [ "bytes_sent" ] = ngx.var.bytes_sent,
                [ "request_length" ] = ngx.var.request_length,
                [ "ssl_protocol" ] = ngx.var.ssl_protocol,
                [ "ssl_cipher" ] = ngx.var.ssl_cipher,
                [ "request_time" ] = ngx.var.request_time,
                [ "upstream_status" ] = ngx.var.upstream_status,
                [ "upstream_response_time" ] = ngx.var.upstream_response_time,
                [ "upstream_addr" ] = ngx.var.upstream_addr,
                ["request_id"] = ngx.var.request_id,
                ["status"] = ngx.var.status
            })
        }
        proxy_pass http://backend_a;
    }
}

server {
    resolver local=on;
    set $request_map '{}';
    access_log ${NGINX_ACCESS_LOG} curiefenselog;
    error_log  ${NGINX_ERROR_LOG}  debug;

    listen 31082 default_server;
    listen 31084 default_server ssl http2;
    ssl_certificate /etc/ssl/certificate.crt;
    ssl_certificate_key /etc/ssl/certificate.key;

    server_name _;
    location / {
        access_by_lua_block {
            local session = require "lua.session_nginx"
            session.inspect(ngx, "${CF_LOG_LEVEL}")
        }
        log_by_lua_block {
            local session = require "lua.session_nginx"
            session.log(ngx, {
                [ "bytes_sent" ] = ngx.var.bytes_sent,
                [ "request_length" ] = ngx.var.request_length,
                [ "ssl_protocol" ] = ngx.var.ssl_protocol,
                [ "ssl_cipher" ] = ngx.var.ssl_cipher,
                [ "request_time" ] = ngx.var.request_time,
                [ "upstream_status" ] = ngx.var.upstream_status,
                [ "upstream_response_time" ] = ngx.var.upstream_response_time,
                [ "upstream_addr" ] = ngx.var.upstream_addr
            })
        }
        proxy_pass http://backend_b;
    }
}
