env REDIS_HOST;
env REDIS_PORT;
env REDIS_KEY_PREFIX;
env PAGEINFO_PATH;
# env XFF_TRUSTED_HOPS=1;

pcre_jit on;

worker_processes auto;

worker_rlimit_nofile 100000;

events {
    worker_connections  100000;
    use epoll;
}

http {

    lua_package_path '/lua/?.lua;;';
    lua_regex_cache_max_entries 51200;
    lua_shared_dict rglobals 250m; # use this for production

    log_format curiefenselog escape=none '$request_map';
    log_format aggregationlog escape=none '$aggregated';

    include mime.types;
    default_type  application/octet-stream;
    # do not provide nginx server versions
    server_tokens   off;
    # use sendfile()
    sendfile        on;
    tcp_nopush on;
    # speed vs. bandwidth
    tcp_nodelay on;

    server_names_hash_max_size 512000;
    server_names_hash_bucket_size 128;

    proxy_headers_hash_bucket_size  1024;
    proxy_buffer_size   128k;
    proxy_buffers   4 256k;
    proxy_busy_buffers_size   256k;
    variables_hash_bucket_size 128;

    gzip on;
    gzip_http_version  1.0;
    gzip_comp_level    5;
    gzip_min_length    1500;
    gzip_proxied       any;
    gzip_vary          on;
    gzip_types          application/atom+xml
                        application/ecmascript
                        application/javascript
                        application/json
                        application/rdf+xml
                        application/rss+xml
                        application/soap+xml
                        application/vnd.ms-fontobject
                        application/x-font-ttf
                        application/x-javascript
                        application/x-web-app-manifest+json
                        application/xhtml+xml
                        application/xml
                        application/xml+rss
                        application/xml-dtd
                        application/xop+xml
                        font/opentype
                        image/svg+xml
                        image/x-icon
                        text/css
                        text/csv
                        text/javascript
                        text/plain
                        text/xml;


    client_body_temp_path /var/run/openresty/nginx-client-body;
    proxy_temp_path       /var/run/openresty/nginx-proxy;

    proxy_cache_bypass 1;
    proxy_no_cache 1;


    real_ip_recursive   on;
    set_real_ip_from    127.0.0.0/8;
    set_real_ip_from    172.16.0.0/12;
    set_real_ip_from    10.0.0.0/8;
    real_ip_header    x-forwarded-for;
    
    ssl_session_timeout 5m;
    proxy_ssl_name $http_host;
    ssl_session_cache shared:SSL:10m;
    proxy_ssl_server_name on;

    proxy_ignore_client_abort on;
    underscores_in_headers on;

    map $http_upgrade $connection_upgrade {
        default '';
        ~*.+ Upgrade;
    }

    server {
        resolver local=on;
        error_log  ${NGINX_ERROR_LOG}  ${NGINX_LOG_LEVEL};

        listen 8998;

        server_name config_notif.curiefense.io;
        location / {
            access_by_lua_block {
                local curiefense  = require "curiefense"
                ngx.req.read_body()
                local changes = ngx.req.get_body_data()
                local returned = curiefense.lua_reload_conf(changes)
                if returned then
                    ngx.say(returned)
                    ngx.exit(500)
                else
                    ngx.say("nginx config reloaded")
                    ngx.exit(200)
                end
            }
        }
    }
    server {
        resolver local=on;
        access_log ${AGGREGATED_STATS_LOG_FILE} aggregationlog;
        error_log  ${NGINX_ERROR_LOG}  ${NGINX_LOG_LEVEL};

        listen 8999;

        set $aggregated '{}';

        # allow nginx to start before conf.d/*.con arrives
        set $request_map '{}';

        server_name metrics.curiefense.io;
        location / {
            access_by_lua_block {
                local curiefense  = require "curiefense"
                local agg = curiefense.aggregated_values()
                ngx.var.aggregated = agg
                ngx.header["content-type"] = "text/json"
                ngx.say(agg)
                ngx.exit(200)
            }
        }
    }

    include /etc/nginx/conf.d/*.conf;
}
