admin:
  access_log_path: "/dev/null"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8001
static_resources:
  listeners:
  - name: listener_0
    address:
      socket_address:
        protocol: TCP
        address: 0.0.0.0
        port_value: 80
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          scheme_header_transformation:
            scheme_to_overwrite: https
          stat_prefix: ingress_http
          codec_type: auto
          use_remote_address: true
          skip_xff_append: false
          access_log:
            name: envoy.file_access_log
            typed_config:
              "@type": "type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog"
              path: /dev/stdout
              log_format:
                text_format_source:
                  inline_string: "%DYNAMIC_METADATA(com.reblaze.curiefense:request.info)%\n"
                content_type: "application/json"
          route_config:
            name: local_route
            virtual_hosts:
            - name: target_site_a
              domains: ["*"]
              routes:
              - match:
                  prefix: "/"
                route:
                  cluster: target_site_a
                metadata:
                  filter_metadata:
                    envoy.filters.http.lua:
                      xff_trusted_hops: XFF_TRUSTED
          http_filters:
          - name: envoy.filters.http.lua
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
              default_source_code:
                inline_string: |
                  local session = require "lua.session_envoy"
                  function envoy_on_request(handle)
                    session.inspect(handle)
                  end
                  function envoy_on_response(handle)
                    session.on_response(handle)
                  end
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

  - name: secondary
    address:
      socket_address:
        address: 0.0.0.0
        port_value: 81
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: ingress_http
          codec_type: auto
          use_remote_address: true
          skip_xff_append: false
          access_log:
            name: "envoy.access_loggers.tcp_grpc"
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.grpc.v3.HttpGrpcAccessLogConfig
              common_config:
                log_name: "test_GRPC_log"
                transport_api_version: "v3"
                grpc_service:
                  envoy_grpc:
                    cluster_name: grpc_log_cluster
          route_config:
            name: local_route
            virtual_hosts:
            - name: target_site_b
              domains: ["*"]
              routes:
              - match:
                  prefix: "/"
                route:
                  cluster: target_site_b
                metadata:
                  filter_metadata:
                    envoy.filters.http.lua:
                      xff_trusted_hops: XFF_TRUSTED
          http_filters:
          - name: envoy.filters.http.lua
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
              default_source_code:
                inline_string: |
                  local session = require "lua.session_envoy"
                  function envoy_on_request(handle)
                    session.inspect(handle)
                  end
                  function envoy_on_response(handle)
                    session.on_response(handle)
                  end
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router


  - name: config_reload
    address:
      socket_address:
        protocol: TCP
        address: 0.0.0.0
        port_value: 8998
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          scheme_header_transformation:
            scheme_to_overwrite: https
          stat_prefix: ingress_http
          codec_type: auto
          use_remote_address: true
          skip_xff_append: false
          access_log:
            name: envoy.config_reload
            typed_config:
              "@type": "type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog"
              path: /dev/stdout
              log_format:
                text_format_source:
                  inline_string: "%DYNAMIC_METADATA(com.reblaze.curiefense:request.info)%\n"
                content_type: "application/json"
          route_config:
            name: local_route
          http_filters:
          - name: envoy.filters.http.lua
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
              default_source_code:
                inline_string: |
                  local curiefense = require "curiefense"
                  function envoy_on_request(handle)
                    local hbody = handle:body()
                    local body_content = nil
                    if hbody then
                        body_content = hbody:getBytes(0, hbody:length())
                    end
                    local returned = curiefense.lua_reload_conf(body_content)
                    if returned then
                      handle:logError(returned)
                      handle:respond( { [":status"] = "500" }, returned)
                    else
                      handle:respond( { [":status"] = "200" }, "envoy config reloaded\n")
                    end
                  end
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
