name: "Build and Unit test"
on:
  pull_request_target:
env:
  HOMEBREW_NO_INSTALL_FROM_API:
jobs:
  macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: "${{ github.event.pull_request.head.sha }}"
      - uses: actions/setup-go@v5
        with:
          go-version: stable
      - name: "Install dependencies"
        env:
          HOMEBREW_NO_INSTALL_FROM_API: ""
        run: |
          brew untap homebrew/core || true
          brew untap homebrew/cask || true
          brew update
          brew install --cask macfuse
      - name: Lint
        run: make lint
      - name: "Test arm64 build"
        run: GOARCH=arm64 make build
      - name: "Test amd64 build"
        run: make build
      - name: Run tests
        uses: nick-fields/retry/@v3
        with:
          max_attempts: 3
          timeout_minutes: 12
          command: make check-unit

  windows:
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: "${{ github.event.pull_request.head.sha }}"
      - uses: actions/setup-go@v5
        with:
          go-version: stable
      - name: "Download winfsp"
        uses: nick-fields/retry/@v3
        with:
          max_attempts: 5
          timeout_minutes: 1
          shell: bash
          command: make winfsp.msi
      - name: "Download wintun"
        uses: nick-fields/retry/@v3
        with:
          max_attempts: 5
          timeout_minutes: 1
          shell: bash
          command: make wintun.dll
      - name: install make
        uses: nick-fields/retry/@v3
        with:
          max_attempts: 5
          timeout_minutes: 1
          command: choco install make
      - name: "Install winfsp"
        shell: powershell
        run: |
          Start-Process msiexec -Wait -verb runAs -Args "/i build-output\\winfsp.msi /passive /qn /L*V winfsp-install.log"
          [Environment]::SetEnvironmentVariable("Path", "C:\\Program Files (x86)\\WinFsp\\inc\\fuse;$ENV:Path", "Machine")
      - name: Build
        run: make build
      - name: Lint
        run: make lint
      - name: Run tests
        uses: nick-fields/retry/@v3
        with:
          max_attempts: 3
          timeout_minutes: 12
          command: |
            $ENV:DTEST_KUBECONFIG = "${{ steps.kluster.outputs.kubeconfig }}"
            $ENV:DTEST_REGISTRY = "docker.io/datawire"
            make check-unit

  linux-amd64:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: "${{ github.event.pull_request.head.sha }}"
      - uses: actions/setup-go@v5
        with:
          go-version: stable
      - run: |
          sudo rm -f /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y socat make jq
      - name: Lint
        run: make lint
      - name: "Test amd64 build"
        run: make build
      - name: Run tests
        uses: nick-fields/retry/@v3
        with:
          max_attempts: 3
          timeout_minutes: 10
          command: |
            make check-unit

  linux-arm64:
    runs-on: ubuntu-arm64
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: "${{ github.event.pull_request.head.sha }}"
      - uses: actions/setup-go@v5
        with:
          go-version: stable
      - run: |
          sudo rm -f /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update
          sudo apt-get install -y socat gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu make jq
      - name: Lint
        run: make lint
      - name: "Test arm64 build"
        run: GOARCH=arm64 CC=aarch64-linux-gnu-gcc make build
      - name: Run tests
        uses: nick-fields/retry/@v3
        with:
          max_attempts: 3
          timeout_minutes: 10
          command: |
            make check-unit
