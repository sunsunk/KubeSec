// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: agent/agent.proto

// The "agent" package describes the server implemented by the
// in-cluster Agent

package agent

import (
	context "context"
	manager "github.com/telepresenceio/telepresence/rpc/v2/manager"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Agent_Tunnel_FullMethodName    = "/telepresence.agent.Agent/Tunnel"
	Agent_Version_FullMethodName   = "/telepresence.agent.Agent/Version"
	Agent_WatchDial_FullMethodName = "/telepresence.agent.Agent/WatchDial"
)

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentClient interface {
	Tunnel(ctx context.Context, opts ...grpc.CallOption) (Agent_TunnelClient, error)
	// Version returns the version information of the Manager.
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*manager.VersionInfo2, error)
	// WatchDial makes it possible for the client side to receive DialRequests
	// from the traffic-agent. Requests are sent when an intercepted agent needs
	// a Tunnel to the Telepresence client on the workstation. The receiver of
	// the request dials a connection and responds with the needed Tunnel.
	WatchDial(ctx context.Context, in *manager.SessionInfo, opts ...grpc.CallOption) (Agent_WatchDialClient, error)
}

type agentClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentClient(cc grpc.ClientConnInterface) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) Tunnel(ctx context.Context, opts ...grpc.CallOption) (Agent_TunnelClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[0], Agent_Tunnel_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &agentTunnelClient{stream}
	return x, nil
}

type Agent_TunnelClient interface {
	Send(*manager.TunnelMessage) error
	Recv() (*manager.TunnelMessage, error)
	grpc.ClientStream
}

type agentTunnelClient struct {
	grpc.ClientStream
}

func (x *agentTunnelClient) Send(m *manager.TunnelMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *agentTunnelClient) Recv() (*manager.TunnelMessage, error) {
	m := new(manager.TunnelMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*manager.VersionInfo2, error) {
	out := new(manager.VersionInfo2)
	err := c.cc.Invoke(ctx, Agent_Version_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) WatchDial(ctx context.Context, in *manager.SessionInfo, opts ...grpc.CallOption) (Agent_WatchDialClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[1], Agent_WatchDial_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &agentWatchDialClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Agent_WatchDialClient interface {
	Recv() (*manager.DialRequest, error)
	grpc.ClientStream
}

type agentWatchDialClient struct {
	grpc.ClientStream
}

func (x *agentWatchDialClient) Recv() (*manager.DialRequest, error) {
	m := new(manager.DialRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgentServer is the server API for Agent service.
// All implementations must embed UnimplementedAgentServer
// for forward compatibility
type AgentServer interface {
	Tunnel(Agent_TunnelServer) error
	// Version returns the version information of the Manager.
	Version(context.Context, *emptypb.Empty) (*manager.VersionInfo2, error)
	// WatchDial makes it possible for the client side to receive DialRequests
	// from the traffic-agent. Requests are sent when an intercepted agent needs
	// a Tunnel to the Telepresence client on the workstation. The receiver of
	// the request dials a connection and responds with the needed Tunnel.
	WatchDial(*manager.SessionInfo, Agent_WatchDialServer) error
	mustEmbedUnimplementedAgentServer()
}

// UnimplementedAgentServer must be embedded to have forward compatible implementations.
type UnimplementedAgentServer struct {
}

func (UnimplementedAgentServer) Tunnel(Agent_TunnelServer) error {
	return status.Errorf(codes.Unimplemented, "method Tunnel not implemented")
}
func (UnimplementedAgentServer) Version(context.Context, *emptypb.Empty) (*manager.VersionInfo2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedAgentServer) WatchDial(*manager.SessionInfo, Agent_WatchDialServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchDial not implemented")
}
func (UnimplementedAgentServer) mustEmbedUnimplementedAgentServer() {}

// UnsafeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServer will
// result in compilation errors.
type UnsafeAgentServer interface {
	mustEmbedUnimplementedAgentServer()
}

func RegisterAgentServer(s grpc.ServiceRegistrar, srv AgentServer) {
	s.RegisterService(&Agent_ServiceDesc, srv)
}

func _Agent_Tunnel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServer).Tunnel(&agentTunnelServer{stream})
}

type Agent_TunnelServer interface {
	Send(*manager.TunnelMessage) error
	Recv() (*manager.TunnelMessage, error)
	grpc.ServerStream
}

type agentTunnelServer struct {
	grpc.ServerStream
}

func (x *agentTunnelServer) Send(m *manager.TunnelMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *agentTunnelServer) Recv() (*manager.TunnelMessage, error) {
	m := new(manager.TunnelMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Agent_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_WatchDial_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(manager.SessionInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).WatchDial(m, &agentWatchDialServer{stream})
}

type Agent_WatchDialServer interface {
	Send(*manager.DialRequest) error
	grpc.ServerStream
}

type agentWatchDialServer struct {
	grpc.ServerStream
}

func (x *agentWatchDialServer) Send(m *manager.DialRequest) error {
	return x.ServerStream.SendMsg(m)
}

// Agent_ServiceDesc is the grpc.ServiceDesc for Agent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "telepresence.agent.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _Agent_Version_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Tunnel",
			Handler:       _Agent_Tunnel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "WatchDial",
			Handler:       _Agent_WatchDial_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "agent/agent.proto",
}
