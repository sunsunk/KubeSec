// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/telepresenceio/telepresence/v2/pkg/authenticator (interfaces: ExecCredentialsResolver)

// Package mock_authenticator is a generated GoMock package.
package mock_authenticator

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "k8s.io/client-go/tools/clientcmd/api"
)

// MockExecCredentialsResolver is a mock of ExecCredentialsResolver interface.
type MockExecCredentialsResolver struct {
	ctrl     *gomock.Controller
	recorder *MockExecCredentialsResolverMockRecorder
}

// MockExecCredentialsResolverMockRecorder is the mock recorder for MockExecCredentialsResolver.
type MockExecCredentialsResolverMockRecorder struct {
	mock *MockExecCredentialsResolver
}

// NewMockExecCredentialsResolver creates a new mock instance.
func NewMockExecCredentialsResolver(ctrl *gomock.Controller) *MockExecCredentialsResolver {
	mock := &MockExecCredentialsResolver{ctrl: ctrl}
	mock.recorder = &MockExecCredentialsResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecCredentialsResolver) EXPECT() *MockExecCredentialsResolverMockRecorder {
	return m.recorder
}

// Resolve mocks base method.
func (m *MockExecCredentialsResolver) Resolve(arg0 context.Context, arg1 *api.ExecConfig) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resolve indicates an expected call of Resolve.
func (mr *MockExecCredentialsResolverMockRecorder) Resolve(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockExecCredentialsResolver)(nil).Resolve), arg0, arg1)
}
