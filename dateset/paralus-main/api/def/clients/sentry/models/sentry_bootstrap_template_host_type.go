// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SentryBootstrapTemplateHostType sentry bootstrap template host type
//
// swagger:model sentryBootstrapTemplateHostType
type SentryBootstrapTemplateHostType string

func NewSentryBootstrapTemplateHostType(value SentryBootstrapTemplateHostType) *SentryBootstrapTemplateHostType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SentryBootstrapTemplateHostType.
func (m SentryBootstrapTemplateHostType) Pointer() *SentryBootstrapTemplateHostType {
	return &m
}

const (

	// SentryBootstrapTemplateHostTypeHostTypeNotSet captures enum value "HostTypeNotSet"
	SentryBootstrapTemplateHostTypeHostTypeNotSet SentryBootstrapTemplateHostType = "HostTypeNotSet"

	// SentryBootstrapTemplateHostTypeHostTypeInternal captures enum value "HostTypeInternal"
	SentryBootstrapTemplateHostTypeHostTypeInternal SentryBootstrapTemplateHostType = "HostTypeInternal"

	// SentryBootstrapTemplateHostTypeHostTypeExternal captures enum value "HostTypeExternal"
	SentryBootstrapTemplateHostTypeHostTypeExternal SentryBootstrapTemplateHostType = "HostTypeExternal"
)

// for schema
var sentryBootstrapTemplateHostTypeEnum []interface{}

func init() {
	var res []SentryBootstrapTemplateHostType
	if err := json.Unmarshal([]byte(`["HostTypeNotSet","HostTypeInternal","HostTypeExternal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sentryBootstrapTemplateHostTypeEnum = append(sentryBootstrapTemplateHostTypeEnum, v)
	}
}

func (m SentryBootstrapTemplateHostType) validateSentryBootstrapTemplateHostTypeEnum(path, location string, value SentryBootstrapTemplateHostType) error {
	if err := validate.EnumCase(path, location, value, sentryBootstrapTemplateHostTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this sentry bootstrap template host type
func (m SentryBootstrapTemplateHostType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSentryBootstrapTemplateHostTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this sentry bootstrap template host type based on context it is used
func (m SentryBootstrapTemplateHostType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
