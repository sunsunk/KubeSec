// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SentryBootstrapAgentState sentry bootstrap agent state
//
// swagger:model sentryBootstrapAgentState
type SentryBootstrapAgentState string

func NewSentryBootstrapAgentState(value SentryBootstrapAgentState) *SentryBootstrapAgentState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SentryBootstrapAgentState.
func (m SentryBootstrapAgentState) Pointer() *SentryBootstrapAgentState {
	return &m
}

const (

	// SentryBootstrapAgentStateNotSet captures enum value "NotSet"
	SentryBootstrapAgentStateNotSet SentryBootstrapAgentState = "NotSet"

	// SentryBootstrapAgentStateNotRegistered captures enum value "NotRegistered"
	SentryBootstrapAgentStateNotRegistered SentryBootstrapAgentState = "NotRegistered"

	// SentryBootstrapAgentStateNotApproved captures enum value "NotApproved"
	SentryBootstrapAgentStateNotApproved SentryBootstrapAgentState = "NotApproved"

	// SentryBootstrapAgentStateApproved captures enum value "Approved"
	SentryBootstrapAgentStateApproved SentryBootstrapAgentState = "Approved"
)

// for schema
var sentryBootstrapAgentStateEnum []interface{}

func init() {
	var res []SentryBootstrapAgentState
	if err := json.Unmarshal([]byte(`["NotSet","NotRegistered","NotApproved","Approved"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sentryBootstrapAgentStateEnum = append(sentryBootstrapAgentStateEnum, v)
	}
}

func (m SentryBootstrapAgentState) validateSentryBootstrapAgentStateEnum(path, location string, value SentryBootstrapAgentState) error {
	if err := validate.EnumCase(path, location, value, sentryBootstrapAgentStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this sentry bootstrap agent state
func (m SentryBootstrapAgentState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSentryBootstrapAgentStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this sentry bootstrap agent state based on context it is used
func (m SentryBootstrapAgentState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
