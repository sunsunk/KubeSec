// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SentryBootstrapAgentTemplateType sentry bootstrap agent template type
//
// swagger:model sentryBootstrapAgentTemplateType
type SentryBootstrapAgentTemplateType string

func NewSentryBootstrapAgentTemplateType(value SentryBootstrapAgentTemplateType) *SentryBootstrapAgentTemplateType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SentryBootstrapAgentTemplateType.
func (m SentryBootstrapAgentTemplateType) Pointer() *SentryBootstrapAgentTemplateType {
	return &m
}

const (

	// SentryBootstrapAgentTemplateTypeTemplateTypeNotSet captures enum value "TemplateTypeNotSet"
	SentryBootstrapAgentTemplateTypeTemplateTypeNotSet SentryBootstrapAgentTemplateType = "TemplateTypeNotSet"

	// SentryBootstrapAgentTemplateTypeClient captures enum value "Client"
	SentryBootstrapAgentTemplateTypeClient SentryBootstrapAgentTemplateType = "Client"

	// SentryBootstrapAgentTemplateTypeServer captures enum value "Server"
	SentryBootstrapAgentTemplateTypeServer SentryBootstrapAgentTemplateType = "Server"

	// SentryBootstrapAgentTemplateTypeMixed captures enum value "Mixed"
	SentryBootstrapAgentTemplateTypeMixed SentryBootstrapAgentTemplateType = "Mixed"
)

// for schema
var sentryBootstrapAgentTemplateTypeEnum []interface{}

func init() {
	var res []SentryBootstrapAgentTemplateType
	if err := json.Unmarshal([]byte(`["TemplateTypeNotSet","Client","Server","Mixed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sentryBootstrapAgentTemplateTypeEnum = append(sentryBootstrapAgentTemplateTypeEnum, v)
	}
}

func (m SentryBootstrapAgentTemplateType) validateSentryBootstrapAgentTemplateTypeEnum(path, location string, value SentryBootstrapAgentTemplateType) error {
	if err := validate.EnumCase(path, location, value, sentryBootstrapAgentTemplateTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this sentry bootstrap agent template type
func (m SentryBootstrapAgentTemplateType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSentryBootstrapAgentTemplateTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this sentry bootstrap agent template type based on context it is used
func (m SentryBootstrapAgentTemplateType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
