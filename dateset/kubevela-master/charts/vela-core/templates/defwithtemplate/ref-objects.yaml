# Code generated by KubeVela templates. DO NOT EDIT. Please edit the original cue file.
# Definition source cue file: vela-templates/definitions/internal/ref-objects.cue
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  annotations:
    definition.oam.dev/description: Ref-objects allow users to specify ref objects to use. Notice that this component type have special handle logic.
  labels:
    custom.definition.oam.dev/ui-hidden: "true"
  name: ref-objects
  namespace: dynamic_parameters
spec:
  schematic:
    cue:
      template: |
        	// +usage=The resource type for the Kubernetes objects
        	resource?: string
        	// +usage=The group name for the Kubernetes objects
        	group?: string
        	// +usage=If specified, fetch the Kubernetes objects with the name, exclusive to labelSelector
        	name?: string
        	// +usage=If specified, fetch the Kubernetes objects from the namespace. Otherwise, fetch from the application's namespace.
        	namespace?: string
        	// +usage=If specified, fetch the Kubernetes objects from the cluster. Otherwise, fetch from the local cluster.
        	cluster?: string
        	// +usage=If specified, fetch the Kubernetes objects according to the label selector, exclusive to name
        	labelSelector?: [string]: string
        	...

        		parameter.objects[0]
        	...

        			"objects-\(i)": v
        	// +usage=If specified, application will fetch native Kubernetes objects according to the object description
        	objects?: [...#K8sObject]
        	// +usage=If specified, the objects in the urls will be loaded.
        	urls?: [...string]
  status:
    customStatus: |-
      		readyReplicas: *0 | int
      			readyReplicas: context.output.status.readyReplicas
      	message: "Ready:\(ready.readyReplicas)/\(context.output.spec.replicas)"
      	message: ""
    healthPolicy: |-
      		updatedReplicas:    *0 | int
      		readyReplicas:      *0 | int
      		replicas:           *0 | int
      		observedGeneration: *0 | int
      			updatedReplicas: context.output.status.updatedReplicas
      			readyReplicas: context.output.status.readyReplicas
      			replicas: context.output.status.replicas
      			observedGeneration: context.output.status.observedGeneration
      	isHealth: (context.output.spec.replicas == ready.readyReplicas) && (context.output.spec.replicas == ready.updatedReplicas) && (context.output.spec.replicas == ready.replicas) && (ready.observedGeneration == context.output.metadata.generation || ready.observedGeneration > context.output.metadata.generation)
      	isHealth: true
  workload:
    type: autodetects.core.oam.dev


---
