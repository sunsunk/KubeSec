// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/providers/azure_keyvault.go

// Package mock_providers is a generated GoMock package.
package mock_providers

import (
	context "context"
	reflect "reflect"

	keyvault "github.com/Azure/azure-sdk-for-go/profiles/latest/keyvault/keyvault"
	gomock "github.com/golang/mock/gomock"
)

// MockAzureKeyVaultClient is a mock of AzureKeyVaultClient interface.
type MockAzureKeyVaultClient struct {
	ctrl     *gomock.Controller
	recorder *MockAzureKeyVaultClientMockRecorder
}

// MockAzureKeyVaultClientMockRecorder is the mock recorder for MockAzureKeyVaultClient.
type MockAzureKeyVaultClientMockRecorder struct {
	mock *MockAzureKeyVaultClient
}

// NewMockAzureKeyVaultClient creates a new mock instance.
func NewMockAzureKeyVaultClient(ctrl *gomock.Controller) *MockAzureKeyVaultClient {
	mock := &MockAzureKeyVaultClient{ctrl: ctrl}
	mock.recorder = &MockAzureKeyVaultClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAzureKeyVaultClient) EXPECT() *MockAzureKeyVaultClientMockRecorder {
	return m.recorder
}

// DeleteSecret mocks base method.
func (m *MockAzureKeyVaultClient) DeleteSecret(ctx context.Context, vaultBaseURL, secretName string) (keyvault.DeletedSecretBundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", ctx, vaultBaseURL, secretName)
	ret0, _ := ret[0].(keyvault.DeletedSecretBundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockAzureKeyVaultClientMockRecorder) DeleteSecret(ctx, vaultBaseURL, secretName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockAzureKeyVaultClient)(nil).DeleteSecret), ctx, vaultBaseURL, secretName)
}

// GetSecret mocks base method.
func (m *MockAzureKeyVaultClient) GetSecret(ctx context.Context, vaultBaseURL, secretName, secretVersion string) (keyvault.SecretBundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", ctx, vaultBaseURL, secretName, secretVersion)
	ret0, _ := ret[0].(keyvault.SecretBundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockAzureKeyVaultClientMockRecorder) GetSecret(ctx, vaultBaseURL, secretName, secretVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockAzureKeyVaultClient)(nil).GetSecret), ctx, vaultBaseURL, secretName, secretVersion)
}

// GetSecrets mocks base method.
func (m *MockAzureKeyVaultClient) GetSecrets(ctx context.Context, vaultBaseURL string, maxresults *int32) (keyvault.SecretListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecrets", ctx, vaultBaseURL, maxresults)
	ret0, _ := ret[0].(keyvault.SecretListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecrets indicates an expected call of GetSecrets.
func (mr *MockAzureKeyVaultClientMockRecorder) GetSecrets(ctx, vaultBaseURL, maxresults interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecrets", reflect.TypeOf((*MockAzureKeyVaultClient)(nil).GetSecrets), ctx, vaultBaseURL, maxresults)
}

// SetSecret mocks base method.
func (m *MockAzureKeyVaultClient) SetSecret(ctx context.Context, vaultBaseURL, secretName string, parameters keyvault.SecretSetParameters) (keyvault.SecretBundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSecret", ctx, vaultBaseURL, secretName, parameters)
	ret0, _ := ret[0].(keyvault.SecretBundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSecret indicates an expected call of SetSecret.
func (mr *MockAzureKeyVaultClientMockRecorder) SetSecret(ctx, vaultBaseURL, secretName, parameters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSecret", reflect.TypeOf((*MockAzureKeyVaultClient)(nil).SetSecret), ctx, vaultBaseURL, secretName, parameters)
}
