// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/providers/vercel.go

// Package mock_providers is a generated GoMock package.
package mock_providers

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockVercelClient is a mock of VercelClient interface.
type MockVercelClient struct {
	ctrl     *gomock.Controller
	recorder *MockVercelClientMockRecorder
}

// MockVercelClientMockRecorder is the mock recorder for MockVercelClient.
type MockVercelClientMockRecorder struct {
	mock *MockVercelClient
}

// NewMockVercelClient creates a new mock instance.
func NewMockVercelClient(ctrl *gomock.Controller) *MockVercelClient {
	mock := &MockVercelClient{ctrl: ctrl}
	mock.recorder = &MockVercelClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVercelClient) EXPECT() *MockVercelClientMockRecorder {
	return m.recorder
}

// GetProject mocks base method.
func (m *MockVercelClient) GetProject(path string) (map[string]*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", path)
	ret0, _ := ret[0].(map[string]*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject.
func (mr *MockVercelClientMockRecorder) GetProject(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockVercelClient)(nil).GetProject), path)
}
