// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/providers/consul.go

// Package mock_providers is a generated GoMock package.
package mock_providers

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/hashicorp/consul/api"
)

// MockConsulClient is a mock of ConsulClient interface.
type MockConsulClient struct {
	ctrl     *gomock.Controller
	recorder *MockConsulClientMockRecorder
}

// MockConsulClientMockRecorder is the mock recorder for MockConsulClient.
type MockConsulClientMockRecorder struct {
	mock *MockConsulClient
}

// NewMockConsulClient creates a new mock instance.
func NewMockConsulClient(ctrl *gomock.Controller) *MockConsulClient {
	mock := &MockConsulClient{ctrl: ctrl}
	mock.recorder = &MockConsulClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsulClient) EXPECT() *MockConsulClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockConsulClient) Get(key string, q *api.QueryOptions) (*api.KVPair, *api.QueryMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key, q)
	ret0, _ := ret[0].(*api.KVPair)
	ret1, _ := ret[1].(*api.QueryMeta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockConsulClientMockRecorder) Get(key, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConsulClient)(nil).Get), key, q)
}

// List mocks base method.
func (m *MockConsulClient) List(prefix string, q *api.QueryOptions) (api.KVPairs, *api.QueryMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", prefix, q)
	ret0, _ := ret[0].(api.KVPairs)
	ret1, _ := ret[1].(*api.QueryMeta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockConsulClientMockRecorder) List(prefix, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockConsulClient)(nil).List), prefix, q)
}

// Put mocks base method.
func (m *MockConsulClient) Put(p *api.KVPair, q *api.WriteOptions) (*api.WriteMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", p, q)
	ret0, _ := ret[0].(*api.WriteMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockConsulClientMockRecorder) Put(p, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockConsulClient)(nil).Put), p, q)
}
