// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/providers/github.go

// Package mock_providers is a generated GoMock package.
package mock_providers

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/v43/github"
)

// MockGitHubActionClient is a mock of GitHubActionClient interface.
type MockGitHubActionClient struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubActionClientMockRecorder
}

// MockGitHubActionClientMockRecorder is the mock recorder for MockGitHubActionClient.
type MockGitHubActionClientMockRecorder struct {
	mock *MockGitHubActionClient
}

// NewMockGitHubActionClient creates a new mock instance.
func NewMockGitHubActionClient(ctrl *gomock.Controller) *MockGitHubActionClient {
	mock := &MockGitHubActionClient{ctrl: ctrl}
	mock.recorder = &MockGitHubActionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitHubActionClient) EXPECT() *MockGitHubActionClientMockRecorder {
	return m.recorder
}

// CreateOrUpdateRepoSecret mocks base method.
func (m *MockGitHubActionClient) CreateOrUpdateRepoSecret(ctx context.Context, owner, repo string, eSecret *github.EncryptedSecret) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateRepoSecret", ctx, owner, repo, eSecret)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateRepoSecret indicates an expected call of CreateOrUpdateRepoSecret.
func (mr *MockGitHubActionClientMockRecorder) CreateOrUpdateRepoSecret(ctx, owner, repo, eSecret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateRepoSecret", reflect.TypeOf((*MockGitHubActionClient)(nil).CreateOrUpdateRepoSecret), ctx, owner, repo, eSecret)
}

// DeleteRepoSecret mocks base method.
func (m *MockGitHubActionClient) DeleteRepoSecret(ctx context.Context, owner, repo, name string) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepoSecret", ctx, owner, repo, name)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRepoSecret indicates an expected call of DeleteRepoSecret.
func (mr *MockGitHubActionClientMockRecorder) DeleteRepoSecret(ctx, owner, repo, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepoSecret", reflect.TypeOf((*MockGitHubActionClient)(nil).DeleteRepoSecret), ctx, owner, repo, name)
}

// GetRepoPublicKey mocks base method.
func (m *MockGitHubActionClient) GetRepoPublicKey(ctx context.Context, owner, repo string) (*github.PublicKey, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoPublicKey", ctx, owner, repo)
	ret0, _ := ret[0].(*github.PublicKey)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRepoPublicKey indicates an expected call of GetRepoPublicKey.
func (mr *MockGitHubActionClientMockRecorder) GetRepoPublicKey(ctx, owner, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoPublicKey", reflect.TypeOf((*MockGitHubActionClient)(nil).GetRepoPublicKey), ctx, owner, repo)
}

// ListRepoSecrets mocks base method.
func (m *MockGitHubActionClient) ListRepoSecrets(ctx context.Context, owner, repo string, opts *github.ListOptions) (*github.Secrets, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepoSecrets", ctx, owner, repo, opts)
	ret0, _ := ret[0].(*github.Secrets)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRepoSecrets indicates an expected call of ListRepoSecrets.
func (mr *MockGitHubActionClientMockRecorder) ListRepoSecrets(ctx, owner, repo, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepoSecrets", reflect.TypeOf((*MockGitHubActionClient)(nil).ListRepoSecrets), ctx, owner, repo, opts)
}
