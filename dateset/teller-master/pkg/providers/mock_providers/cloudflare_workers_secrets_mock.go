// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/providers/cloudflare_workers_secrets.go

// Package mock_providers is a generated GoMock package.
package mock_providers

import (
	context "context"
	reflect "reflect"

	cloudflare "github.com/cloudflare/cloudflare-go"
	gomock "github.com/golang/mock/gomock"
)

// MockCloudflareSecretsClient is a mock of CloudflareSecretsClient interface.
type MockCloudflareSecretsClient struct {
	ctrl     *gomock.Controller
	recorder *MockCloudflareSecretsClientMockRecorder
}

// MockCloudflareSecretsClientMockRecorder is the mock recorder for MockCloudflareSecretsClient.
type MockCloudflareSecretsClientMockRecorder struct {
	mock *MockCloudflareSecretsClient
}

// NewMockCloudflareSecretsClient creates a new mock instance.
func NewMockCloudflareSecretsClient(ctrl *gomock.Controller) *MockCloudflareSecretsClient {
	mock := &MockCloudflareSecretsClient{ctrl: ctrl}
	mock.recorder = &MockCloudflareSecretsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudflareSecretsClient) EXPECT() *MockCloudflareSecretsClientMockRecorder {
	return m.recorder
}

// DeleteWorkersSecret mocks base method.
func (m *MockCloudflareSecretsClient) DeleteWorkersSecret(ctx context.Context, script, secretName string) (cloudflare.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkersSecret", ctx, script, secretName)
	ret0, _ := ret[0].(cloudflare.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWorkersSecret indicates an expected call of DeleteWorkersSecret.
func (mr *MockCloudflareSecretsClientMockRecorder) DeleteWorkersSecret(ctx, script, secretName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkersSecret", reflect.TypeOf((*MockCloudflareSecretsClient)(nil).DeleteWorkersSecret), ctx, script, secretName)
}

// SetWorkersSecret mocks base method.
func (m *MockCloudflareSecretsClient) SetWorkersSecret(ctx context.Context, script string, req *cloudflare.WorkersPutSecretRequest) (cloudflare.WorkersPutSecretResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWorkersSecret", ctx, script, req)
	ret0, _ := ret[0].(cloudflare.WorkersPutSecretResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetWorkersSecret indicates an expected call of SetWorkersSecret.
func (mr *MockCloudflareSecretsClientMockRecorder) SetWorkersSecret(ctx, script, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWorkersSecret", reflect.TypeOf((*MockCloudflareSecretsClient)(nil).SetWorkersSecret), ctx, script, req)
}
