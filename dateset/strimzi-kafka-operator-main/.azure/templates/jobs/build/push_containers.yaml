jobs:
  - job: 'push_containers'
    displayName: 'Push Containers'
    # Set timeout for jobs
    timeoutInMinutes: 60
    # Base system
    pool:
      vmImage: 'Ubuntu-22.04'
    # Pipeline steps
    steps:
      # Install Prerequisites
      - template: "../../steps/prerequisites/install_docker.yaml"
      - template: "../../steps/prerequisites/install_yq.yaml"
      - template: "../../steps/prerequisites/install_cosign.yaml"
      - template: "../../steps/prerequisites/install_syft.yaml"

      # Get the container archives
      - ${{ each arch in parameters.architectures }}:
        - task: DownloadPipelineArtifact@2
          inputs:
            source: '${{ parameters.artifactSource }}'
            artifact: Containers-${{ arch }}
            path: $(System.DefaultWorkingDirectory)/
            project: '${{ parameters.artifactProject }}'
            pipeline: '${{ parameters.artifactPipeline }}'
            runVersion: '${{ parameters.artifactRunVersion }}'
            runId: '${{ parameters.artifactRunId }}'
          displayName: "Download the ${{ arch }} container archives"
        - bash: tar -xvf containers-${{ arch }}.tar
          displayName: "Untar the ${{ arch }} containers"
        - bash: rm containers-${{ arch }}.tar
          displayName: "Delete the original archive with the ${{ arch }} containers"

      # Push containers and their manifests
      - bash: "docker login -u $DOCKER_USER -p $DOCKER_PASS $DOCKER_REGISTRY"
        displayName: "Login to container registry"
        env:
          BUILD_REASON: $(Build.Reason)
          BRANCH: $(Build.SourceBranch)
          DOCKER_USER: $(QUAY_USER)
          DOCKER_PASS: $(QUAY_PASS)
          DOCKER_REGISTRY: "quay.io"
      - bash: "make docker_delete_manifest"
        displayName: "Delete existing container manifests"
        env:
          BUILD_REASON: $(Build.Reason)
          BRANCH: $(Build.SourceBranch)
          DOCKER_REGISTRY: "quay.io"
          DOCKER_ORG: "strimzi"
          DOCKER_TAG: '${{ parameters.dockerTag }}'
      - ${{ each arch in parameters.architectures }}:
          - bash: make docker_load docker_tag docker_push docker_amend_manifest docker_delete_archive
            displayName: "Push the ${{ arch }} containers and create manifests"
            env:
              BUILD_REASON: $(Build.Reason)
              BRANCH: $(Build.SourceBranch)
              DOCKER_REGISTRY: "quay.io"
              DOCKER_ORG: "strimzi"
              DOCKER_TAG: '${{ parameters.dockerTag }}'
              DOCKER_ARCHITECTURE: ${{ arch }}
      - bash: "make docker_push_manifest"
        displayName: "Push container manifests"
        env:
          BUILD_REASON: $(Build.Reason)
          BRANCH: $(Build.SourceBranch)
          DOCKER_REGISTRY: "quay.io"
          DOCKER_ORG: "strimzi"
          DOCKER_TAG: '${{ parameters.dockerTag }}'
      - bash: "make docker_sign_manifest"
        displayName: "Sign container manifests"
        env:
          BUILD_REASON: $(Build.Reason)
          BRANCH: $(Build.SourceBranch)
          BUILD_ID: $(Build.BuildId)
          BUILD_COMMIT: $(Build.SourceVersion)
          DOCKER_REGISTRY: "quay.io"
          DOCKER_ORG: "strimzi"
          DOCKER_TAG: '${{ parameters.dockerTag }}'
          COSIGN_PASSWORD: $(COSIGN_PASSWORD)
          COSIGN_PRIVATE_KEY: $(COSIGN_PRIVATE_KEY)
      # SBOMs generation, packaging, and signing
      - ${{ each arch in parameters.architectures }}:
          - bash: make docker_sbom
            displayName: "Generate SBOMs for ${{ arch }} containers"
            env:
              BUILD_REASON: $(Build.Reason)
              BRANCH: $(Build.SourceBranch)
              DOCKER_REGISTRY: "quay.io"
              DOCKER_ORG: "strimzi"
              DOCKER_TAG: '${{ parameters.dockerTag }}'
              DOCKER_ARCHITECTURE: ${{ arch }}
              COSIGN_PASSWORD: $(COSIGN_PASSWORD)
              COSIGN_PRIVATE_KEY: $(COSIGN_PRIVATE_KEY)
      - bash: tar -z -C ./sbom/ -cvpf sbom.tar.gz ./
        displayName: "Tar the SBOM files"
      - publish: $(System.DefaultWorkingDirectory)/sbom.tar.gz
        artifact: SBOMs-${{ parameters.dockerTag }}
        displayName: "Publish the SBOM files"
      # push the SBOMs to container registry only for releases
      - ${{ each arch in parameters.architectures }}:
          - bash: make docker_push_sbom
            displayName: "Push SBOMs for ${{ arch }} containers"
            condition: startsWith(variables['build.sourceBranch'], 'refs/heads/release-')
            env:
              BUILD_REASON: $(Build.Reason)
              BRANCH: $(Build.SourceBranch)
              DOCKER_REGISTRY: "quay.io"
              DOCKER_ORG: "strimzi"
              DOCKER_TAG: '${{ parameters.dockerTag }}'
              DOCKER_ARCHITECTURE: ${{ arch }}
              COSIGN_PASSWORD: $(COSIGN_PASSWORD)
              COSIGN_PRIVATE_KEY: $(COSIGN_PRIVATE_KEY)