apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sts-mysql-local
spec:
  selector:
    matchLabels:
      app: sts-mysql-local
      app.kubernetes.io/name: sts-mysql-local
  serviceName: sts-mysql-local
  replicas: 1
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app: sts-mysql-local
        app.kubernetes.io/name: sts-mysql-local
    spec:
      initContainers:
      - name: init-mysql
        image: daocloud.io/mysql:5.7
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
        command:
        - bash
        - -ex
        - /mnt/config-map/init-mysql.sh
        volumeMounts:
        - name: conf
          mountPath: /mnt/conf.d
        - name: config-map
          mountPath: /mnt/config-map
      - name: clone-mysql
        image: daocloud.io/daocloud/xtrabackup:1.0
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
        command:
        - bash
        - -ex
        - /mnt/config-map/clone-mysql.sh
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        - name: config-map
          mountPath: /mnt/config-map
      containers:
      - name: mysql
        image: daocloud.io/mysql:5.7
        env:
        - name: MYSQL_ALLOW_EMPTY_PASSWORD
          value: "1"
        ports:
        - name: mysql
          containerPort: 3306
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        # resources:
        #   requests:
        #     cpu: 500m
        #     memory: 1Gi
        livenessProbe:
          exec:
            command: ["mysqladmin", "ping"]
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            # Check we can execute queries over TCP (skip-networking is off).
            command: ["mysql", "-h", "127.0.0.1", "-e", "SELECT 1"]
          initialDelaySeconds: 5
          periodSeconds: 2
          timeoutSeconds: 1
      - name: xtrabackup
        image: daocloud.io/piraeus/xtrabackup:1.0
        ports:
        - name: xtrabackup
          containerPort: 3307
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
        command:
        - bash
        - -ex
        - /mnt/config-map/xtrabackup.sh
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        - name: config-map
          mountPath: /mnt/config-map
        # resources:
        #   requests:
        #     cpu: 100m
        #     memory: 100Mi
      volumes:
      - name: conf
        emptyDir: {}
      - name: config-map
        configMap:
          name: sts-mysql-local
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        app: sts-mysql-local
        app.kubernetes.io/name: sts-mysql-local
    spec:
      storageClassName: hwameistor-storage-lvm-hdd
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 1Gi
---
# Headless service for stable DNS entries of StatefulSet members.
apiVersion: v1
kind: Service
metadata:
  name: sts-mysql-local
  labels:
    app: sts-mysql-local
    app.kubernetes.io/name: sts-mysql-local
spec:
  ports:
  - name: mysql
    port: 3306
  clusterIP: None
  selector:
    app: sts-mysql-local
---
# Client service for connecting to any MySQL instance for reads.
# For writes, you must instead connect to the primary: mysql-0.mysql.
apiVersion: v1
kind: Service
metadata:
  name: sts-mysql-local-read
  labels:
    app: sts-mysql-local
    app.kubernetes.io/name: sts-mysql-local
    readonly: "true"
spec:
  ports:
  - name: mysql
    port: 3306
  selector:
    app: sts-mysql-local
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: sts-mysql-local
  labels:
    app: sts-mysql-local
    app.kubernetes.io/name: sts-mysql-local
data:
  primary.cnf: |
    # Apply this config only on the primary.
    [mysqld]
    log-bin
  replica.cnf: |
    # Apply this config only on replicas.
    [mysqld]
    super-read-only
  init-mysql.sh: |
    # Generate mysql server-id from pod ordinal index.
    [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
    ordinal=${BASH_REMATCH[1]}
    echo [mysqld] > /mnt/conf.d/server-id.cnf
    # Add an offset to avoid reserved server-id=0 value.
    echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
    # Copy appropriate conf.d files from config-map to emptyDir.
    if [[ $ordinal -eq 0 ]]; then
      cp /mnt/config-map/primary.cnf /mnt/conf.d/
    else
      cp /mnt/config-map/replica.cnf /mnt/conf.d/
      SET_NAME=${POD_NAME%-*}
      INDEX=${POD_NAME##*-}
      while sleep 1; do
        mysql -h ${SET_NAME}-$(($INDEX-1)).${SET_NAME} -e "SELECT 1" && break
      done
    fi
  clone-mysql.sh: |
    # Skip the clone if data already exists.
    [[ -d /var/lib/mysql/mysql ]] && exit 0
    # Skip the clone on primary (ordinal index 0).
    [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
    ordinal=${BASH_REMATCH[1]}
    [[ $ordinal -eq 0 ]] && exit 0
    # Clone data from previous peer.
    SET_NAME=${POD_NAME%-*}
    ncat --recv-only ${SET_NAME}-$(($ordinal-1)).${SET_NAME} 3307 | xbstream -x -C /var/lib/mysql
    # Prepare the backup.
    xtrabackup --prepare --target-dir=/var/lib/mysql
  xtrabackup.sh: |
    cd /var/lib/mysql
    # Determine binlog position of cloned data, if any.
    if [[ -f xtrabackup_slave_info && "x$(<xtrabackup_slave_info)" != "x" ]]; then
      # XtraBackup already generated a partial "CHANGE MASTER TO" query
      # because we're cloning from an existing replica. (Need to remove the tailing semicolon!)
      cat xtrabackup_slave_info | sed -E 's/;$//g' > change_master_to.sql.in
      # Ignore xtrabackup_binlog_info in this case (it's useless).
      rm -f xtrabackup_slave_info xtrabackup_binlog_info
    elif [[ -f xtrabackup_binlog_info ]]; then
      # We're cloning directly from primary. Parse binlog position.
      [[ `cat xtrabackup_binlog_info` =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1
      rm -f xtrabackup_binlog_info xtrabackup_slave_info
      echo "CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\
            MASTER_LOG_POS=${BASH_REMATCH[2]}" > change_master_to.sql.in
    fi

    # Check if we need to complete a clone by starting replication.
    if [[ -f change_master_to.sql.in ]]; then
      echo "Waiting for mysqld to be ready (accepting connections)"
      until mysql -h 127.0.0.1 -e "SELECT 1"; do sleep 1; done

      echo "Initializing replication from clone position"
      SET_NAME=${POD_NAME%-*}
      mysql -h 127.0.0.1 \
            -e "$(<change_master_to.sql.in), \
                    MASTER_HOST='${SET_NAME}-0.${SET_NAME}', \
                    MASTER_USER='root', \
                    MASTER_PASSWORD='', \
                    MASTER_CONNECT_RETRY=10; \
                  START SLAVE;" || exit 1
      # In case of container restart, attempt this at-most-once.
      mv change_master_to.sql.in change_master_to.sql.orig
    fi

    # Start a server to send backups when requested by peers.
    exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \
      "xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root"

