// Code generated by informer-gen. DO NOT EDIT.

package externalversions

import (
	"fmt"

	v1alpha1 "github.com/hwameistor/hwameistor/pkg/apis/hwameistor/v1alpha1"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	cache "k8s.io/client-go/tools/cache"
)

// GenericInformer is type of SharedIndexInformer which will locate and delegate to other
// sharedInformers based on type
type GenericInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() cache.GenericLister
}

type genericInformer struct {
	informer cache.SharedIndexInformer
	resource schema.GroupResource
}

// Informer returns the SharedIndexInformer.
func (f *genericInformer) Informer() cache.SharedIndexInformer {
	return f.informer
}

// Lister returns the GenericLister.
func (f *genericInformer) Lister() cache.GenericLister {
	return cache.NewGenericLister(f.Informer().GetIndexer(), f.resource)
}

// ForResource gives generic access to a shared informer of the matching type
// TODO extend this to unknown resources with a client pool
func (f *sharedInformerFactory) ForResource(resource schema.GroupVersionResource) (GenericInformer, error) {
	switch resource {
	// Group=hwameistor.io, Version=v1alpha1
	case v1alpha1.SchemeGroupVersion.WithResource("events"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Hwameistor().V1alpha1().Events().Informer()}, nil
	case v1alpha1.SchemeGroupVersion.WithResource("localdisks"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Hwameistor().V1alpha1().LocalDisks().Informer()}, nil
	case v1alpha1.SchemeGroupVersion.WithResource("localdiskactions"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Hwameistor().V1alpha1().LocalDiskActions().Informer()}, nil
	case v1alpha1.SchemeGroupVersion.WithResource("localdiskclaims"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Hwameistor().V1alpha1().LocalDiskClaims().Informer()}, nil
	case v1alpha1.SchemeGroupVersion.WithResource("localdisknodes"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Hwameistor().V1alpha1().LocalDiskNodes().Informer()}, nil
	case v1alpha1.SchemeGroupVersion.WithResource("localdiskvolumes"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Hwameistor().V1alpha1().LocalDiskVolumes().Informer()}, nil
	case v1alpha1.SchemeGroupVersion.WithResource("localstoragenodes"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Hwameistor().V1alpha1().LocalStorageNodes().Informer()}, nil
	case v1alpha1.SchemeGroupVersion.WithResource("localvolumes"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Hwameistor().V1alpha1().LocalVolumes().Informer()}, nil
	case v1alpha1.SchemeGroupVersion.WithResource("localvolumeconverts"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Hwameistor().V1alpha1().LocalVolumeConverts().Informer()}, nil
	case v1alpha1.SchemeGroupVersion.WithResource("localvolumeexpands"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Hwameistor().V1alpha1().LocalVolumeExpands().Informer()}, nil
	case v1alpha1.SchemeGroupVersion.WithResource("localvolumegroups"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Hwameistor().V1alpha1().LocalVolumeGroups().Informer()}, nil
	case v1alpha1.SchemeGroupVersion.WithResource("localvolumemigrates"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Hwameistor().V1alpha1().LocalVolumeMigrates().Informer()}, nil
	case v1alpha1.SchemeGroupVersion.WithResource("localvolumereplicas"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Hwameistor().V1alpha1().LocalVolumeReplicas().Informer()}, nil
	case v1alpha1.SchemeGroupVersion.WithResource("localvolumesnapshots"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Hwameistor().V1alpha1().LocalVolumeSnapshots().Informer()}, nil
	case v1alpha1.SchemeGroupVersion.WithResource("localvolumesnapshotrestores"):
		return &genericInformer{resource: resource.GroupResource(), informer: f.Hwameistor().V1alpha1().LocalVolumeSnapshotRestores().Informer()}, nil

	}

	return nil, fmt.Errorf("no informer found for %v", resource)
}
